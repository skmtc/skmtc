{
  "version": 1,
  "nodes": [
    {
      "name": "",
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/mod.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "jsDoc": {
        "tags": [
          {
            "kind": "module",
            "name": "SKMTC Core\n\nSKMTC (Schema Kit Mapping & Type Conversion) is a powerful TypeScript/Deno library\nfor processing OpenAPI v3 documents and generating code artifacts. It provides a\ncomprehensive three-phase pipeline for parsing, generating, and rendering OpenAPI\nschemas into various output formats.\n\n## Quick Start\n\n```typescript\nimport { toArtifacts } from '@skmtc/core';\n\nconst result = await toArtifacts({\ntraceId: 'my-trace',\nspanId: 'my-span',\ndocumentObject: openApiDoc,\nsettings: clientSettings,\ntoGeneratorConfigMap: () => generatorMap,\nstartAt: Date.now(),\nsilent: false\n});\n\nconsole.log(result.artifacts); // Generated code files\nconsole.log(result.manifest);  // Generation metadata\n```\n\n## Architecture\n\nThe library follows a three-phase pipeline:\n- **Parse Phase**: Converts OpenAPI v3 JSON into internal OAS objects\n- **Generate Phase**: Transforms OAS objects into generator artifacts\n- **Render Phase**: Renders artifacts to formatted files\n\n## Key Components\n\n- {@link CoreContext} - Main orchestration class for the pipeline\n- {@link toArtifacts} - Primary transformation function\n- {@link ContentBase} - Base class for creating generators\n- {@link ModelBase} and {@link OperationBase} - DSL building blocks\n- {@link List} - Powerful string manipulation and code generation utility\n\n## Type System\n\nThe library provides comprehensive TypeScript types for OpenAPI schemas,\ngenerator configurations, and output artifacts. All major types are\nvalidated using Valibot schemas for runtime safety.\n"
          },
          {
            "kind": "example",
            "doc": "Basic Usage\n```typescript\nimport { CoreContext } from '@skmtc/core';\n\nconst context = new CoreContext({\n  spanId: 'my-span',\n  silent: false\n});\n\nconst result = await context.toArtifacts({\n  documentObject: myOpenApiDoc,\n  settings: mySettings,\n  toGeneratorConfigMap: () => myGenerators,\n  prettier: prettierConfig,\n  silent: false\n});\n```"
          }
        ]
      },
      "kind": "moduleDoc"
    },
    {
      "name": "checkProjectName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/app/validate.ts",
        "line": 33,
        "col": 13,
        "byteIndex": 1288
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Validates a project name against SKMTC naming conventions.\n\nEnsures project names follow standard naming patterns suitable for package\nmanagers and file systems. Names must be lowercase, contain only letters,\nnumbers, and hyphens, with specific length and format requirements.\n",
        "tags": [
          {
            "kind": "param",
            "name": "name",
            "doc": "- The project name to validate"
          },
          {
            "kind": "return",
            "doc": "An error message string if validation fails, undefined if valid\n"
          },
          {
            "kind": "example",
            "doc": "Valid project names\n```typescript\ncheckProjectName('my-api-client'); // undefined (valid)\ncheckProjectName('user-service');  // undefined (valid)\ncheckProjectName('api2');          // undefined (valid)\n```\n"
          },
          {
            "kind": "example",
            "doc": "Invalid project names\n```typescript\ncheckProjectName('A');             // 'Name must be at least 2 characters long'\ncheckProjectName('My-API-Client'); // 'Name must only contain lowercase letters, numbers and hyphens'\ncheckProjectName('-api-client');   // 'Name cannot start with a hyphen'\ncheckProjectName('api-client-');   // 'Name cannot end with a hyphen'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validation rules\n- Minimum length: 2 characters\n- Maximum length: 20 characters\n- Allowed characters: a-z, 0-9, hyphens (-)\n- Cannot start or end with hyphen\n- Must be lowercase only"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ParsePhase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 29,
        "col": 0,
        "byteIndex": 1313
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents the parse phase of the SKMTC pipeline.\n\nThe parse phase converts OpenAPI v3 JSON documents into internal OAS objects,\nhandling schema validation, reference resolution, and data transformation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Identifies this as the parse phase"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 31,
                  "col": 2,
                  "byteIndex": 1386
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "parse",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "parse"
                  }
                },
                "typeParams": []
              },
              {
                "name": "context",
                "jsDoc": {
                  "doc": "The parse context containing parsed document and utilities"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 33,
                  "col": 2,
                  "byteIndex": 1470
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ParseContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ParseContext"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "GeneratePhase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 42,
        "col": 0,
        "byteIndex": 1722
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents the generate phase of the SKMTC pipeline.\n\nThe generate phase transforms parsed OAS objects into generator-specific artifacts,\napplying templates, handling references, and preparing output files."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Identifies this as the generate phase"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1801
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "generate",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "generate"
                  }
                },
                "typeParams": []
              },
              {
                "name": "context",
                "jsDoc": {
                  "doc": "The generate context for artifact creation and processing"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1887
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "RenderPhase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 55,
        "col": 0,
        "byteIndex": 2146
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents the render phase of the SKMTC pipeline.\n\nThe render phase takes generator artifacts and renders them to formatted files,\napplying code formatting, file system operations, and final output generation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Identifies this as the render phase"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 57,
                  "col": 2,
                  "byteIndex": 2221
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "render",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "render"
                  }
                },
                "typeParams": []
              },
              {
                "name": "context",
                "jsDoc": {
                  "doc": "The render context for file output and formatting"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 59,
                  "col": 2,
                  "byteIndex": 2297
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RenderContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RenderContext"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ExecutionPhase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 68,
        "col": 0,
        "byteIndex": 2567
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing any phase of the SKMTC pipeline execution.\n\nEach execution phase contains its type identifier and associated context,\nallowing for type-safe phase handling and context access throughout the pipeline."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "ParsePhase",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParsePhase"
              }
            },
            {
              "repr": "GeneratePhase",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratePhase"
              }
            },
            {
              "repr": "RenderPhase",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "RenderPhase"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ToArtifactsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 96,
        "col": 0,
        "byteIndex": 3339
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for the `toArtifacts` method of CoreContext.\n\nContains all the necessary configuration for transforming an OpenAPI document\ninto code artifacts through the SKMTC pipeline."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "documentObject",
                "jsDoc": {
                  "doc": "The OpenAPI v3 document to process"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 98,
                  "col": 2,
                  "byteIndex": 3417
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OpenAPIV3.Document",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OpenAPIV3.Document"
                  }
                },
                "typeParams": []
              },
              {
                "name": "settings",
                "jsDoc": {
                  "doc": "Client settings for customization (optional)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 100,
                  "col": 2,
                  "byteIndex": 3508
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "ClientSettings",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ClientSettings"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "toGeneratorConfigMap",
                "jsDoc": {
                  "doc": "Function that returns the generator configuration map"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 102,
                  "col": 2,
                  "byteIndex": 3610
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "GeneratorsMapContainer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          }
                        ],
                        "typeName": "GeneratorsMapContainer"
                      }
                    },
                    "params": [],
                    "typeParams": [
                      {
                        "name": "EnrichmentType",
                        "default": {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              },
              {
                "name": "prettier",
                "jsDoc": {
                  "doc": "Prettier configuration for code formatting (optional)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 104,
                  "col": 2,
                  "byteIndex": 3770
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "PrettierConfigType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PrettierConfigType"
                  }
                },
                "typeParams": []
              },
              {
                "name": "silent",
                "jsDoc": {
                  "doc": "Whether to suppress console output"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 106,
                  "col": 2,
                  "byteIndex": 3846
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "CoreContext",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 160,
        "col": 0,
        "byteIndex": 5368
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The main orchestration class for the SKMTC transformation pipeline.\n\n`CoreContext` manages the three-phase process of transforming OpenAPI v3 documents\ninto code artifacts. It coordinates parsing, generation, and rendering phases while\nproviding logging, tracing, and error handling capabilities.\n\n## Pipeline Phases\n\n1. **Parse Phase**: Uses {@link ParseContext} to convert OpenAPI JSON into OAS objects\n2. **Generate Phase**: Uses {@link GenerateContext} to transform OAS objects with generators  \n3. **Render Phase**: Uses {@link RenderContext} to format and prepare final artifacts\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { CoreContext } from '@skmtc/core';\n\nconst context = new CoreContext({\n  spanId: 'user-api-generation',\n  logsPath: './logs',\n  silent: false\n});\n\nconst result = await context.toArtifacts({\n  documentObject: openApiDoc,\n  settings: clientSettings,\n  toGeneratorConfigMap: () => generators,\n  prettier: prettierConfig,\n  silent: false\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using individual phases\n```typescript\nconst context = new CoreContext({\n  spanId: 'custom-pipeline',\n  silent: true\n});\n\n// Parse phase only\nconst { oasDocument } = context.parse(openApiDoc);\n\n// Then use document for custom processing\nconsole.log('Parsed schemas:', Object.keys(oasDocument.components.schemas));\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new CoreContext instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Configuration for the context"
                },
                {
                  "kind": "param",
                  "name": "args.spanId",
                  "doc": "- Unique identifier for this transformation span"
                },
                {
                  "kind": "param",
                  "name": "args.logsPath",
                  "doc": "- Optional directory path for log files"
                },
                {
                  "kind": "param",
                  "name": "args.silent",
                  "doc": "- Whether to suppress console output\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// Basic context with console logging\nconst context = new CoreContext({\n  spanId: 'my-generation',\n  silent: false\n});\n\n// Context with file logging\nconst context = new CoreContext({\n  spanId: 'batch-job-123',\n  logsPath: './logs/generation',\n  silent: true\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "spanId",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "logsPath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "silent",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CoreContextArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CoreContextArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
              "line": 200,
              "col": 2,
              "byteIndex": 6450
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Logger instance for the context"
            },
            "tsType": {
              "repr": "Logger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Logger"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "logger",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
              "line": 162,
              "col": 2,
              "byteIndex": 5438
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to suppress console output"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "silent",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
              "line": 174,
              "col": 2,
              "byteIndex": 5751
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Parses an OpenAPI v3 document into internal OAS objects.\n\nThis method executes only the parse phase of the pipeline, converting\nthe raw OpenAPI JSON into structured OAS objects that can be used for\ngeneration or custom processing.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "documentObject",
                  "doc": "- The OpenAPI v3 document to parse"
                },
                {
                  "kind": "return",
                  "doc": "An object containing the parsed OAS document\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nimport { CoreContext } from '@skmtc/core';\n\nconst context = new CoreContext({\n  spanId: 'parse-only',\n  silent: true\n});\n\nconst { oasDocument } = context.parse(openApiDoc);\n\n// Access parsed components\nconsole.log('Models:', Object.keys(oasDocument.components.schemas));\nconsole.log('Paths:', Object.keys(oasDocument.paths));\n\n// Use for custom processing\nconst userModel = oasDocument.components.schemas['User'];\nif (userModel && !userModel.isRef()) {\n  console.log('User properties:', Object.keys(userModel.properties));\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "parse",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "documentObject",
                  "optional": false,
                  "tsType": {
                    "repr": "OpenAPIV3.Document",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OpenAPIV3.Document"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "oasDocument",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                        "line": 283,
                        "col": 47,
                        "byteIndex": 8947
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "OasDocument",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasDocument"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
              "line": 283,
              "col": 2,
              "byteIndex": 8902
            }
          },
          {
            "jsDoc": {
              "doc": "Executes the complete transformation pipeline to generate code artifacts.\n\nThis method orchestrates all three phases:\n1. **Parse**: Convert OpenAPI document to OAS objects\n2. **Generate**: Transform OAS objects using generators  \n3. **Render**: Format and prepare final artifacts\n\nThe result includes both the generated code files and comprehensive metadata\nabout the generation process, including file mappings, previews, and results.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Configuration for the artifact generation"
                },
                {
                  "kind": "param",
                  "name": "args.documentObject",
                  "doc": "- The OpenAPI v3 document to process"
                },
                {
                  "kind": "param",
                  "name": "args.settings",
                  "doc": "- Client settings for customization"
                },
                {
                  "kind": "param",
                  "name": "args.toGeneratorConfigMap",
                  "doc": "- Function returning generator configuration"
                },
                {
                  "kind": "param",
                  "name": "args.prettier",
                  "doc": "- Optional Prettier configuration for code formatting"
                },
                {
                  "kind": "param",
                  "name": "args.silent",
                  "doc": "- Whether to suppress console output during generation"
                },
                {
                  "kind": "return",
                  "doc": "Promise resolving to rendered artifacts and metadata\n"
                },
                {
                  "kind": "example",
                  "doc": "Complete pipeline\n```typescript\nconst context = new CoreContext({\n  spanId: 'api-client-gen',\n  silent: false\n});\n\nconst result = await context.toArtifacts({\n  documentObject: openApiDoc,\n  settings: {\n    basePath: './src/api',\n    skip: {\n      models: ['Internal*'],\n      operations: {\n        '/health': ['get'],\n        '/debug/**': ['*']\n      }\n    }\n  },\n  toGeneratorConfigMap: () => ({\n    models: {\n      generator: MyModelGenerator,\n      settings: { includeValidation: true }\n    },\n    operations: {\n      generator: MyOperationGenerator,\n      settings: { generateTypes: true }\n    }\n  }),\n  prettier: {\n    semi: false,\n    singleQuote: true,\n    trailingComma: 'all'\n  },\n  silent: false\n});\n\n// Access generated artifacts\nconsole.log('Generated files:', Object.keys(result.artifacts));\n\n// Write to filesystem\nfor (const [path, content] of Object.entries(result.artifacts)) {\n  await Deno.writeTextFile(path, content);\n}\n\n// Access metadata\nconsole.log('Generation results:', result.results);\nconsole.log('File mappings:', result.files);\n```\n"
                },
                {
                  "kind": "throws",
                  "type": null,
                  "doc": "Will throw an error if any phase of the pipeline fails"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toArtifacts",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "documentObject",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "settings",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "toGeneratorConfigMap",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "prettier",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "ToArtifactsArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToArtifactsArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "RenderResult",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "RenderResult"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "hasBody": true,
              "isAsync": true,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
              "line": 364,
              "col": 2,
              "byteIndex": 11525
            }
          },
          {
            "jsDoc": {
              "doc": "Executes a function with distributed tracing and logging.\n\nThis method wraps function execution with tracing capabilities, updating the\nstack trail for context tracking and logging execution details. It's used\nthroughout the SKMTC pipeline to maintain execution context and debugging information.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "T",
                  "doc": "- The return type of the traced function"
                },
                {
                  "kind": "param",
                  "name": "token",
                  "doc": "- Single token or array of tokens to add to the trace stack"
                },
                {
                  "kind": "param",
                  "name": "fn",
                  "doc": "- The function to execute within the trace context"
                },
                {
                  "kind": "return",
                  "doc": "The result of executing the traced function\n"
                },
                {
                  "kind": "example",
                  "doc": "Single token tracing\n```typescript\nconst result = context.trace('parse-schema', () => {\n  // Schema parsing logic here\n  return parsedSchema;\n});\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Multiple token tracing (nested context)\n```typescript\nconst result = context.trace(['components', 'schemas', 'User'], () => {\n  // Process User schema\n  return processedUserSchema;\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "trace",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "token",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "T"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
              "line": 451,
              "col": 2,
              "byteIndex": 14023
            }
          },
          {
            "jsDoc": {
              "doc": "Captures a result at the current execution position in the stack trail.\n\nThis method records processing results (success, warning, error, etc.) at the\ncurrent location in the document traversal stack. Results are associated with\nthe current stack trail position, enabling detailed error reporting and\ndebugging of OpenAPI processing issues.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "result",
                  "doc": "- The type of result to capture (success, warning, error, etc.)\n"
                },
                {
                  "kind": "example",
                  "doc": "Capturing a warning result\n```typescript\ncontext.captureCurrentResult('warning');\n// Result captured at current stack position like: \"components.schemas.User.properties.email\"\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Usage during schema processing\n```typescript\ncontext.trace(['components', 'schemas', 'User'], () => {\n  try {\n    processUserSchema();\n    context.captureCurrentResult('success');\n  } catch (error) {\n    context.captureCurrentResult('error');\n  }\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "captureCurrentResult",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "result",
                  "optional": false,
                  "tsType": {
                    "repr": "ResultType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ResultType"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
              "line": 513,
              "col": 2,
              "byteIndex": 15946
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "JsonFormatterArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 539,
        "col": 0,
        "byteIndex": 16694
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for the SKMTC JSON log formatter.\n\nContains the log record and stack trail information needed to format\nstructured JSON log entries for the SKMTC processing pipeline."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "logRecord",
                "jsDoc": {
                  "doc": "The Deno log record containing log level, message, and metadata"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 541,
                  "col": 2,
                  "byteIndex": 16803
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "levelName",
                        "jsDoc": {
                          "doc": "The log level name"
                        },
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                          "line": 543,
                          "col": 4,
                          "byteIndex": 16850
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "datetime",
                        "jsDoc": {
                          "doc": "The timestamp when the log was created"
                        },
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                          "line": 545,
                          "col": 4,
                          "byteIndex": 16922
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "Date",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Date"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "msg",
                        "jsDoc": {
                          "doc": "The log message"
                        },
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                          "line": 547,
                          "col": 4,
                          "byteIndex": 16968
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "typeParams": []
                      },
                      {
                        "name": "args",
                        "jsDoc": {
                          "doc": "Additional log arguments"
                        },
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                          "line": 549,
                          "col": 4,
                          "byteIndex": 17020
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "stackTrail",
                "jsDoc": {
                  "doc": "String representation of the current stack trail position"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
                  "line": 552,
                  "col": 2,
                  "byteIndex": 17109
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "skmtcFormatter",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/CoreContext.ts",
        "line": 586,
        "col": 0,
        "byteIndex": 18066
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Custom JSON formatter for SKMTC log entries.\n\nFormats log records into structured JSON that includes stack trail context,\nmaking it easier to trace execution and debug issues in the SKMTC pipeline.\nThe formatter flattens log arguments and includes execution context.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Formatter arguments containing log record and stack trail"
          },
          {
            "kind": "return",
            "doc": "Formatted JSON string for the log entry\n"
          },
          {
            "kind": "example",
            "doc": "Usage in logger setup\n```typescript\nconst handler = new ConsoleHandler(\"DEBUG\", {\n  formatter: (logRecord) => skmtcFormatter({\n    logRecord,\n    stackTrail: context.stackTrail.toString()\n  })\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Output format\n```json\n{\n  \"stackTrail\": \"components.schemas.User.properties.email\",\n  \"level\": \"INFO\",\n  \"datetime\": 1645123456789,\n  \"message\": \"Processing email property\",\n  \"args\": { \"format\": \"email\", \"required\": true }\n}\n```"
          }
        ]
      },
      "kind": "function",
      "functionDef": {
        "params": [
          {
            "kind": "object",
            "props": [
              {
                "kind": "assign",
                "key": "logRecord",
                "value": null
              },
              {
                "kind": "assign",
                "key": "stackTrail",
                "value": null
              }
            ],
            "optional": false,
            "tsType": {
              "repr": "JsonFormatterArgs",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "JsonFormatterArgs"
              }
            }
          }
        ],
        "returnType": {
          "repr": "string",
          "kind": "keyword",
          "keyword": "string"
        },
        "hasBody": true,
        "isAsync": false,
        "isGenerator": false,
        "typeParams": []
      }
    },
    {
      "name": "PickArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 63,
        "col": 0,
        "byteIndex": 2506
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for picking a specific export from a generator module.\n\nUsed to select and configure specific exports from generator modules\nduring the artifact generation process."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "jsDoc": {
                  "doc": "The name of the export to pick from the generator module"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 65,
                  "col": 2,
                  "byteIndex": 2599
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "exportPath",
                "jsDoc": {
                  "doc": "The file path where the export should be made available"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 67,
                  "col": 2,
                  "byteIndex": 2679
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "RegisterJsonArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 76,
        "col": 0,
        "byteIndex": 2918
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for registering a JSON file in the generation context.\n\nUsed to register JSON configuration files, manifests, or other JSON\ndata that should be included in the generated output artifacts."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The destination file path where the JSON should be written"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 78,
                  "col": 2,
                  "byteIndex": 3021
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "json",
                "jsDoc": {
                  "doc": "The JSON object to write to the file"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 80,
                  "col": 2,
                  "byteIndex": 3093
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ApplyPackageImportsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 89,
        "col": 0,
        "byteIndex": 3339
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for applying package imports to a generated file.\n\nUsed to configure import statements and dependencies when generating\ncode files that need to reference external packages or modules."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The destination file path where imports should be applied"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 91,
                  "col": 2,
                  "byteIndex": 3448
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "exportPath",
                "jsDoc": {
                  "doc": "The export path for the module being imported"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 93,
                  "col": 2,
                  "byteIndex": 3529
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "BaseRegisterArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 102,
        "col": 0,
        "byteIndex": 3789
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Base arguments for registering generated content in the generation context.\n\nProvides the fundamental configuration options for registering imports,\nre-exports, and definitions that will be included in generated files."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "imports",
                "jsDoc": {
                  "doc": "Import statements to include, organized by module path"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 104,
                  "col": 2,
                  "byteIndex": 3888
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "ImportNameArg",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ImportNameArg"
                          }
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "reExports",
                "jsDoc": {
                  "doc": "Re-export statements to include, organized by module path"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 106,
                  "col": 2,
                  "byteIndex": 3999
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Identifier",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Identifier"
                          }
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "definitions",
                "jsDoc": {
                  "doc": "Definition objects to include in the generated content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 108,
                  "col": 2,
                  "byteIndex": 4106
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Definition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Definition"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "RegisterArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 117,
        "col": 0,
        "byteIndex": 4386
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for registering generated content with a specific destination.\n\nExtends BaseRegisterArgs to include a destination path, allowing content\nto be registered and associated with a specific output file location."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "imports",
                "jsDoc": {
                  "doc": "Import statements to include, organized by module path"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 119,
                  "col": 2,
                  "byteIndex": 4481
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "ImportNameArg",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ImportNameArg"
                          }
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "reExports",
                "jsDoc": {
                  "doc": "Re-export statements to include, organized by module path"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 121,
                  "col": 2,
                  "byteIndex": 4592
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Identifier",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Identifier"
                          }
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "definitions",
                "jsDoc": {
                  "doc": "Definition objects to include in the generated content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 123,
                  "col": 2,
                  "byteIndex": 4699
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Definition",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Definition"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The destination file path where the content should be registered"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 125,
                  "col": 2,
                  "byteIndex": 4816
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "CreateAndRegisterDefinition",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 136,
        "col": 0,
        "byteIndex": 5125
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for creating and registering a definition from a schema.\n\nUsed to transform OpenAPI schema objects into code definitions and\nregister them in the generation context for output file creation.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Schema",
            "doc": "- The schema type extending SchemaType"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "The OpenAPI schema to transform into a definition"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 138,
                  "col": 2,
                  "byteIndex": 5257
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Schema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Schema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "identifier",
                "jsDoc": {
                  "doc": "The identifier for the generated definition"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 140,
                  "col": 2,
                  "byteIndex": 5327
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Identifier",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Identifier"
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The destination file path where the definition should be registered"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 142,
                  "col": 2,
                  "byteIndex": 5429
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "schemaToValueFn",
                "jsDoc": {
                  "doc": "Function to transform the schema into a generated value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 144,
                  "col": 2,
                  "byteIndex": 5520
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "SchemaToValueFn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SchemaToValueFn"
                  }
                },
                "typeParams": []
              },
              {
                "name": "rootRef",
                "jsDoc": {
                  "doc": "Optional root reference name for the schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 146,
                  "col": 2,
                  "byteIndex": 5608
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              },
              {
                "name": "noExport",
                "jsDoc": {
                  "doc": "Whether to exclude this definition from exports"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 148,
                  "col": 2,
                  "byteIndex": 5685
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Schema",
            "constraint": {
              "repr": "SchemaType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "SchemaType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "DefineAndRegisterArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 159,
        "col": 0,
        "byteIndex": 5999
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for defining and registering a value in the generation context.\n\nUsed to create definitions from pre-generated values and register them\nin the generation context for inclusion in output files.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The generated value type extending GeneratedValue"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "identifier",
                "jsDoc": {
                  "doc": "The identifier for the definition"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 161,
                  "col": 2,
                  "byteIndex": 6108
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Identifier",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Identifier"
                  }
                },
                "typeParams": []
              },
              {
                "name": "value",
                "jsDoc": {
                  "doc": "The generated value to define"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 163,
                  "col": 2,
                  "byteIndex": 6172
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "V",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "V"
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The destination file path where the definition should be registered"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 165,
                  "col": 2,
                  "byteIndex": 6260
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "noExport",
                "jsDoc": {
                  "doc": "Whether to exclude this definition from exports"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 167,
                  "col": 2,
                  "byteIndex": 6343
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          }
        ]
      }
    },
    {
      "name": "GetOperationSettingsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 176,
        "col": 0,
        "byteIndex": 6554
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for retrieving operation-specific settings.\n\nUsed to get generator-specific configuration for a particular\nOpenAPI operation based on its path and HTTP method."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "generatorId",
                "jsDoc": {
                  "doc": "The ID of the generator requesting settings"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 178,
                  "col": 2,
                  "byteIndex": 6650
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "path",
                "jsDoc": {
                  "doc": "The API path for the operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 180,
                  "col": 2,
                  "byteIndex": 6712
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "method",
                "jsDoc": {
                  "doc": "The HTTP method for the operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 182,
                  "col": 2,
                  "byteIndex": 6770
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Method",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Method"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "AddRenderDependencyArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 191,
        "col": 0,
        "byteIndex": 6985
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for adding render dependencies for an operation.\n\nUsed to specify additional dependencies that should be included\nwhen rendering code for a specific OpenAPI operation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "generatorId",
                "jsDoc": {
                  "doc": "The ID of the generator adding dependencies"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 193,
                  "col": 2,
                  "byteIndex": 7080
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "jsDoc": {
                  "doc": "The OpenAPI operation requiring dependencies"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 195,
                  "col": 2,
                  "byteIndex": 7156
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "dependencies",
                "jsDoc": {
                  "doc": "Array of dependency names or paths to include"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 197,
                  "col": 2,
                  "byteIndex": 7237
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ToModelSettingsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 206,
        "col": 0,
        "byteIndex": 7438
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for retrieving model-specific settings.\n\nUsed to get generator-specific configuration for a particular\nOpenAPI model based on its reference name."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "generatorId",
                "jsDoc": {
                  "doc": "The ID of the generator requesting model settings"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 208,
                  "col": 2,
                  "byteIndex": 7535
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "jsDoc": {
                  "doc": "The reference name of the model"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 210,
                  "col": 2,
                  "byteIndex": 7598
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "InsertOperationOptions",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 221,
        "col": 0,
        "byteIndex": 7866
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Options for inserting an operation into the generation context.\n\nConfigures how an OpenAPI operation should be processed and\nincluded in the generated code output.\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- The generation type extending GenerationType"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "noExport",
                "jsDoc": {
                  "doc": "Whether to exclude this operation from exports"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 223,
                  "col": 2,
                  "byteIndex": 7989
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "generation",
                "jsDoc": {
                  "doc": "The type of generation to apply"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 225,
                  "col": 2,
                  "byteIndex": 8051
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "Custom destination path for the operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 227,
                  "col": 2,
                  "byteIndex": 8119
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "GenerationType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "InsertNormalisedModelArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 238,
        "col": 0,
        "byteIndex": 8452
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for inserting a normalized model into the generation context.\n\nUsed to process and register OpenAPI schema objects as normalized\nmodel definitions with fallback naming when schema names are unavailable.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Schema",
            "doc": "- The schema type (OasSchema, OasRef, or OasVoid)"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "fallbackName",
                "jsDoc": {
                  "doc": "Fallback name to use if the schema doesn't have a name"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 240,
                  "col": 2,
                  "byteIndex": 8615
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "The OpenAPI schema to normalize and insert"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 242,
                  "col": 2,
                  "byteIndex": 8690
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Schema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Schema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The destination file path for the model"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 244,
                  "col": 2,
                  "byteIndex": 8756
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Schema",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                },
                {
                  "repr": "OasVoid",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasVoid"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "InsertNormalisedModelOptions",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 253,
        "col": 0,
        "byteIndex": 8942
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Options for inserting a normalized model.\n\nConfigures how a normalized model should be processed and\nincluded in the generated code output."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "noExport",
                "jsDoc": {
                  "doc": "Whether to exclude this model from exports"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 255,
                  "col": 2,
                  "byteIndex": 9041
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "InsertNormalisedModelReturn",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 268,
        "col": 0,
        "byteIndex": 9410
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Return type for inserting a normalized model.\n\nProvides type-safe return values based on the schema type being processed.\nReturns different Definition types depending on whether the schema is a\nreference or a concrete schema.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The generated value type"
          },
          {
            "kind": "template",
            "name": "Schema",
            "doc": "- The schema type being processed"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "conditional",
          "conditionalType": {
            "checkType": {
              "repr": "Schema",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Schema"
              }
            },
            "extendsType": {
              "repr": "OasRef",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "schema",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "schema"
                    }
                  }
                ],
                "typeName": "OasRef"
              }
            },
            "trueType": {
              "repr": "Definition",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  }
                ],
                "typeName": "Definition"
              }
            },
            "falseType": {
              "repr": "Definition",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "TypeSystemOutput",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "",
                          "kind": "indexedAccess",
                          "indexedAccess": {
                            "readonly": false,
                            "objType": {
                              "repr": "SchemaToNonRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "Schema",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Schema"
                                    }
                                  }
                                ],
                                "typeName": "SchemaToNonRef"
                              }
                            },
                            "indexType": {
                              "repr": "type",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "type"
                              }
                            }
                          }
                        }
                      ],
                      "typeName": "TypeSystemOutput"
                    }
                  }
                ],
                "typeName": "Definition"
              }
            }
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          },
          {
            "name": "Schema",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                },
                {
                  "repr": "OasVoid",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasVoid"
                  }
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "InsertModelOptions",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 284,
        "col": 0,
        "byteIndex": 9891
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Options for inserting a model into the generation context.\n\nConfigures how a model should be processed and included in\nthe generated code output.\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- The generation type extending GenerationType"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "noExport",
                "jsDoc": {
                  "doc": "Whether to exclude this model from exports"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 286,
                  "col": 2,
                  "byteIndex": 10006
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "generation",
                "jsDoc": {
                  "doc": "The type of generation to apply"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 288,
                  "col": 2,
                  "byteIndex": 10068
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "Custom destination path for the model"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 290,
                  "col": 2,
                  "byteIndex": 10132
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "GenerationType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "InsertReturn",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 303,
        "col": 0,
        "byteIndex": 10502
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Return type for insert operations in the generation context.\n\nRepresents the result of inserting content into the generation\ncontext, providing type-safe access to the inserted content.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The generated value type"
          },
          {
            "kind": "template",
            "name": "T",
            "doc": "- The generation type"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- The enrichment data type"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Inserted",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "V",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "V"
                }
              },
              {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              },
              {
                "repr": "EnrichmentType",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EnrichmentType"
                }
              }
            ],
            "typeName": "Inserted"
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          },
          {
            "name": "T",
            "constraint": {
              "repr": "GenerationType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationType"
              }
            }
          },
          {
            "name": "EnrichmentType"
          }
        ]
      }
    },
    {
      "name": "ToOperationSettingsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 315,
        "col": 0,
        "byteIndex": 10827
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for generating operation content settings.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The value type for the operation"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment type for the operation"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 316,
                  "col": 2,
                  "byteIndex": 10900
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "insertable",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 317,
                  "col": 2,
                  "byteIndex": 10926
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OperationInsertable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      },
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "OperationInsertable"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "V"
          },
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "BuildModelSettingsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 326,
        "col": 0,
        "byteIndex": 11156
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for building model content settings.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The value type for the model"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment type for the model"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "refName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 327,
                  "col": 2,
                  "byteIndex": 11228
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              },
              {
                "name": "insertable",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
                  "line": 328,
                  "col": 2,
                  "byteIndex": 11247
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ModelInsertable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      },
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ModelInsertable"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "V"
          },
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "GenerateContext",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 432,
        "col": 0,
        "byteIndex": 14676
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The generation context for the second phase of the SKMTC transformation pipeline.\n\n`GenerateContext` manages the transformation of parsed OAS (OpenAPI Schema) objects\ninto code artifacts using pluggable generators. It provides APIs for model and operation\ngeneration, file management, dependency tracking, and artifact registration.\n\n## Key Responsibilities\n\n- **Generator Orchestration**: Executes pluggable model and operation generators\n- **Schema Processing**: Provides utilities for working with OAS schemas and references\n- **File Management**: Handles file creation, imports, exports, and dependencies\n- **Artifact Registration**: Collects generated definitions and files for rendering\n- **Type System Integration**: Bridges OAS types with generator-specific type systems\n- **Settings Management**: Handles skipping logic and client customizations\n\n## Generator Integration\n\nThe context works with two main types of generators:\n- **Model Generators**: Transform schema definitions into type definitions\n- **Operation Generators**: Transform API operations into client functions\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic usage in a model generator\n```typescript\nimport { ModelBase } from '@skmtc/core';\n\nclass TypeScriptInterface extends ModelBase {\n  generate(): Definition {\n    const schema = this.context.getSchema(this.refName);\n\n    return new Definition({\n      context: this.context,\n      identifier: Identifier.createType(this.refName),\n      description: schema.description,\n      value: {\n        generatorKey: this.generatorKey,\n        content: this.generateInterfaceBody(schema)\n      }\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Operation generator usage\n```typescript\nclass ApiClientGenerator extends OperationBase {\n  generate(): Definition {\n    const operation = this.context.getOperation(this.path, this.method);\n\n    const functionName = this.context.createOperationName(this.path, this.method);\n\n    return new Definition({\n      context: this.context,\n      identifier: Identifier.createVariable(functionName),\n      value: {\n        generatorKey: this.generatorKey,\n        content: this.generateClientFunction(operation)\n      }\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Schema and type system integration\n```typescript\nclass MyGenerator extends ModelBase {\n  generate(): Definition {\n    const schema = this.context.getSchema(this.refName);\n\n    // Transform schema using type system\n    const typeOutput = this.context.transformSchema(schema, {\n      stringType: 'string',\n      numberType: 'number',\n      arrayType: (items) => `Array<${items}>`\n    });\n\n    // Register dependencies\n    if (schema.hasReferences()) {\n      this.context.addImportsToFile('./models/types.ts', {\n        './common': ['BaseModel']\n      });\n    }\n\n    return new Definition({\n      context: this.context,\n      identifier: Identifier.createType(this.refName),\n      value: {\n        generatorKey: this.generatorKey,\n        content: typeOutput.content\n      }\n    });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new GenerateContext instance for the generation phase.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Constructor arguments including document, settings, and handlers"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "oasDocument",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "settings",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "logger",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "captureCurrentResult",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "stackTrail",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toGeneratorConfigMap",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 455,
              "col": 2,
              "byteIndex": 15751
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The parsed OpenAPI document being processed"
            },
            "tsType": {
              "repr": "OasDocument",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasDocument"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasDocument",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 437,
              "col": 2,
              "byteIndex": 14907
            }
          },
          {
            "jsDoc": {
              "doc": "Client settings for customization (optional)"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "ClientSettings",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ClientSettings"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "settings",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 439,
              "col": 2,
              "byteIndex": 14988
            }
          },
          {
            "jsDoc": {
              "doc": "Logger instance for tracking generation progress"
            },
            "tsType": {
              "repr": "Logger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Logger"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "logger",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 441,
              "col": 2,
              "byteIndex": 15085
            }
          },
          {
            "jsDoc": {
              "doc": "Function to capture processing results at current stack position"
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "result",
                    "optional": false,
                    "tsType": {
                      "repr": "ResultType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ResultType"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "captureCurrentResult",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 443,
              "col": 2,
              "byteIndex": 15176
            }
          },
          {
            "jsDoc": {
              "doc": "Function that returns the generator configuration map"
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "GeneratorsMapContainer",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "GeneratorsMapContainer"
                  }
                },
                "params": [],
                "typeParams": [
                  {
                    "name": "EnrichmentType",
                    "default": {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toGeneratorConfigMap",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 445,
              "col": 2,
              "byteIndex": 15292
            }
          },
          {
            "jsDoc": {
              "doc": "Stack trail for tracking current processing context"
            },
            "tsType": {
              "repr": "StackTrail",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "StackTrail"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "stackTrail",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 447,
              "col": 2,
              "byteIndex": 15450
            }
          },
          {
            "jsDoc": {
              "doc": "Tracking model nesting depth to prevent infinite recursion"
            },
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "modelDepth",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 449,
              "col": 2,
              "byteIndex": 15543
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "tags": [
                {
                  "kind": "internal"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toArtifacts",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "GenerateResult",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "GenerateResult"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 478,
              "col": 2,
              "byteIndex": 16262
            }
          },
          {
            "jsDoc": {
              "doc": "Executes a function within a traced context for debugging and monitoring.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "token",
                  "doc": "- Trace identifier or path segments"
                },
                {
                  "kind": "param",
                  "name": "fn",
                  "doc": "- Function to execute within the trace context"
                },
                {
                  "kind": "return",
                  "doc": "The result of the traced function execution"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "trace",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "token",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "T"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 642,
              "col": 2,
              "byteIndex": 21140
            }
          },
          {
            "jsDoc": {
              "doc": "Create and register a definition with the given `identifier` at `destinationPath`.\n",
              "tags": [
                {
                  "kind": "experimental"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "defineAndRegister",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "identifier",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "value",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "destinationPath",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "noExport",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "DefineAndRegisterArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "DefineAndRegisterArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Definition",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "Definition"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 667,
              "col": 2,
              "byteIndex": 21805
            }
          },
          {
            "jsDoc": {
              "doc": "Registers JSON content for output to a file.\n",
              "tags": [
                {
                  "kind": "experimental"
                },
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Registration arguments with destination path and JSON content"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "registerJson",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "destinationPath",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "json",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "RegisterJsonArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RegisterJsonArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 727,
              "col": 2,
              "byteIndex": 23312
            }
          },
          {
            "jsDoc": {
              "doc": "Insert supplied `imports` and `definitions` into file at `destinationPath`.\n\nIf an import from a specified module already exists in the file, the\nimport names are appended to the existing import.\n\nDefinitions will only be added if there is not already a definition with\nthe same name in the file.\n",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@mutates this.files"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "register",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "imports",
                      "value": "[UNSUPPORTED]"
                    },
                    {
                      "kind": "assign",
                      "key": "definitions",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "destinationPath",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "reExports",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "RegisterArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RegisterArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 749,
              "col": 2,
              "byteIndex": 23961
            }
          },
          {
            "jsDoc": {
              "doc": "Insert operation into the output file with path `destinationPath`.\n\nInsert will perform the following steps:\n1. Generate content settings for the supplied operation\n2. Look up definition in file with path `destinationPath`\n3. If definition is not found, it will create a new one and register it\n4. If the definition is defined at a location that is different from\n   the current file, it will add an import to the current file from\n   that location\n5. Use the content settings to generate the operation using the\n   insertable's driver",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@mutates this.files"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertOperation",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "OperationInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "OperationInsertable"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "operation",
                  "optional": false,
                  "tsType": {
                    "repr": "OasOperation",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasOperation"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "object",
                    "props": [
                      {
                        "kind": "assign",
                        "key": "generation",
                        "value": null
                      },
                      {
                        "kind": "assign",
                        "key": "destinationPath",
                        "value": null
                      },
                      {
                        "kind": "assign",
                        "key": "noExport",
                        "value": "[UNSUPPORTED]"
                      }
                    ],
                    "optional": false,
                    "tsType": {
                      "repr": "InsertOperationOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "InsertOperationOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "Inserted",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    },
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "Inserted"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "T",
                  "constraint": {
                    "repr": "GenerationType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GenerationType"
                    }
                  }
                },
                {
                  "name": "EnrichmentType",
                  "default": {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 814,
              "col": 2,
              "byteIndex": 26156
            }
          },
          {
            "jsDoc": {
              "doc": "Inserts a normalized model definition into the generation context.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "insertable",
                  "doc": "- Model insertable configuration with prototype and transform functions"
                },
                {
                  "kind": "param",
                  "name": "schema",
                  "doc": "- OAS schema, reference, or void type to generate model from"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Insertion options including generation type and destination"
                },
                {
                  "kind": "return",
                  "doc": "Inserted model instance with settings and definition"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertNormalisedModel",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "ModelInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "ModelInsertable"
                    }
                  }
                },
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "schema",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "fallbackName",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "destinationPath",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "InsertNormalisedModelArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Schema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Schema"
                          }
                        }
                      ],
                      "typeName": "InsertNormalisedModelArgs"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "object",
                    "props": [
                      {
                        "kind": "assign",
                        "key": "noExport",
                        "value": "[UNSUPPORTED]"
                      }
                    ],
                    "optional": false,
                    "tsType": {
                      "repr": "InsertNormalisedModelOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "InsertNormalisedModelOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "InsertNormalisedModelReturn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "Schema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Schema"
                      }
                    }
                  ],
                  "typeName": "InsertNormalisedModelReturn"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "Schema",
                  "constraint": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "OasSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasSchema"
                        }
                      },
                      {
                        "repr": "OasRef",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "schema",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "schema"
                              }
                            }
                          ],
                          "typeName": "OasRef"
                        }
                      },
                      {
                        "repr": "OasVoid",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasVoid"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "EnrichmentType"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 839,
              "col": 2,
              "byteIndex": 27111
            }
          },
          {
            "jsDoc": {
              "doc": "Insert model into the output file with path `destinationPath`.\n\nInsert will perform the following steps:\n1. Generate content settings for the supplied model\n2. Look up definition in file with path `destinationPath`\n3. If definition is not found, it will create a new one and register it\n4. If the definition is defined at a location that is different from\n   the current file, it will add an import to the current file from\n   that location\n5. Use the content settings to generate the model using the\n   insertable's driver",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@mutates this.files"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertModel",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "ModelInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "ModelInsertable"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "refName",
                  "optional": false,
                  "tsType": {
                    "repr": "RefName",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RefName"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "object",
                    "props": [
                      {
                        "kind": "assign",
                        "key": "generation",
                        "value": null
                      },
                      {
                        "kind": "assign",
                        "key": "destinationPath",
                        "value": null
                      },
                      {
                        "kind": "assign",
                        "key": "noExport",
                        "value": "[UNSUPPORTED]"
                      }
                    ],
                    "optional": false,
                    "tsType": {
                      "repr": "InsertModelOptions",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "InsertModelOptions"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "Inserted",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    },
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "Inserted"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "T",
                  "constraint": {
                    "repr": "GenerationType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GenerationType"
                    }
                  }
                },
                {
                  "name": "EnrichmentType"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 903,
              "col": 2,
              "byteIndex": 29205
            }
          },
          {
            "jsDoc": {
              "doc": "Generate and return content settings for operation insertable and\noperation.\n\nContent settings are produced by passing base settings and operation\nthrough toIdentifier and toExportPath static methods on the\ninsertable.",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@param { operation, insertable }"
                },
                {
                  "kind": "return"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toOperationContentSettings",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "operation",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "insertable",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "ToOperationSettingsArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "ToOperationSettingsArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "ContentSettings",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "ContentSettings"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V"
                },
                {
                  "name": "EnrichmentType"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 931,
              "col": 2,
              "byteIndex": 30046
            }
          },
          {
            "jsDoc": {
              "doc": "Generate and return content settings for model insertable and refName.\n\nContent settings are produced by passing base settings and refName\nthrough toIdentifier and toExportPath static methods on the\ninsertable.",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@param { refName, insertable }"
                },
                {
                  "kind": "return",
                  "doc": "Content settings for model"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toModelContentSettings",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "refName",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "insertable",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "BuildModelSettingsArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "BuildModelSettingsArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "ContentSettings",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "ContentSettings"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V"
                },
                {
                  "name": "EnrichmentType"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 951,
              "col": 2,
              "byteIndex": 30777
            }
          },
          {
            "jsDoc": {
              "doc": "Perform one lookup of schema by `refName`.",
              "tags": [
                {
                  "kind": "param",
                  "name": "refName"
                },
                {
                  "kind": "return",
                  "doc": "Matching schema or ref"
                },
                {
                  "kind": "throws",
                  "type": null,
                  "doc": "if schema is not found"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveSchemaRefOnce",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "refName",
                  "optional": false,
                  "tsType": {
                    "repr": "RefName",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RefName"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "generatorId",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 983,
              "col": 2,
              "byteIndex": 31817
            }
          },
          {
            "jsDoc": {
              "doc": "Check if definition name `name` in file with path `exportPath`\nhas already been created and registered.\n",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@param { name, exportPath }"
                },
                {
                  "kind": "return",
                  "doc": "Matching definition if found or `undefined` otherwise"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "findDefinition",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "name",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "exportPath",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "PickArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PickArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Definition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Definition"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
              "line": 1002,
              "col": 2,
              "byteIndex": 32381
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "toOperationSource",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 1025,
        "col": 13,
        "byteIndex": 33079
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates an OperationSource from an operation and generator ID.\n\nTransforms operation and generator information into a source descriptor\nthat can be used for tracking operation origins in the generation pipeline.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Arguments containing operation and generator ID"
          },
          {
            "kind": "return",
            "doc": "OperationSource descriptor for the operation"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OperationSource",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OperationSource"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "operation",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generatorId",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToOperationSourceArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToOperationSourceArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toModelSource",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/GenerateContext.ts",
        "line": 1049,
        "col": 13,
        "byteIndex": 33725
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a ModelSource from a reference name and generator ID.\n\nTransforms model reference and generator information into a source descriptor\nthat can be used for tracking model origins in the generation pipeline.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Arguments containing reference name and generator ID"
          },
          {
            "kind": "return",
            "doc": "ModelSource descriptor for the model"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "ModelSource",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ModelSource"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "refName",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generatorId",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToModelSourceArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToModelSourceArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ParseReturn",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 28,
        "col": 0,
        "byteIndex": 862
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Return type for the parse operation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasDocument",
                "jsDoc": {
                  "doc": "The parsed OAS document"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 925
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasDocument",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasDocument"
                  }
                },
                "typeParams": []
              },
              {
                "name": "issues",
                "jsDoc": {
                  "doc": "Array of parsing issues encountered"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 997
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "ParseIssue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ParseIssue"
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ParseWarningBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 38,
        "col": 0,
        "byteIndex": 1070
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Base type for parse warning messages."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "level",
                "jsDoc": {
                  "doc": "Issue severity level"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 40,
                  "col": 2,
                  "byteIndex": 1135
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "warning",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "warning"
                  }
                },
                "typeParams": []
              },
              {
                "name": "message",
                "jsDoc": {
                  "doc": "Warning message"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1179
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ParseErrorBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 48,
        "col": 0,
        "byteIndex": 1245
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Base type for parse error messages."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "level",
                "jsDoc": {
                  "doc": "Issue severity level"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 50,
                  "col": 2,
                  "byteIndex": 1308
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "error",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "error"
                  }
                },
                "typeParams": []
              },
              {
                "name": "error",
                "jsDoc": {
                  "doc": "The error that occurred"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 52,
                  "col": 2,
                  "byteIndex": 1358
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Error",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Error"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ParseIssueBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 58,
        "col": 0,
        "byteIndex": 1419
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Base union type for parse issues."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "ParseErrorBase",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParseErrorBase"
              }
            },
            {
              "repr": "ParseWarningBase",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParseWarningBase"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "LogIssueArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 63,
        "col": 0,
        "byteIndex": 1544
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for logging issues with a specific key."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "intersection",
          "intersection": [
            {
              "repr": "ParseIssueBase",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParseIssueBase"
              }
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "key",
                    "jsDoc": {
                      "doc": "The key where the issue occurred"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                      "line": 65,
                      "col": 2,
                      "byteIndex": 1634
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "parent",
                    "jsDoc": {
                      "doc": "The parent object containing the issue"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                      "line": 67,
                      "col": 2,
                      "byteIndex": 1696
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "unknown",
                      "kind": "keyword",
                      "keyword": "unknown"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "type",
                    "jsDoc": {
                      "doc": "The type of issue for categorization"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                      "line": 69,
                      "col": 2,
                      "byteIndex": 1760
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "IssueType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "IssueType"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "LogIssueNoKeyArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 75,
        "col": 0,
        "byteIndex": 1843
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for logging issues without a specific key."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "intersection",
          "intersection": [
            {
              "repr": "ParseIssueBase",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParseIssueBase"
              }
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "parent",
                    "jsDoc": {
                      "doc": "The parent object containing the issue"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                      "line": 77,
                      "col": 2,
                      "byteIndex": 1944
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "unknown",
                      "kind": "keyword",
                      "keyword": "unknown"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "type",
                    "jsDoc": {
                      "doc": "The type of issue for categorization"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                      "line": 79,
                      "col": 2,
                      "byteIndex": 2008
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "IssueType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "IssueType"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ProvisionalParseArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 85,
        "col": 0,
        "byteIndex": 2089
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for provisional parsing with validation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "key",
                "jsDoc": {
                  "doc": "The key being parsed"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 87,
                  "col": 2,
                  "byteIndex": 2161
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "value",
                "jsDoc": {
                  "doc": "The value to validate"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 89,
                  "col": 2,
                  "byteIndex": 2206
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "parent",
                "jsDoc": {
                  "doc": "The parent object context"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 91,
                  "col": 2,
                  "byteIndex": 2258
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "Valibot schema for validation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 93,
                  "col": 2,
                  "byteIndex": 2315
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "v.GenericSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "v.GenericSchema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "toMessage",
                "jsDoc": {
                  "doc": "Function to generate error messages"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 95,
                  "col": 2,
                  "byteIndex": 2389
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "value",
                        "optional": false,
                        "tsType": {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "type",
                "jsDoc": {
                  "doc": "The type of issue for categorization"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 97,
                  "col": 2,
                  "byteIndex": 2475
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "IssueType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "IssueType"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "T"
          }
        ]
      }
    },
    {
      "name": "LogSkippedValuesArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 103,
        "col": 0,
        "byteIndex": 2558
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for logging skipped values during parsing."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "skipped",
                "jsDoc": {
                  "doc": "Record of skipped key-value pairs"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 105,
                  "col": 2,
                  "byteIndex": 2640
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "parent",
                "jsDoc": {
                  "doc": "The parent object context"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 107,
                  "col": 2,
                  "byteIndex": 2710
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "parentType",
                "jsDoc": {
                  "doc": "String description of the parent type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 109,
                  "col": 2,
                  "byteIndex": 2775
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ParseError",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 115,
        "col": 0,
        "byteIndex": 2858
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a parsing error with location context."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "level",
                "jsDoc": {
                  "doc": "Error severity level"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 117,
                  "col": 2,
                  "byteIndex": 2917
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "error",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "error"
                  }
                },
                "typeParams": []
              },
              {
                "name": "error",
                "jsDoc": {
                  "doc": "The error that occurred"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 119,
                  "col": 2,
                  "byteIndex": 2967
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Error",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Error"
                  }
                },
                "typeParams": []
              },
              {
                "name": "location",
                "jsDoc": {
                  "doc": "Location string where the error occurred"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 121,
                  "col": 2,
                  "byteIndex": 3032
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "parent",
                "jsDoc": {
                  "doc": "The parent object context"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 123,
                  "col": 2,
                  "byteIndex": 3086
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "type",
                "jsDoc": {
                  "doc": "The type of issue for categorization"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 125,
                  "col": 2,
                  "byteIndex": 3150
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "IssueType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "IssueType"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ParseWarning",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 131,
        "col": 0,
        "byteIndex": 3232
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a parsing warning with location context."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "level",
                "jsDoc": {
                  "doc": "Warning severity level"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 133,
                  "col": 2,
                  "byteIndex": 3295
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "warning",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "warning"
                  }
                },
                "typeParams": []
              },
              {
                "name": "message",
                "jsDoc": {
                  "doc": "Warning message"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 135,
                  "col": 2,
                  "byteIndex": 3339
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "location",
                "jsDoc": {
                  "doc": "Location string where the warning occurred"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 137,
                  "col": 2,
                  "byteIndex": 3409
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "parent",
                "jsDoc": {
                  "doc": "The parent object context"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 139,
                  "col": 2,
                  "byteIndex": 3463
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "type",
                "jsDoc": {
                  "doc": "The type of issue for categorization"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
                  "line": 141,
                  "col": 2,
                  "byteIndex": 3527
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "IssueType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "IssueType"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ParseIssue",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 147,
        "col": 0,
        "byteIndex": 3592
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type for all parsing issues."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "ParseError",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParseError"
              }
            },
            {
              "repr": "ParseWarning",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParseWarning"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ParseContext",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 257,
        "col": 0,
        "byteIndex": 7391
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The parsing context for the first phase of the SKMTC transformation pipeline.\n\n`ParseContext` is responsible for converting OpenAPI v3 JSON documents into\nthe internal OAS (OpenAPI Schema) object representation used by SKMTC. It\nprovides comprehensive error handling, validation, and issue tracking during\nthe parsing process.\n\nThis context handles the complex task of transforming external OpenAPI\nspecifications into type-safe internal representations while maintaining\ndetailed information about any parsing issues or inconsistencies found.\n\n## Key Features\n\n- **JSON to OAS Conversion**: Transforms OpenAPI JSON into typed OAS objects\n- **Validation & Error Handling**: Comprehensive validation with detailed error reporting\n- **Issue Tracking**: Collects warnings and errors with precise location information\n- **Reference Management**: Handles complex reference resolution and tracking\n- **Logging Integration**: Provides detailed logging and tracing capabilities\n- **Silent Mode**: Can suppress console output while maintaining error collection\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic parsing usage\n```typescript\nimport { ParseContext } from '@skmtc/core';\n\nconst parseContext = new ParseContext({\n  documentObject: openApiJsonDocument,\n  logger: myLogger,\n  stackTrail: traceStack,\n  silent: false\n});\n\nconst oasDocument = parseContext.parse();\n\n// Check for parsing issues\nif (parseContext.issues.length > 0) {\n  console.log('Parsing issues found:');\n  parseContext.issues.forEach(issue => {\n    console.log(`${issue.level}: ${issue.location} - ${issue.message || issue.error?.message}`);\n  });\n}\n\n// Use the parsed document\nconsole.log('Parsed schemas:', Object.keys(oasDocument.components?.schemas || {}));\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error handling during parsing\n```typescript\nconst parseContext = new ParseContext({\n  documentObject: malformedOpenApiDoc,\n  logger: logger,\n  stackTrail: stack,\n  silent: true\n});\n\ntry {\n  const parsed = parseContext.parse();\n\n  // Separate errors from warnings\n  const errors = parseContext.issues.filter(issue => issue.level === 'error');\n  const warnings = parseContext.issues.filter(issue => issue.level === 'warning');\n\n  if (errors.length > 0) {\n    console.error(`${errors.length} parsing errors found`);\n    errors.forEach(error => {\n      console.error(`Error at ${error.location}: ${error.error.message}`);\n    });\n  }\n\n  if (warnings.length > 0) {\n    console.warn(`${warnings.length} parsing warnings found`);\n    warnings.forEach(warning => {\n      console.warn(`Warning at ${warning.location}: ${warning.message}`);\n    });\n  }\n} catch (error) {\n  console.error('Critical parsing failure:', error);\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with CoreContext\n```typescript\n// Typically used within CoreContext.parse()\nclass CustomCoreContext extends CoreContext {\n  parseWithCustomValidation(document: OpenAPIV3.Document) {\n    const parseContext = new ParseContext({\n      documentObject: document,\n      logger: this.logger,\n      stackTrail: this.stackTrail,\n      silent: this.silent\n    });\n\n    const parsed = parseContext.parse();\n\n    // Custom post-processing based on issues\n    const criticalErrors = parseContext.issues.filter(issue =>\n      issue.level === 'error' && issue.type === 'schema-validation'\n    );\n\n    if (criticalErrors.length > 0) {\n      throw new Error(`Schema validation failed: ${criticalErrors.length} critical errors`);\n    }\n\n    return parsed;\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new ParseContext instance for the parsing phase.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Constructor arguments including document object, logger, and options"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "documentObject",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "logger",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "stackTrail",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "silent",
                    "value": "[UNSUPPORTED]"
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 277,
              "col": 2,
              "byteIndex": 8168
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The original OpenAPI v3 document being parsed"
            },
            "tsType": {
              "repr": "OpenAPIV3.Document",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OpenAPIV3.Document"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "documentObject",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 259,
              "col": 2,
              "byteIndex": 7476
            }
          },
          {
            "jsDoc": {
              "doc": "Logger instance for tracking parse progress and issues"
            },
            "tsType": {
              "repr": "Logger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Logger"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "logger",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 261,
              "col": 2,
              "byteIndex": 7577
            }
          },
          {
            "jsDoc": {
              "doc": "The parsed OAS document result"
            },
            "tsType": {
              "repr": "OasDocument",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasDocument"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasDocument",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 263,
              "col": 2,
              "byteIndex": 7634
            }
          },
          {
            "jsDoc": {
              "doc": "Stack trail for tracking current parsing context"
            },
            "tsType": {
              "repr": "StackTrail",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "StackTrail"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "stackTrail",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 265,
              "col": 2,
              "byteIndex": 7719
            }
          },
          {
            "jsDoc": {
              "doc": "Collection of parsing issues encountered during processing"
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "ParseIssue",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ParseIssue"
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "issues",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 267,
              "col": 2,
              "byteIndex": 7812
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to suppress console output during parsing"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "silent",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 269,
              "col": 2,
              "byteIndex": 7894
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Parses the OpenAPI v3 document and returns the internal OAS document representation.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Parsed OAS document with all components and operations"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "parse",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasDocument",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasDocument"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 293,
              "col": 2,
              "byteIndex": 8679
            }
          },
          {
            "jsDoc": {
              "doc": "Removes items from the parsed document that encountered errors during parsing."
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "removeErroredItems",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 307,
              "col": 2,
              "byteIndex": 8986
            }
          },
          {
            "jsDoc": {
              "doc": "Registers a reference ($ref) with its associated stack trail for error tracking.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "stackTrail",
                  "doc": "- Current processing context stack trail"
                },
                {
                  "kind": "param",
                  "name": "$ref",
                  "doc": "- OpenAPI reference string to register"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "registerRef",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "stackTrail",
                  "optional": false,
                  "tsType": {
                    "repr": "StackTrail",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "StackTrail"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "$ref",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 333,
              "col": 2,
              "byteIndex": 9749
            }
          },
          {
            "jsDoc": {
              "doc": "Registers an error that occurred while processing a reference.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "error",
                  "doc": "- Error that occurred during reference processing"
                },
                {
                  "kind": "param",
                  "name": "$ref",
                  "doc": "- Reference string that caused the error (if available)"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "registerRefError",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "error",
                  "optional": false,
                  "tsType": {
                    "repr": "Error",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Error"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "$ref",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "undefined",
                        "kind": "keyword",
                        "keyword": "undefined"
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 345,
              "col": 2,
              "byteIndex": 10189
            }
          },
          {
            "jsDoc": {
              "doc": "Executes a function within a traced context for debugging and monitoring.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "token",
                  "doc": "- Trace identifier or path segments"
                },
                {
                  "kind": "param",
                  "name": "fn",
                  "doc": "- Function to execute within the trace context"
                },
                {
                  "kind": "return",
                  "doc": "The result of the traced function execution"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "trace",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "token",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "T"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 360,
              "col": 2,
              "byteIndex": 10671
            }
          },
          {
            "jsDoc": {
              "doc": "Logs warnings for fields that were skipped during parsing.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Arguments containing skipped fields and parent context"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "logSkippedFields",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "skipped",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "parent",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "parentType",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "LogSkippedValuesArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "LogSkippedValuesArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 369,
              "col": 2,
              "byteIndex": 10946
            }
          },
          {
            "jsDoc": {
              "doc": "Attempts to parse a value with optional error handling and logging.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Parsing arguments including schema and error handling"
                },
                {
                  "kind": "return",
                  "doc": "Parsed value or undefined if parsing fails"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "provisionalParse",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "key",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "value",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "parent",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "schema",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "toMessage",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "type",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "ProvisionalParseArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "ProvisionalParseArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "T"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 387,
              "col": 2,
              "byteIndex": 11487
            }
          },
          {
            "jsDoc": {
              "doc": "Logs a parsing issue with associated key context.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Issue arguments including key, parent object, and issue details"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "logIssue",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "key",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "parent",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "type",
                      "value": null
                    },
                    {
                      "kind": "rest",
                      "arg": {
                        "kind": "identifier",
                        "name": "issue",
                        "optional": false,
                        "tsType": null
                      }
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "LogIssueArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "LogIssueArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 415,
              "col": 2,
              "byteIndex": 12026
            }
          },
          {
            "jsDoc": {
              "doc": "Logs a parsing issue without specific key context.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Issue arguments including parent object and issue details"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "logIssueNoKey",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "parent",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "type",
                      "value": null
                    },
                    {
                      "kind": "rest",
                      "arg": {
                        "kind": "identifier",
                        "name": "issue",
                        "optional": false,
                        "tsType": null
                      }
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "LogIssueNoKeyArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "LogIssueNoKeyArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
              "line": 424,
              "col": 2,
              "byteIndex": 12316
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "parseSchema",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/ParseContext.ts",
        "line": 455,
        "col": 13,
        "byteIndex": 13070
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Parses an OpenAPI v3 schema from string format (JSON or YAML).\n\nAutomatically detects the format based on content and parses accordingly.\n",
        "tags": [
          {
            "kind": "param",
            "name": "schema",
            "doc": "- Schema string in JSON or YAML format"
          },
          {
            "kind": "return",
            "doc": "Parsed OpenAPI v3 document object"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OpenAPIV3.Document",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OpenAPIV3.Document"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "schema",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "RenderContext",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
        "line": 256,
        "col": 0,
        "byteIndex": 8528
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "The rendering context for the final phase of the SKMTC transformation pipeline.\n\n`RenderContext` is responsible for taking the generated artifacts from the generation\nphase and rendering them into their final form with proper formatting, path resolution,\nand file preparation. It handles code formatting via Prettier, path normalization,\nand produces the final artifacts ready for writing to the filesystem.\n\nThis context represents the culmination of the three-phase SKMTC pipeline, transforming\ngenerator outputs into production-ready code files with proper formatting and structure.\n\n## Key Features\n\n- **Code Formatting**: Automatic Prettier formatting for generated TypeScript/JavaScript code\n- **Path Resolution**: Intelligent path resolution with base path support\n- **Content Collation**: Combines all generated content into organized file structures\n- **Metadata Generation**: Tracks file statistics (lines, characters) and relationships\n- **Error Tracking**: Comprehensive error handling with Sentry integration\n- **Performance Monitoring**: Built-in tracing and performance measurement\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic rendering usage\n```typescript\nimport { RenderContext } from '@skmtc/core';\n\nconst renderContext = new RenderContext({\n  files: generatedFiles,\n  previews: previewData,\n  mappings: mappingData,\n  prettierConfig: {\n    semi: false,\n    singleQuote: true,\n    trailingComma: 'all'\n  },\n  basePath: './src/generated',\n  stackTrail: traceStack,\n  logger: myLogger,\n  captureCurrentResult: (result) => console.log(result)\n});\n\nconst rendered = await renderContext.render();\n\n// Access rendered files\nObject.entries(rendered.artifacts).forEach(([path, content]) => {\n  console.log(`Rendered ${path}: ${rendered.files[path].lines} lines`);\n  // Write to filesystem\n  await Deno.writeTextFile(path, content);\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "With custom Prettier configuration\n```typescript\nconst renderContext = new RenderContext({\n  files: generatedFiles,\n  previews: {},\n  mappings: {},\n  prettierConfig: {\n    parser: 'typescript',\n    printWidth: 120,\n    tabWidth: 2,\n    semi: true,\n    singleQuote: true,\n    trailingComma: 'es5',\n    bracketSpacing: true,\n    arrowParens: 'avoid'\n  },\n  basePath: './packages/api-client/src',\n  stackTrail: stack,\n  logger: logger,\n  captureCurrentResult: resultHandler\n});\n\nconst result = await renderContext.render();\n\n// All TypeScript files are automatically formatted\nconsole.log('Formatted files:', Object.keys(result.artifacts).length);\n```\n"
          },
          {
            "kind": "example",
            "doc": "Processing render results\n```typescript\nconst rendered = await renderContext.render();\n\n// Analyze file statistics\nconst totalLines = Object.values(rendered.files)\n  .reduce((sum, file) => sum + file.lines, 0);\nconst totalChars = Object.values(rendered.files)\n  .reduce((sum, file) => sum + file.characters, 0);\n\nconsole.log(`Generated ${Object.keys(rendered.artifacts).length} files`);\nconsole.log(`Total lines: ${totalLines}`);\nconsole.log(`Total characters: ${totalChars}`);\n\n// Check for large files\nconst largeFiles = Object.entries(rendered.files)\n  .filter(([_, metadata]) => metadata.lines > 1000)\n  .map(([path, metadata]) => ({ path, lines: metadata.lines }));\n\nif (largeFiles.length > 0) {\n  console.log('Large files detected:', largeFiles);\n}\n\n// Access preview and mapping data\nconsole.log('Previews available:', Object.keys(rendered.previews));\nconsole.log('Mappings available:', Object.keys(rendered.mappings));\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with CoreContext\n```typescript\n// Typically used within CoreContext.toArtifacts()\nclass CustomCoreContext extends CoreContext {\n  async renderWithPostProcessing(\n    files: Map<string, File | JsonFile>,\n    previews: Record<string, Record<string, Preview>>,\n    mappings: Record<string, Record<string, Mapping>>\n  ) {\n    const renderContext = new RenderContext({\n      files,\n      previews,\n      mappings,\n      prettierConfig: this.prettierConfig,\n      basePath: this.settings?.basePath,\n      stackTrail: this.stackTrail,\n      logger: this.logger,\n      captureCurrentResult: this.captureCurrentResult.bind(this)\n    });\n\n    const rendered = await renderContext.render();\n\n    // Post-process rendered files\n    const processedArtifacts: Record<string, string> = {};\n\n    for (const [path, content] of Object.entries(rendered.artifacts)) {\n      // Add file headers, license notices, etc.\n      const processedContent = this.addFileHeader(content, path);\n      processedArtifacts[path] = processedContent;\n    }\n\n    return {\n      ...rendered,\n      artifacts: processedArtifacts\n    };\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error handling during rendering\n```typescript\ntry {\n  const renderContext = new RenderContext({\n    files: generatedFiles,\n    previews: {},\n    mappings: {},\n    prettierConfig: prettierConfig,\n    basePath: './invalid-path', // This might cause issues\n    stackTrail: stack,\n    logger: logger,\n    captureCurrentResult: (result) => {\n      if (result === 'error') {\n        console.error('Render error detected');\n      }\n    }\n  });\n\n  const result = await renderContext.render();\n\n  // Check if any files failed to render\n  const failedFiles = Object.entries(result.files)\n    .filter(([path, metadata]) => metadata.lines === 0)\n    .map(([path]) => path);\n\n  if (failedFiles.length > 0) {\n    console.warn('Files with no content:', failedFiles);\n  }\n\n} catch (error) {\n  console.error('Render operation failed:', error);\n  // Sentry automatically captures the error\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new RenderContext instance with the specified configuration.\n\nInitializes the rendering context with files to render, preview data,\nformatting configuration, and logging/tracing infrastructure.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Constructor arguments containing all required configuration"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "files",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "previews",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "mappings",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "prettierConfig",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "basePath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "logger",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "stackTrail",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "captureCurrentResult",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 282,
              "col": 2,
              "byteIndex": 9562
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Map of generated files to render"
            },
            "tsType": {
              "repr": "Map",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "File",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "File"
                        }
                      },
                      {
                        "repr": "JsonFile",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "JsonFile"
                        }
                      }
                    ]
                  }
                ],
                "typeName": "Map"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "files",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 258,
              "col": 2,
              "byteIndex": 8601
            }
          },
          {
            "jsDoc": {
              "doc": "Preview data for generated content"
            },
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "Preview",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Preview"
                          }
                        }
                      ],
                      "typeName": "Record"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "previews",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 260,
              "col": 2,
              "byteIndex": 8683
            }
          },
          {
            "jsDoc": {
              "doc": "Mapping data for file relationships"
            },
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "Mapping",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Mapping"
                          }
                        }
                      ],
                      "typeName": "Record"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "mappings",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 262,
              "col": 2,
              "byteIndex": 8780
            }
          },
          {
            "jsDoc": {
              "doc": "Base path for resolving file paths"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "basePath",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 266,
              "col": 2,
              "byteIndex": 8976
            }
          },
          {
            "jsDoc": {
              "doc": "Logger instance for debug information"
            },
            "tsType": {
              "repr": "Logger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Logger"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "logger",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 268,
              "col": 2,
              "byteIndex": 9054
            }
          },
          {
            "jsDoc": {
              "doc": "Function to capture result status"
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "result",
                    "optional": false,
                    "tsType": {
                      "repr": "ResultType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ResultType"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "captureCurrentResult",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 272,
              "col": 2,
              "byteIndex": 9185
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Renders all files in the context to their final formatted form.\n\nThis is the main rendering method that orchestrates the collation and\nformatting of all generated files. It processes files through Prettier\nformatting (if configured), resolves paths, and produces the final\nartifacts ready for writing to the filesystem.\n\nThe method is wrapped in Sentry tracing spans for performance monitoring\nand includes both collation and artifact preparation phases.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Promise resolving to render result containing artifacts, file metadata, previews, and mappings\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst renderContext = new RenderContext({\n  files: generatedFiles,\n  previews: previewData,\n  mappings: mappingData,\n  prettierConfig: { semi: false, singleQuote: true },\n  basePath: './src/generated',\n  stackTrail: traceStack,\n  logger: logger,\n  captureCurrentResult: resultHandler\n});\n\nconst result = await renderContext.render();\n\n// Access rendered files\nObject.entries(result.artifacts).forEach(([path, content]) => {\n  console.log(`Rendered ${path}: ${result.files[path].lines} lines`);\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "render",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Omit",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "RenderResult",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "RenderResult"
                            }
                          },
                          {
                            "repr": "results",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "results"
                            }
                          }
                        ],
                        "typeName": "Omit"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "hasBody": true,
              "isAsync": true,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 336,
              "col": 2,
              "byteIndex": 11255
            }
          },
          {
            "jsDoc": {
              "doc": "Collates all files in the context into a unified render result.\n\nThis method processes each file in the context through the rendering pipeline,\napplying Prettier formatting and path resolution. It coordinates the parallel\nprocessing of all files and aggregates the results into a single output structure.\n\nThe collation process includes:\n- File content rendering with optional Prettier formatting\n- Path resolution using base path configuration\n- Metadata calculation (line count, character count)\n- Result aggregation into artifacts and file metadata maps\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Promise resolving to collated files with artifacts and metadata\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst collated = await renderContext.collate();\n\n// Access rendered file content\nconsole.log(collated.artifacts['/path/to/file.ts']);\n\n// Access file metadata\nconsole.log(collated.files['/path/to/file.ts'].lines);\nconsole.log(collated.files['/path/to/file.ts'].characters);\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "collate",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "Promise",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "FilesRenderResult",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "FilesRenderResult"
                      }
                    }
                  ],
                  "typeName": "Promise"
                }
              },
              "hasBody": true,
              "isAsync": true,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 380,
              "col": 2,
              "byteIndex": 12825
            }
          },
          {
            "jsDoc": {
              "doc": "Executes a function within a tracing context for performance monitoring.\n\nThis method wraps function execution with distributed tracing capabilities,\nallowing performance monitoring and debugging of the rendering pipeline.\nIt integrates with the stack trail to provide hierarchical tracing.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "T",
                  "doc": "- The return type of the traced function"
                },
                {
                  "kind": "param",
                  "name": "token",
                  "doc": "- Trace identifier (string or array of strings)"
                },
                {
                  "kind": "param",
                  "name": "fn",
                  "doc": "- Function to execute within the trace context"
                },
                {
                  "kind": "return",
                  "doc": "The result of executing the traced function\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst result = renderContext.trace('format-file', () => {\n  return prettier.format(content, prettierConfig);\n});\n\n// With hierarchical tracing\nconst result = renderContext.trace(['render', 'format'], () => {\n  return complexFormattingOperation();\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "trace",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "token",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "fn",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "params": [],
                      "typeParams": []
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "T",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "T"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "T"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 443,
              "col": 2,
              "byteIndex": 14850
            }
          },
          {
            "jsDoc": {
              "doc": "Retrieves a file from the context by its normalized path.\n\nThis method looks up a file in the context's file map using path normalization\nto ensure consistent path resolution. It validates that the requested file\nexists and throws an error if not found.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "filePath",
                  "doc": "- The file path to retrieve (will be normalized)"
                },
                {
                  "kind": "return",
                  "doc": "The File or JsonFile instance"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When the file is not found in the context\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst file = renderContext.getFile('./src/models/User.ts');\nconsole.log(file.toString()); // Access file content\n\n// Works with various path formats\nconst sameFile = renderContext.getFile('src/models/User.ts');\nconst alsoSameFile = renderContext.getFile('/absolute/path/src/models/User.ts');\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "getFile",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "filePath",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "File",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "File"
                    }
                  },
                  {
                    "repr": "JsonFile",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "JsonFile"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 468,
              "col": 2,
              "byteIndex": 15814
            }
          },
          {
            "jsDoc": {
              "doc": "Picks a specific definition from a file in the context.\n\nThis method retrieves a named definition (type, interface, etc.) from\na specific file in the context. It validates that the target file is\na File type (not JsonFile) and returns the requested definition if found.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Object containing the definition name and export path"
                },
                {
                  "kind": "param",
                  "name": "args.name",
                  "doc": "- The name of the definition to retrieve"
                },
                {
                  "kind": "param",
                  "name": "args.exportPath",
                  "doc": "- The path to the file containing the definition"
                },
                {
                  "kind": "return",
                  "doc": "The Definition instance if found, undefined otherwise"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When the file is not found or is not a File type\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userDefinition = renderContext.pick({\n  name: 'User',\n  exportPath: './src/models/User.ts'\n});\n\nif (userDefinition) {\n  console.log(userDefinition.identifier); // Access definition details\n}\n\n// Pick interface definition\nconst apiInterface = renderContext.pick({\n  name: 'ApiResponse',\n  exportPath: './src/types/api.ts'\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "pick",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "name",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "exportPath",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "PickArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PickArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Definition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Definition"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/RenderContext.ts",
              "line": 509,
              "col": 2,
              "byteIndex": 17191
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "PhaseType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 376
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type representing the three phases of the SKMTC pipeline."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "parse",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "parse"
              }
            },
            {
              "repr": "generate",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "generate"
              }
            },
            {
              "repr": "render",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "render"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "GetFileOptions",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
        "line": 15,
        "col": 0,
        "byteIndex": 491
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Options for retrieving files from the context."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "throwIfNotFound",
                "jsDoc": {
                  "doc": "Whether to throw an error if the file is not found"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 584
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "FilesRenderResult",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
        "line": 23,
        "col": 0,
        "byteIndex": 666
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Result of rendering files in the context."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "artifacts",
                "jsDoc": {
                  "doc": "Map of file paths to rendered content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 749
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "files",
                "jsDoc": {
                  "doc": "Map of file paths to metadata"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 824
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "ManifestEntry",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ManifestEntry"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "RenderResult",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
        "line": 33,
        "col": 0,
        "byteIndex": 960
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Complete result of the rendering phase including all generated content and metadata."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "artifacts",
                "jsDoc": {
                  "doc": "Map of file paths to rendered content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 35,
                  "col": 2,
                  "byteIndex": 1038
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "files",
                "jsDoc": {
                  "doc": "Map of file paths to metadata"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1113
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "ManifestEntry",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ManifestEntry"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "previews",
                "jsDoc": {
                  "doc": "Preview data for generated content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 39,
                  "col": 2,
                  "byteIndex": 1196
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "Record",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "Preview",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Preview"
                              }
                            }
                          ],
                          "typeName": "Record"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "mappings",
                "jsDoc": {
                  "doc": "Mapping data for file relationships"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 41,
                  "col": 2,
                  "byteIndex": 1293
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "Record",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "Mapping",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Mapping"
                              }
                            }
                          ],
                          "typeName": "Record"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "results",
                "jsDoc": {
                  "doc": "Hierarchical results tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
                  "line": 43,
                  "col": 2,
                  "byteIndex": 1384
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ResultsItem",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResultsItem"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "AnyOasDocument",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
        "line": 49,
        "col": 0,
        "byteIndex": 1483
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing any supported OpenAPI document version."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OpenAPIV2.Document",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OpenAPIV2.Document"
              }
            },
            {
              "repr": "OpenAPIV3.Document",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OpenAPIV3.Document"
              }
            },
            {
              "repr": "OpenAPIV3_1.Document",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OpenAPIV3_1.Document"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "IssueType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/types.ts",
        "line": 54,
        "col": 0,
        "byteIndex": 1658
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Types of issues that can be encountered during OpenAPI schema parsing."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "UNEXPECTED_PROPERTY",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "UNEXPECTED_PROPERTY"
              }
            },
            {
              "repr": "MISSING_OBJECT_TYPE",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "MISSING_OBJECT_TYPE"
              }
            },
            {
              "repr": "MISSING_STRING_TYPE",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "MISSING_STRING_TYPE"
              }
            },
            {
              "repr": "MISSING_ARRAY_TYPE",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "MISSING_ARRAY_TYPE"
              }
            },
            {
              "repr": "MISSING_BOOLEAN_TYPE",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "MISSING_BOOLEAN_TYPE"
              }
            },
            {
              "repr": "INVALID_EXAMPLE",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_EXAMPLE"
              }
            },
            {
              "repr": "INVALID_ENUM",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_ENUM"
              }
            },
            {
              "repr": "INVALID_DEFAULT",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_DEFAULT"
              }
            },
            {
              "repr": "INVALID_NULLABLE",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_NULLABLE"
              }
            },
            {
              "repr": "UNEXPECTED_FORMAT",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "UNEXPECTED_FORMAT"
              }
            },
            {
              "repr": "INVALID_RESPONSE",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_RESPONSE"
              }
            },
            {
              "repr": "INVALID_FORMAT",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_FORMAT"
              }
            },
            {
              "repr": "INVALID_OPERATION",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_OPERATION"
              }
            },
            {
              "repr": "INVALID_SCHEMA",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_SCHEMA"
              }
            },
            {
              "repr": "INVALID_PARAMETER",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_PARAMETER"
              }
            },
            {
              "repr": "INVALID_DEPENDENCY_REF",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "INVALID_DEPENDENCY_REF"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "EMPTY",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/constants.ts",
        "line": 29,
        "col": 13,
        "byteIndex": 860
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Marker constant representing an empty or unset value in the SKMTC DSL system.\n\nThis constant is used throughout the DSL to represent placeholders, empty\ntemplates, or uninitialized content. It provides a consistent way to identify\nempty states that need to be handled during code generation.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Usage in templates\n```typescript\nimport { EMPTY } from '@skmtc/core';\n\nconst template = someCondition ? 'actual content' : EMPTY;\n\nif (template === EMPTY) {\n  // Handle empty state\n  console.log('No content to generate');\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "DSL content generation\n```typescript\nconst content = new List([\n  'import { User } from \"./types\";',\n  someFeature ? 'import { Admin } from \"./admin\";' : EMPTY,\n  'export { User };'\n]).filter(line => line !== EMPTY);\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "__EMPTY__",
          "kind": "literal",
          "literal": {
            "kind": "string",
            "string": "__EMPTY__"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ContentBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentBase.ts",
        "line": 83,
        "col": 0,
        "byteIndex": 2637
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Base class for all content generators in the SKMTC DSL system.\n\n`ContentBase` provides the foundation for creating custom generators that transform\nOpenAPI Schema (OAS) objects into code artifacts. It handles registration with the\ngeneration context, skipping logic, and provides access to the pipeline's utilities.\n\n## Generator Lifecycle\n\n1. **Construction**: Initialize with context and optional generator key\n2. **Registration**: Call {@link register} to add artifacts to the pipeline\n3. **Generation**: Implement custom logic using context utilities\n4. **Rendering**: Artifacts are automatically rendered by the pipeline\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic generator\n```typescript\nimport { ContentBase } from '@skmtc/core';\n\nclass MyModelGenerator extends ContentBase {\n  generate() {\n    // Skip if not needed\n    if (this.shouldSkip()) return;\n\n    // Access OAS objects through context\n    const schemas = this.context.oasDocument.components.schemas;\n\n    for (const [name, schema] of Object.entries(schemas)) {\n      if (schema.isRef()) continue;\n\n      const file = new File({\n        context: this.context,\n        path: `./models/${name}.ts`,\n        content: this.generateModelContent(schema)\n      });\n\n      // Register the file for rendering\n      this.register({ file });\n    }\n  }\n\n  private generateModelContent(schema: OasObject): string {\n    // Custom model generation logic\n    return `export interface ${schema.name} { ... }`;\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Generator with skipping logic\n```typescript\nclass ConditionalGenerator extends ContentBase {\n  generate() {\n    // Check if generation should be skipped\n    if (this.shouldSkipBasedOnSettings()) {\n      this.skip('Disabled in settings');\n      return;\n    }\n\n    // Continue with generation...\n    const file = this.createOutputFile();\n    this.register({ file });\n  }\n\n  private shouldSkipBasedOnSettings(): boolean {\n    return this.context.settings?.skip?.models?.includes('MyModel') ?? false;\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new ContentBase instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Construction arguments"
                },
                {
                  "kind": "param",
                  "name": "args.context",
                  "doc": "- The generation context"
                },
                {
                  "kind": "param",
                  "name": "args.generatorKey",
                  "doc": "- Optional generator key"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generatorKey",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ContentBaseArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ContentBaseArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentBase.ts",
              "line": 100,
              "col": 2,
              "byteIndex": 3165
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The generation context providing access to OAS objects and utilities"
            },
            "tsType": {
              "repr": "GenerateContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerateContext"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "context",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentBase.ts",
              "line": 85,
              "col": 2,
              "byteIndex": 2744
            }
          },
          {
            "jsDoc": {
              "doc": "Whether this generator has been skipped"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "skipped",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentBase.ts",
              "line": 88,
              "col": 2,
              "byteIndex": 2823
            }
          },
          {
            "jsDoc": {
              "doc": "Optional generator key for identification and tracking"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "generatorKey",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentBase.ts",
              "line": 91,
              "col": 2,
              "byteIndex": 2917
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Registers generated artifacts with the rendering pipeline.\n\nThis method is called by generator implementations to add files,\nJSON artifacts, or other content to the generation output.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- The artifacts to register"
                },
                {
                  "kind": "param",
                  "name": "args.file",
                  "doc": "- Optional file to register"
                },
                {
                  "kind": "param",
                  "name": "args.jsonFile",
                  "doc": "- Optional JSON file to register\n"
                },
                {
                  "kind": "example",
                  "doc": "Registering a file\n```typescript\nconst file = new File({\n  context: this.context,\n  path: './output.ts',\n  content: 'export const value = 42;'\n});\n\nthis.register({ file });\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Registering JSON data\n```typescript\nconst jsonFile = new JsonFile({\n  context: this.context,\n  path: './config.json',\n  data: { version: '1.0.0', features: ['api'] }\n});\n\nthis.register({ jsonFile });\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "register",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": {
                    "repr": "RegisterArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RegisterArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentBase.ts",
              "line": 137,
              "col": 2,
              "byteIndex": 4181
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "ContentSettings",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentSettings.ts",
        "line": 120,
        "col": 0,
        "byteIndex": 3730
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration settings for content generators in the SKMTC DSL system.\n\n`ContentSettings` encapsulates the configuration needed by generators to\nproduce content, including where to export the generated files, how to\nidentify the content, and any custom enrichment data for extending\nthe generation process.\n\nThis class is used by both {@link ModelBase} and {@link OperationBase}\nto configure their generation behavior, providing a consistent interface\nfor generator settings across the system.\n\n## Key Features\n\n- **Export Path Management**: Specifies where generated content should be written\n- **Identifier Integration**: Links content to specific identifiers for naming\n- **Enrichment Support**: Allows custom data to extend generation capabilities\n- **Type Safety**: Generic enrichment typing for compile-time validation\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- The type of enrichment data (default: undefined)\n"
          },
          {
            "kind": "example",
            "doc": "Basic settings without enrichments\n```typescript\nimport { ContentSettings, Identifier } from '@skmtc/core';\n\nconst settings = ContentSettings.empty({\n  exportPath: './src/generated/models.ts',\n  identifier: Identifier.createType('UserModels')\n});\n\nconsole.log(settings.exportPath); // './src/generated/models.ts'\nconsole.log(settings.enrichments); // undefined\n```\n"
          },
          {
            "kind": "example",
            "doc": "Settings with custom enrichments\n```typescript\ntype ValidationEnrichment = {\n  validateRequired: boolean;\n  generateComments: boolean;\n  customValidators: string[];\n};\n\nconst enrichedSettings = new ContentSettings({\n  identifier: Identifier.createType('ValidatedModels'),\n  exportPath: './src/models/validated.ts',\n  enrichments: {\n    validateRequired: true,\n    generateComments: true,\n    customValidators: ['email', 'phone']\n  }\n});\n\n// Access enrichment data in generators\nif (enrichedSettings.enrichments?.validateRequired) {\n  // Generate validation logic\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using with ModelBase\n```typescript\nclass ValidatedModelGenerator extends ModelBase<ValidationEnrichment> {\n  constructor(args) {\n    super({\n      ...args,\n      settings: new ContentSettings({\n        identifier: Identifier.createType(args.refName),\n        exportPath: './src/validated-models.ts',\n        enrichments: {\n          validateRequired: true,\n          generateComments: false,\n          customValidators: []\n        }\n      })\n    });\n  }\n\n  toDefinition(): Definition {\n    const validation = this.settings.enrichments?.validateRequired\n      ? this.generateValidation()\n      : '';\n\n    return new Definition({\n      context: this.context,\n      identifier: this.settings.identifier,\n      value: {\n        generatorKey: this.generatorKey,\n        content: `${this.generateInterface()}${validation}`\n      }\n    });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new ContentSettings instance with enrichments.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Settings configuration"
                },
                {
                  "kind": "param",
                  "name": "args.identifier",
                  "doc": "- The identifier for the content being generated"
                },
                {
                  "kind": "param",
                  "name": "args.exportPath",
                  "doc": "- The path where generated content will be exported"
                },
                {
                  "kind": "param",
                  "name": "args.enrichments",
                  "doc": "- Custom enrichment data for extending generation\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst settings = new ContentSettings({\n  identifier: Identifier.createType('ApiModels'),\n  exportPath: './src/api/models.ts',\n  enrichments: {\n    includeValidation: true,\n    format: 'detailed'\n  }\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "identifier",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "exportPath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "enrichments",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CreateArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "CreateArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentSettings.ts",
              "line": 150,
              "col": 2,
              "byteIndex": 4695
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The identifier for the content being generated"
            },
            "tsType": {
              "repr": "Identifier",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Identifier"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "identifier",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentSettings.ts",
              "line": 122,
              "col": 2,
              "byteIndex": 3847
            }
          },
          {
            "jsDoc": {
              "doc": "The path where generated content will be exported"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "exportPath",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentSettings.ts",
              "line": 125,
              "col": 2,
              "byteIndex": 3934
            }
          },
          {
            "jsDoc": {
              "doc": "Custom enrichment data for extending generation"
            },
            "tsType": {
              "repr": "EnrichmentType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "EnrichmentType"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "enrichments",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentSettings.ts",
              "line": 128,
              "col": 2,
              "byteIndex": 4015
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Factory method to create ContentSettings without enrichments.\n\nThis is a convenience method for creating ContentSettings when no\ncustom enrichment data is needed. It explicitly sets enrichments\nto undefined and returns a properly typed instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Basic settings arguments"
                },
                {
                  "kind": "param",
                  "name": "args.identifier",
                  "doc": "- The identifier for the content being generated"
                },
                {
                  "kind": "param",
                  "name": "args.exportPath",
                  "doc": "- The path where generated content will be exported"
                },
                {
                  "kind": "return",
                  "doc": "ContentSettings instance with undefined enrichments\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst basicSettings = ContentSettings.empty({\n  identifier: Identifier.createType('SimpleModels'),\n  exportPath: './src/models.ts'\n});\n\nconsole.log(basicSettings.enrichments); // undefined\n\n// Use in generator\nclass SimpleGenerator extends ModelBase {\n  constructor(args) {\n    super({\n      ...args,\n      settings: ContentSettings.empty({\n        identifier: Identifier.createType(args.refName),\n        exportPath: './src/simple-models.ts'\n      })\n    });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "empty",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "identifier",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "exportPath",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "EmptyArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EmptyArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "ContentSettings",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ],
                  "typeName": "ContentSettings"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/ContentSettings.ts",
              "line": 191,
              "col": 2,
              "byteIndex": 6051
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "Definition",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Definition.ts",
        "line": 142,
        "col": 0,
        "byteIndex": 4492
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a complete code definition in the SKMTC DSL system.\n\nThe `Definition` class is the primary output unit of generators, representing\na complete piece of generated code (like an interface, function, or constant).\nIt combines an identifier, generated content, and optional metadata into a\nformatted code definition with proper TypeScript syntax.\n\nThis class automatically handles export statements, type annotations, and\nJSDoc comment generation, making it the building block for all generated\ncode artifacts.\n\n## Key Features\n\n- **Automatic Exports**: Handles export keyword based on configuration\n- **Type Safety**: Preserves type information through generic parameters\n- **JSDoc Integration**: Automatic comment generation from descriptions\n- **Entity Type Support**: Handles different definition types (const, type, etc.)\n- **Identifier Management**: Integrates with the Identifier system for naming\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The type of generated value (preserves generator-specific types)\n"
          },
          {
            "kind": "example",
            "doc": "Basic interface definition\n```typescript\nimport { Definition, Identifier } from '@skmtc/core';\n\nconst userInterface = new Definition({\n  context: generateContext,\n  identifier: Identifier.createType('User'),\n  description: 'Represents a user in the system',\n  value: {\n    generatorKey: 'typescript-interfaces',\n    content: `{\n      id: string;\n      name: string;\n      email: string;\n    }`\n  }\n});\n\nconsole.log(userInterface.toString());\n//\n// Represents a user in the system\n//\n// export type User = {\n//   id: string;\n//   name: string;\n//   email: string;\n// };\n```\n"
          },
          {
            "kind": "example",
            "doc": "Function definition with parameters\n```typescript\nconst apiFunction = new Definition({\n  context: generateContext,\n  identifier: Identifier.createVariable('fetchUser', 'Promise<User>'),\n  description: 'Fetches a user by ID from the API',\n  value: {\n    generatorKey: 'api-client',\n    content: `async (id: string) => {\n      const response = await fetch(\\`/api/users/\\${id}\\`);\n      return response.json();\n    }`\n  }\n});\n\nconsole.log(apiFunction.toString());\n//\n//  Fetches a user by ID from the API\n//\n// export const fetchUser: Promise<User> = async (id: string) => {\n//   const response = await fetch(`/api/users/${id}`);\n//   return response.json();\n// };\n```\n"
          },
          {
            "kind": "example",
            "doc": "Non-exported definition\n```typescript\nconst helperFunction = new Definition({\n  context: generateContext,\n  identifier: Identifier.createVariable('validateEmail'),\n  value: {\n    generatorKey: 'utilities',\n    content: `(email: string): boolean => {\n      return /^[^\\\\s@]+@[^\\\\s@]+\\\\.[^\\\\s@]+$/.test(email);\n    }`\n  },\n  noExport: true // Internal helper, not exported\n});\n\nconsole.log(helperFunction.toString());\n// const validateEmail = (email: string): boolean => {\n//   return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(email);\n// };\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in generator classes\n```typescript\nimport { ModelBase, Definition, Identifier } from '@skmtc/core';\n\nclass TypeScriptInterface extends ModelBase {\n  toDefinition(): Definition {\n    const schema = this.context.getSchema(this.refName);\n\n    return new Definition({\n      context: this.context,\n      identifier: Identifier.createType(this.refName),\n      description: schema.description,\n      value: {\n        generatorKey: this.generatorKey,\n        content: this.generateInterfaceBody(schema)\n      }\n    });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new Definition instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Definition configuration"
                },
                {
                  "kind": "param",
                  "name": "args.context",
                  "doc": "- Generation context for pipeline access"
                },
                {
                  "kind": "param",
                  "name": "args.identifier",
                  "doc": "- The identifier (name and type info) for this definition"
                },
                {
                  "kind": "param",
                  "name": "args.value",
                  "doc": "- The generated content value"
                },
                {
                  "kind": "param",
                  "name": "args.description",
                  "doc": "- Optional description for JSDoc comments"
                },
                {
                  "kind": "param",
                  "name": "args.noExport",
                  "doc": "- Whether to omit the export keyword (default: false)\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst constant = new Definition({\n  context: generateContext,\n  identifier: Identifier.createVariable('API_BASE_URL', 'string'),\n  description: 'Base URL for all API requests',\n  value: {\n    generatorKey: 'constants',\n    content: \"'https://api.example.com'\"\n  }\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "identifier",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "description",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "noExport",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      }
                    ],
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Definition.ts",
              "line": 178,
              "col": 2,
              "byteIndex": 5669
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The identifier for this definition"
            },
            "tsType": {
              "repr": "Identifier",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Identifier"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "identifier",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Definition.ts",
              "line": 144,
              "col": 2,
              "byteIndex": 4627
            }
          },
          {
            "jsDoc": {
              "doc": "Optional description for JSDoc comments"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Definition.ts",
              "line": 147,
              "col": 2,
              "byteIndex": 4702
            }
          },
          {
            "jsDoc": {
              "doc": "The generated value content"
            },
            "tsType": {
              "repr": "V",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "V"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "value",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Definition.ts",
              "line": 150,
              "col": 2,
              "byteIndex": 4774
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to skip the export keyword"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "noExport",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Definition.ts",
              "line": 153,
              "col": 2,
              "byteIndex": 4830
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Generates the complete TypeScript definition code.\n\nThis method produces a properly formatted TypeScript definition with:\n- Optional JSDoc comments from the description\n- Export keyword (unless noExport is true)\n- Entity type (const, type, function, etc.)\n- Identifier with optional type annotation\n- Generated value content\n\nThe output follows TypeScript syntax conventions and can be written\ndirectly to a .ts file.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The complete TypeScript definition as a string\n"
                },
                {
                  "kind": "example",
                  "doc": "Type definition\n```typescript\nconst typeDef = new Definition({\n  context,\n  identifier: Identifier.createType('Status'),\n  description: 'Possible status values',\n  value: { generatorKey: 'types', content: \"'pending' | 'complete' | 'failed'\" }\n});\n\nconsole.log(typeDef.toString());\n//\n// Possible status values\n//\n// export type Status = 'pending' | 'complete' | 'failed';\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Constant definition\n```typescript\nconst constDef = new Definition({\n  context,\n  identifier: Identifier.createVariable('DEFAULT_TIMEOUT', 'number'),\n  value: { generatorKey: 'config', content: '5000' }\n});\n\nconsole.log(constDef.toString());\n// export const DEFAULT_TIMEOUT: number = 5000;\n```\n"
                },
                {
                  "kind": "unsupported",
                  "value": "@todo Move syntax to typescript package to enable language-agnostic use"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "isOverride": true,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Definition.ts",
              "line": 232,
              "col": 2,
              "byteIndex": 7399
            }
          }
        ],
        "extends": "ContentBase",
        "implements": [],
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            },
            "default": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "EntityType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/EntityType.ts",
        "line": 46,
        "col": 0,
        "byteIndex": 1509
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents the type of a TypeScript entity for code generation.\n\n`EntityType` encapsulates the distinction between different kinds of\nTypeScript entities, specifically variables (which become `const` declarations)\nand types (which become `type` or `interface` declarations).\n\nThis class is used by the {@link Identifier} system to ensure that\ngenerated code uses the correct TypeScript keywords and syntax patterns.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Variable entity type\n```typescript\nimport { EntityType } from '@skmtc/core';\n\nconst variableEntity = new EntityType('variable');\nconsole.log(variableEntity.toString()); // 'const'\n\n// Used in code generation:\n// const API_URL = 'https://api.example.com';\n```\n"
          },
          {
            "kind": "example",
            "doc": "Type entity type\n```typescript\nconst typeEntity = new EntityType('type');\nconsole.log(typeEntity.toString()); // 'type'\n\n// Used in code generation:\n// type User = { id: string; name: string; };\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with Identifier\n```typescript\nimport { Identifier, EntityType } from '@skmtc/core';\n\n// Create a variable identifier (uses 'const' keyword)\nconst varId = Identifier.createVariable('API_KEY', 'string');\nconsole.log(varId.entityType.toString()); // 'const'\n\n// Create a type identifier (uses 'type' keyword)\nconst typeId = Identifier.createType('UserStatus');\nconsole.log(typeId.entityType.toString()); // 'type'\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new EntityType instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "type",
                  "doc": "- The type of entity ('variable' for const declarations, 'type' for type declarations)\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// For generating const declarations\nconst constEntity = new EntityType('variable');\n\n// For generating type declarations\nconst typeEntity = new EntityType('type');\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "type",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "variable",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "variable"
                      }
                    },
                    {
                      "repr": "type",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "type"
                      }
                    }
                  ]
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/EntityType.ts",
              "line": 64,
              "col": 2,
              "byteIndex": 2007
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The entity type discriminator"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "variable",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "variable"
                  }
                },
                {
                  "repr": "type",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "type"
                  }
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/EntityType.ts",
              "line": 48,
              "col": 2,
              "byteIndex": 1576
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Returns the appropriate TypeScript keyword for this entity type.\n\nThis method maps the entity type to the correct TypeScript declaration\nkeyword that should be used in generated code:\n- 'variable' entities become 'const' declarations\n- 'type' entities become 'type' declarations\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The TypeScript keyword string ('const' or 'type')\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst varEntity = new EntityType('variable');\nconsole.log(varEntity.toString()); // 'const'\n\nconst typeEntity = new EntityType('type');\nconsole.log(typeEntity.toString()); // 'type'\n\n// Used in code generation:\nconst keyword = entityType.toString();\nconst declaration = `${keyword} ${identifier} = ${value};`;\n// Results in: \"const API_URL = 'https://example.com';\" or\n// Results in: \"type Status = 'active' | 'inactive';\"\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/EntityType.ts",
              "line": 93,
              "col": 2,
              "byteIndex": 2993
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "File",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
        "line": 94,
        "col": 0,
        "byteIndex": 2667
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a TypeScript file in the SKMTC DSL system.\n\nThe `File` class is a core component for generating TypeScript files with proper\nimport management, re-exports, and content organization. It automatically handles\nmodule resolution, import optimization, and package-aware path normalization.\n\n## Key Features\n\n- **Import Management**: Automatically tracks and organizes imports from other modules\n- **Re-export Handling**: Supports re-exporting symbols from other modules\n- **Package Awareness**: Handles module packages for complex project structures\n- **Definition Tracking**: Manages code definitions and their relationships\n- **Path Normalization**: Automatically resolves paths based on package configuration\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic file creation\n```typescript\nimport { File } from '@skmtc/core';\n\nconst file = new File({\n  path: './src/models/User.ts',\n  settings: clientSettings\n});\n\n// Add imports\nfile.imports.set('./types', new Set(['BaseModel', 'Validator']));\n\n// Add definitions\nfile.definitions.set('User', userInterface);\n\n// Generate file content\nconst content = file.toString();\nconsole.log(content);\n// import { BaseModel, Validator } from './types'\n//\n// export interface User extends BaseModel {\n//   id: string;\n//   name: string;\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "With package configuration\n```typescript\nconst file = new File({\n  path: './packages/client/src/api.ts',\n  settings: {\n    packages: [\n      {\n        rootPath: './packages/types',\n        moduleName: '@myorg/types'\n      }\n    ]\n  }\n});\n\n// Import from another package\nfile.imports.set('./packages/types/models', new Set(['User']));\n\n// Will generate: import { User } from '@myorg/types/models'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Re-exports\n```typescript\nconst file = new File({\n  path: './src/index.ts',\n  settings: clientSettings\n});\n\n// Add re-exports\nfile.reExports.set('./models', {\n  'type': new Set(['User', 'Product']),\n  'const': new Set(['DEFAULT_CONFIG'])\n});\n\n// Will generate:\n// export type { User, Product } from './models'\n// export { DEFAULT_CONFIG } from './models'\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new File instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- File configuration"
                },
                {
                  "kind": "param",
                  "name": "args.path",
                  "doc": "- The output path for this file"
                },
                {
                  "kind": "param",
                  "name": "args.settings",
                  "doc": "- Client settings containing package configuration\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst file = new File({\n  path: './src/generated/models.ts',\n  settings: {\n    packages: [\n      { rootPath: './packages/shared', moduleName: '@company/shared' }\n    ]\n  }\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "path",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "settings",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "FileArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FileArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 132,
              "col": 2,
              "byteIndex": 3740
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The file type, always 'ts' for TypeScript files"
            },
            "tsType": {
              "repr": "ts",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "ts"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "fileType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 96,
              "col": 2,
              "byteIndex": 2746
            }
          },
          {
            "jsDoc": {
              "doc": "The file path for this generated file"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "path",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 99,
              "col": 2,
              "byteIndex": 2820
            }
          },
          {
            "jsDoc": {
              "doc": "Map of module paths to re-exported symbols organized by export type"
            },
            "tsType": {
              "repr": "Map",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "Set",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              }
                            ],
                            "typeName": "Set"
                          }
                        }
                      ],
                      "typeName": "Record"
                    }
                  }
                ],
                "typeName": "Map"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "reExports",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 102,
              "col": 2,
              "byteIndex": 2915
            }
          },
          {
            "jsDoc": {
              "doc": "Map of module paths to imported symbols"
            },
            "tsType": {
              "repr": "Map",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "Set",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      ],
                      "typeName": "Set"
                    }
                  }
                ],
                "typeName": "Map"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "imports",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 105,
              "col": 2,
              "byteIndex": 3021
            }
          },
          {
            "jsDoc": {
              "doc": "Map of definition names to their Definition objects"
            },
            "tsType": {
              "repr": "Map",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "Definition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Definition"
                    }
                  }
                ],
                "typeName": "Map"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "definitions",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 108,
              "col": 2,
              "byteIndex": 3121
            }
          },
          {
            "jsDoc": {
              "doc": "Package configuration for path resolution"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "ModulePackage",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ModulePackage"
                    }
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "packages",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 111,
              "col": 2,
              "byteIndex": 3214
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Generates the complete TypeScript file content.\n\nThis method orchestrates the rendering of all file components in the correct order:\nre-exports first, then imports, and finally definitions. It automatically handles\nmodule path normalization based on package configuration and filters out empty sections.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The complete TypeScript file content as a string\n"
                },
                {
                  "kind": "example",
                  "doc": "Basic file generation\n```typescript\nconst file = new File({ path: './api.ts', settings: undefined });\n\n// Add some imports and definitions\nfile.imports.set('./types', new Set(['User', 'Product']));\nfile.definitions.set('ApiClient', someDefinition);\n\nconst content = file.toString();\nconsole.log(content);\n// import { User, Product } from './types'\n//\n// export class ApiClient {\n//   // ... definition content\n// }\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "With re-exports\n```typescript\nconst file = new File({ path: './index.ts', settings: undefined });\n\nfile.reExports.set('./models', {\n  'type': new Set(['User', 'Product']),\n  'const': new Set(['DEFAULT_CONFIG'])\n});\n\nconst content = file.toString();\nconsole.log(content);\n// export type { User, Product } from './models'\n// export { DEFAULT_CONFIG } from './models'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
              "line": 181,
              "col": 2,
              "byteIndex": 5323
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "NormaliseModuleNameArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
        "line": 220,
        "col": 0,
        "byteIndex": 6547
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for the {@link normaliseModuleName} function."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The path of the file that will contain the import/export"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
                  "line": 222,
                  "col": 2,
                  "byteIndex": 6655
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "exportPath",
                "jsDoc": {
                  "doc": "The original path being imported/exported from"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
                  "line": 224,
                  "col": 2,
                  "byteIndex": 6737
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "packages",
                "jsDoc": {
                  "doc": "Package configuration for path resolution"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
                  "line": 226,
                  "col": 2,
                  "byteIndex": 6809
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "ModulePackage",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ModulePackage"
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "normaliseModuleName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/File.ts",
        "line": 281,
        "col": 13,
        "byteIndex": 8866
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Normalizes module import/export paths based on package configuration.\n\nThis function handles path resolution for complex project structures with multiple\npackages. It converts file system paths to appropriate module names based on:\n- Whether the destination and export paths are in the same package\n- Package-specific module naming conventions\n- Root path truncation for intra-package imports\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Path normalization arguments"
          },
          {
            "kind": "param",
            "name": "args.destinationPath",
            "doc": "- The path of the file that will contain the import/export"
          },
          {
            "kind": "param",
            "name": "args.exportPath",
            "doc": "- The original path being imported/exported from"
          },
          {
            "kind": "param",
            "name": "args.packages",
            "doc": "- Package configuration for path resolution (defaults to empty array)"
          },
          {
            "kind": "return",
            "doc": "The normalized module name to use in import/export statements\n"
          },
          {
            "kind": "throws",
            "type": "Error",
            "doc": "When a matching package is found but has no moduleName configured\n"
          },
          {
            "kind": "example",
            "doc": "Cross-package import\n```typescript\nconst normalized = normaliseModuleName({\n  destinationPath: './packages/client/src/api.ts',\n  exportPath: './packages/types/models/User.ts',\n  packages: [\n    { rootPath: './packages/types', moduleName: '@company/types' },\n    { rootPath: './packages/client', moduleName: '@company/client' }\n  ]\n});\nconsole.log(normalized); // '@company/types'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Intra-package import (same package)\n```typescript\nconst normalized = normaliseModuleName({\n  destinationPath: './packages/types/src/index.ts',\n  exportPath: './packages/types/models/User.ts',\n  packages: [\n    { rootPath: './packages/types', moduleName: '@company/types' }\n  ]\n});\nconsole.log(normalized); // '@/models/User.ts' (truncates root path)\n```\n"
          },
          {
            "kind": "example",
            "doc": "No package match (returns original path)\n```typescript\nconst normalized = normaliseModuleName({\n  destinationPath: './src/index.ts',\n  exportPath: './src/utils.ts',\n  packages: []\n});\nconsole.log(normalized); // './src/utils.ts'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "destinationPath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "exportPath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "packages",
                    "value": "[UNSUPPORTED]"
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "NormaliseModuleNameArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "NormaliseModuleNameArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "JsonFile",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/JsonFile.ts",
        "line": 123,
        "col": 0,
        "byteIndex": 3068
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a JSON file in the SKMTC DSL system.\n\nThe `JsonFile` class is used to generate JSON files as part of the code generation\nprocess. It provides a simple interface for creating configuration files, manifests,\npackage.json files, and other JSON-based artifacts with proper formatting.\n\n## Key Features\n\n- **JSON Formatting**: Automatically formats JSON with 2-space indentation\n- **Type Safety**: Accepts any valid JSON-serializable content structure\n- **Path Management**: Associates content with specific file paths\n- **String Conversion**: Easy integration with file writing systems\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic JSON file creation\n```typescript\nimport { JsonFile } from '@skmtc/core';\n\nconst packageJson = new JsonFile({\n  path: './package.json',\n  content: {\n    name: 'my-api-client',\n    version: '1.0.0',\n    type: 'module',\n    main: './index.js',\n    dependencies: {\n      'axios': '^1.0.0'\n    }\n  }\n});\n\nconst jsonContent = packageJson.toString();\nconsole.log(jsonContent);\n// {\n//   \"name\": \"my-api-client\",\n//   \"version\": \"1.0.0\",\n//   \"type\": \"module\",\n//   \"main\": \"./index.js\",\n//   \"dependencies\": {\n//     \"axios\": \"^1.0.0\"\n//   }\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Configuration file generation\n```typescript\nconst configFile = new JsonFile({\n  path: './src/config/api.json',\n  content: {\n    baseUrl: 'https://api.example.com',\n    timeout: 5000,\n    retryAttempts: 3,\n    endpoints: {\n      users: '/users',\n      products: '/products',\n      orders: '/orders'\n    }\n  }\n});\n\n// Write to file system\nawait Deno.writeTextFile(configFile.path, configFile.toString());\n```\n"
          },
          {
            "kind": "example",
            "doc": "OpenAPI specification output\n```typescript\nconst openApiFile = new JsonFile({\n  path: './dist/openapi.json',\n  content: {\n    openapi: '3.0.0',\n    info: {\n      title: 'My API',\n      version: '1.0.0'\n    },\n    paths: {\n      '/users': {\n        get: {\n          summary: 'List users',\n          responses: {\n            '200': {\n              description: 'Success'\n            }\n          }\n        }\n      }\n    }\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using with generator registration\n```typescript\nclass MyGenerator extends ContentBase {\n  generate() {\n    const manifestFile = new JsonFile({\n      path: './generated/manifest.json',\n      content: {\n        generatedAt: new Date().toISOString(),\n        version: '1.0.0',\n        files: [\n          './models/User.ts',\n          './models/Product.ts'\n        ]\n      }\n    });\n\n    // Register with the generation context\n    this.register({ jsonFile: manifestFile });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new JsonFile instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- JSON file configuration"
                },
                {
                  "kind": "param",
                  "name": "args.path",
                  "doc": "- The output path for this JSON file"
                },
                {
                  "kind": "param",
                  "name": "args.content",
                  "doc": "- The JSON content to write\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst configFile = new JsonFile({\n  path: './config/settings.json',\n  content: {\n    theme: 'dark',\n    language: 'en',\n    features: ['auth', 'notifications']\n  }\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "path",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "content",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "JsonFileArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "JsonFileArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/JsonFile.ts",
              "line": 152,
              "col": 2,
              "byteIndex": 3798
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The file type, always 'json' for JSON files"
            },
            "tsType": {
              "repr": "json",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "json"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "fileType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/JsonFile.ts",
              "line": 125,
              "col": 2,
              "byteIndex": 3147
            }
          },
          {
            "jsDoc": {
              "doc": "The file path for this generated JSON file"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "path",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/JsonFile.ts",
              "line": 128,
              "col": 2,
              "byteIndex": 3230
            }
          },
          {
            "jsDoc": {
              "doc": "The JSON content to write to the file"
            },
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "content",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/JsonFile.ts",
              "line": 131,
              "col": 2,
              "byteIndex": 3295
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Converts the JSON content to a formatted string.\n\nThis method serializes the content object to JSON with 2-space indentation\nfor readable output. The resulting string is suitable for writing directly\nto a file or including in the generation pipeline.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The formatted JSON content as a string\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst file = new JsonFile({\n  path: './data.json',\n  content: { name: 'test', value: 42 }\n});\n\nconsole.log(file.toString());\n// {\n//   \"name\": \"test\",\n//   \"value\": 42\n// }\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/JsonFile.ts",
              "line": 180,
              "col": 2,
              "byteIndex": 4518
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "GeneratedValueList",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/GeneratedValueList.ts",
        "line": 99,
        "col": 0,
        "byteIndex": 3608
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A utility class for managing lists of generated values with customizable separators.\n\n`GeneratedValueList` provides a way to collect multiple generated values and combine\nthem into a single string with a specified separator. It automatically filters out\nempty values to prevent generating unnecessary whitespace or malformed output.\n\nThis class is useful for building lists of code elements like function parameters,\nimport statements, or any other comma-separated (or otherwise separated) constructs\nwhere individual items might sometimes be empty.\n\n## Key Features\n\n- **Custom Separators**: Support for any string separator (commas, newlines, spaces, etc.)\n- **Empty Filtering**: Automatically removes empty values from output\n- **Type Safety**: Works with any GeneratedValue type\n- **Incremental Building**: Values can be added one at a time\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic usage with comma separation\n```typescript\nimport { GeneratedValueList } from '@skmtc/core';\n\nconst parameterList = new GeneratedValueList(', ');\nparameterList.add({ toString: () => 'id: string' });\nparameterList.add({ toString: () => 'name: string' });\nparameterList.add({ toString: () => 'email?: string' });\n\nconsole.log(parameterList.toString());\n// 'id: string, name: string, email?: string'\n```\n"
          },
          {
            "kind": "example",
            "doc": "With newline separation for code blocks\n```typescript\nconst codeLines = new GeneratedValueList('\\n');\ncodeLines.add({ toString: () => 'import { User } from \"./types\";' });\ncodeLines.add({ toString: () => 'import { validate } from \"./utils\";' });\ncodeLines.add({ toString: () => '' }); // Empty line will be filtered\ncodeLines.add({ toString: () => 'export class UserService {' });\ncodeLines.add({ toString: () => '  // Implementation' });\ncodeLines.add({ toString: () => '}' });\n\nconsole.log(codeLines.toString());\n// import { User } from \"./types\";\n// import { validate } from \"./utils\";\n// export class UserService {\n//   // Implementation\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Empty value filtering\n```typescript\nconst mixedList = new GeneratedValueList(' | ');\nmixedList.add({ toString: () => \"'active'\" });\nmixedList.add({ toString: () => '' }); // This will be filtered out\nmixedList.add({ toString: () => \"'inactive'\" });\nmixedList.add({ toString: () => \"'pending'\" });\n\nconsole.log(mixedList.toString());\n// \"'active' | 'inactive' | 'pending'\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in code generation\n```typescript\nclass InterfaceGenerator {\n  generateInterface(name: string, properties: Array<{name: string, type: string}>) {\n    const propertyList = new GeneratedValueList(';\\n  ');\n\n    properties.forEach(prop => {\n      if (prop.type) { // Only add properties that have types\n        propertyList.add({\n          toString: () => `${prop.name}: ${prop.type}`\n        });\n      }\n    });\n\n    return `interface ${name} {\\n  ${propertyList.toString()};\\n}`;\n  }\n}\n\nconst generator = new InterfaceGenerator();\nconst userInterface = generator.generateInterface('User', [\n  { name: 'id', type: 'string' },\n  { name: 'name', type: 'string' },\n  { name: 'invalid', type: '' }, // Will be filtered out\n  { name: 'email', type: 'string | null' }\n]);\n\nconsole.log(userInterface);\n// interface User {\n//   id: string;\n//   name: string;\n//   email: string | null;\n// }\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new GeneratedValueList with the specified separator.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "separator",
                  "doc": "- The string to use when joining values (e.g., ', ', '\\n', ' | ')\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// For comma-separated lists\nconst commaList = new GeneratedValueList(', ');\n\n// For line-separated content\nconst lineList = new GeneratedValueList('\\n');\n\n// For union types\nconst unionList = new GeneratedValueList(' | ');\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "separator",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/GeneratedValueList.ts",
              "line": 123,
              "col": 2,
              "byteIndex": 4287
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The separator string used to join values"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "separator",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/GeneratedValueList.ts",
              "line": 101,
              "col": 2,
              "byteIndex": 3694
            }
          },
          {
            "jsDoc": {
              "doc": "Internal array of generated values"
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "GeneratedValue",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "GeneratedValue"
                }
              }
            },
            "readonly": false,
            "accessibility": "private",
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "items",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/GeneratedValueList.ts",
              "line": 104,
              "col": 2,
              "byteIndex": 3761
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Adds a generated value to the list.\n\nThe value will be included in the output string when `toString()` is called,\nunless the value's `toString()` method returns an empty string, in which case\nit will be automatically filtered out.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "str",
                  "doc": "- The generated value to add to the list\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst list = new GeneratedValueList(', ');\n\n// Add simple values\nlist.add({ toString: () => 'value1' });\nlist.add({ toString: () => 'value2' });\n\n// Add conditional values\nconst conditionalValue = shouldInclude ? 'conditional' : '';\nlist.add({ toString: () => conditionalValue });\n\nconsole.log(list.toString()); // 'value1, value2' (conditional filtered if empty)\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "add",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "str",
                  "optional": false,
                  "tsType": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/GeneratedValueList.ts",
              "line": 151,
              "col": 2,
              "byteIndex": 5156
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the list to a string representation with values joined by the separator.\n\nThis method processes all added values by calling their `toString()` methods,\nfilters out any empty strings (matching the {@link EMPTY} constant), and joins\nthe remaining values with the configured separator.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The joined string representation of all non-empty values\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst list = new GeneratedValueList(' -> ');\nlist.add({ toString: () => 'start' });\nlist.add({ toString: () => '' }); // Will be filtered out\nlist.add({ toString: () => 'middle' });\nlist.add({ toString: () => 'end' });\n\nconsole.log(list.toString()); // 'start -> middle -> end'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/GeneratedValueList.ts",
              "line": 175,
              "col": 2,
              "byteIndex": 5988
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "Identifier",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
        "line": 74,
        "col": 0,
        "byteIndex": 2352
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a TypeScript identifier in the SKMTC DSL system.\n\nThe `Identifier` class encapsulates named entities in generated code,\nproviding type-safe creation and management of variables, types, and other\nidentifiers. It distinguishes between different kinds of identifiers and\noptionally tracks type information.\n\nThis class uses factory methods instead of direct construction to ensure\nproper entity type classification and to provide a cleaner API.\n\n## Key Features\n\n- **Type Safety**: Distinguishes between variables, types, and other entities\n- **Factory Methods**: Provides semantic constructors for different identifier types\n- **Optional Typing**: Can associate type information with variable identifiers\n- **String Conversion**: Clean string representation for code generation\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Creating variable identifiers\n```typescript\nimport { Identifier } from '@skmtc/core';\n\n// Simple variable without type\nconst userName = Identifier.createVariable('userName');\nconsole.log(userName.toString()); // 'userName'\n\n// Typed variable\nconst userId = Identifier.createVariable('userId', 'string');\nconsole.log(userId.name);     // 'userId'\nconsole.log(userId.typeName); // 'string'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Creating type identifiers\n```typescript\n// Type identifier\nconst userType = Identifier.createType('User');\nconsole.log(userType.toString());        // 'User'\nconsole.log(userType.entityType.value); // 'type'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in code generation\n```typescript\nimport { Definition, Identifier } from '@skmtc/core';\n\nclass ApiGenerator {\n  generateFunction(name: string) {\n    const funcId = Identifier.createVariable(name);\n    const requestType = Identifier.createType('RequestType');\n\n    return new Definition({\n      name: funcId.name,\n      content: `function ${funcId}(data: ${requestType}) {\n        // Implementation\n      }`\n    });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new Identifier instance.\n\nThis constructor is private to enforce the use of factory methods\nthat provide better semantic clarity and type safety.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Identifier configuration"
                }
              ]
            },
            "accessibility": "private",
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "name",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "typeName",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "entityType",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
              "line": 92,
              "col": 2,
              "byteIndex": 2810
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The identifier name"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "name",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
              "line": 76,
              "col": 2,
              "byteIndex": 2409
            }
          },
          {
            "jsDoc": {
              "doc": "The entity type (variable, type, etc.)"
            },
            "tsType": {
              "repr": "EntityType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "EntityType"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "entityType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
              "line": 79,
              "col": 2,
              "byteIndex": 2475
            }
          },
          {
            "jsDoc": {
              "doc": "Optional type name for typed variables"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "typeName",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
              "line": 82,
              "col": 2,
              "byteIndex": 2551
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Creates a variable identifier with optional type information.\n\nThis factory method creates an identifier for variables, constants,\nfunction parameters, and other value-based entities. Optionally\nassociates type information for typed variables.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "name",
                  "doc": "- The variable name"
                },
                {
                  "kind": "param",
                  "name": "typeName",
                  "doc": "- Optional type name for the variable"
                },
                {
                  "kind": "return",
                  "doc": "A new variable Identifier instance\n"
                },
                {
                  "kind": "example",
                  "doc": "Untyped variable\n```typescript\nconst count = Identifier.createVariable('count');\nconsole.log(count.name); // 'count'\nconsole.log(count.typeName); // undefined\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Typed variable\n```typescript\nconst userId = Identifier.createVariable('userId', 'string');\nconsole.log(userId.name);     // 'userId'\nconsole.log(userId.typeName); // 'string'\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "In function generation\n```typescript\nconst param = Identifier.createVariable('data', 'RequestData');\nconst funcDef = `function processRequest(${param.name}: ${param.typeName}) {}`;\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "createVariable",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "typeName",
                  "optional": true,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "Identifier",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Identifier"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
              "line": 129,
              "col": 2,
              "byteIndex": 4060
            }
          },
          {
            "jsDoc": {
              "doc": "Creates a type identifier for TypeScript types.\n\nThis factory method creates an identifier for type entities like\ninterfaces, type aliases, classes, and other type-level constructs.\nType identifiers don't have associated type information since they\nrepresent types themselves.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "name",
                  "doc": "- The type name"
                },
                {
                  "kind": "return",
                  "doc": "A new type Identifier instance\n"
                },
                {
                  "kind": "example",
                  "doc": "Interface type\n```typescript\nconst userInterface = Identifier.createType('User');\nconsole.log(userInterface.name);                // 'User'\nconsole.log(userInterface.entityType.value);   // 'type'\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Type alias\n```typescript\nconst statusType = Identifier.createType('Status');\nconst typeDef = `type ${statusType} = 'pending' | 'complete'`;\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Generic type\n```typescript\nconst responseType = Identifier.createType('ApiResponse');\nconst genericDef = `interface ${responseType}<T> { data: T; success: boolean; }`;\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "createType",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "Identifier",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Identifier"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
              "line": 174,
              "col": 2,
              "byteIndex": 5418
            }
          },
          {
            "jsDoc": {
              "doc": "Returns the string representation of the identifier.\n\nThis method simply returns the identifier name, which is the most\ncommon usage when generating code. The name can be used directly\nin code generation contexts.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The identifier name as a string\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst variable = Identifier.createVariable('userName');\nconst typeId = Identifier.createType('User');\n\nconsole.log(variable.toString()); // 'userName'\nconsole.log(typeId.toString());   // 'User'\n\n// Can be used directly in template strings\nconst code = `const ${variable}: ${typeId} = getUserData();`;\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Identifier.ts",
              "line": 202,
              "col": 2,
              "byteIndex": 6252
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "Import",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
        "line": 80,
        "col": 0,
        "byteIndex": 2236
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a TypeScript import statement in the SKMTC DSL system.\n\nThe `Import` class generates properly formatted import statements for TypeScript\nfiles, handling named imports with optional aliases. It's used throughout the\ncode generation pipeline to manage module dependencies.\n\nThis class supports both simple string imports and aliased imports, making it\neasy to avoid naming conflicts and provide cleaner import statements.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic named imports\n```typescript\nimport { Import } from '@skmtc/core';\n\nconst basicImport = new Import({\n  module: './types',\n  importNames: ['User', 'Product', 'Order']\n});\n\nconsole.log(basicImport.toString());\n// import { User, Product, Order } from './types'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Imports with aliases\n```typescript\nconst aliasedImport = new Import({\n  module: 'react',\n  importNames: [\n    'useState',\n    'useEffect',\n    { 'default': 'React' } // Import default as React\n  ]\n});\n\nconsole.log(aliasedImport.toString());\n// import { useState, useEffect, default as React } from 'react'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Mixed imports\n```typescript\nconst mixedImport = new Import({\n  module: './api/client',\n  importNames: [\n    'ApiClient',\n    { 'RequestOptions': 'Options' }, // Alias to avoid conflicts\n    'ResponseType'\n  ]\n});\n\nconsole.log(mixedImport.toString());\n// import { ApiClient, RequestOptions as Options, ResponseType } from './api/client'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in File generation\n```typescript\nimport { File, Import } from '@skmtc/core';\n\nconst file = new File({ path: './generated.ts', settings: undefined });\n\n// Add import to file\nfile.imports.set('./types', new Set(['User', 'Product']));\n\n// Or create Import directly for more control\nconst customImport = new Import({\n  module: './helpers',\n  importNames: [{ 'validateEmail': 'emailValidator' }]\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new Import instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Import configuration"
                },
                {
                  "kind": "param",
                  "name": "args.module",
                  "doc": "- The module path to import from (e.g., './types', 'react')"
                },
                {
                  "kind": "param",
                  "name": "args.importNames",
                  "doc": "- Array of import names, can be strings or alias objects\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst importStatement = new Import({\n  module: './models/User',\n  importNames: [\n    'User',                           // Simple import\n    { 'UserType': 'IUser' },         // Aliased import\n    'createUser'                     // Another simple import\n  ]\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "module",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "importNames",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 106,
              "col": 2,
              "byteIndex": 3024
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The module path to import from"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "module",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 82,
              "col": 2,
              "byteIndex": 2300
            }
          },
          {
            "jsDoc": {
              "doc": "Array of parsed import names with potential aliases"
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "ImportName",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ImportName"
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "importNames",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 85,
              "col": 2,
              "byteIndex": 2381
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Converts the import to a record format.\n\nThis method creates a record representation where the module path is the key\nand the import names are the value. Useful for serialization or when working\nwith import maps.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "A record with module as key and import names as value\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst importStatement = new Import({\n  module: './types',\n  importNames: ['User', { 'Product': 'IProduct' }]\n});\n\nconst record = importStatement.toRecord();\nconsole.log(record);\n// {\n//   './types': ['User', { 'Product': 'IProduct' }]\n// }\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toRecord",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "Record",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "ImportNameArg",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ImportNameArg"
                        }
                      }
                    }
                  ],
                  "typeName": "Record"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 134,
              "col": 2,
              "byteIndex": 3855
            }
          },
          {
            "jsDoc": {
              "doc": "Generates the TypeScript import statement string.\n\nThis method produces a properly formatted ES6 import statement that can be\nwritten directly to a TypeScript file. It handles both simple and aliased\nimports correctly.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The formatted import statement string\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst basicImport = new Import({\n  module: './utils',\n  importNames: ['formatDate', 'parseJson']\n});\n\nconsole.log(basicImport.toString());\n// import { formatDate, parseJson } from './utils'\n\nconst aliasedImport = new Import({\n  module: 'lodash',\n  importNames: [{ 'isEqual': 'deepEqual' }, 'cloneDeep']\n});\n\nconsole.log(aliasedImport.toString());\n// import { isEqual as deepEqual, cloneDeep } from 'lodash'\n```\n"
                },
                {
                  "kind": "unsupported",
                  "value": "@todo Move syntax to typescript package to enable language-agnostic use"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 172,
              "col": 2,
              "byteIndex": 4966
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "ImportNameArg",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
        "line": 193,
        "col": 0,
        "byteIndex": 5495
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Argument type for import names - can be a simple string or an alias object.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "String import\n```typescript\nconst simpleImport: ImportNameArg = 'User';\n```\n"
          },
          {
            "kind": "example",
            "doc": "Aliased import\n```typescript\nconst aliasedImport: ImportNameArg = { 'User': 'IUser' };\n// This creates: User as IUser\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [],
                "callSignatures": [],
                "indexSignatures": [
                  {
                    "readonly": false,
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "name",
                        "optional": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
                      "line": 193,
                      "col": 39,
                      "byteIndex": 5534
                    }
                  }
                ]
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ImportName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
        "line": 214,
        "col": 0,
        "byteIndex": 6192
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a single import name with optional aliasing.\n\nThis class handles the parsing and formatting of individual import specifiers,\nsupporting both simple imports and aliased imports. It's used internally by\nthe {@link Import} class to manage import statement components.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Simple import name\n```typescript\nconst simple = new ImportName('useState');\nconsole.log(simple.toString()); // 'useState'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Aliased import name\n```typescript\nconst aliased = new ImportName({ 'React': 'ReactLib' });\nconsole.log(aliased.toString()); // 'React as ReactLib'\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new ImportName instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "name",
                  "doc": "- Either a string for simple imports or an object for aliased imports\n"
                },
                {
                  "kind": "example",
                  "doc": "Simple import\n```typescript\nconst importName = new ImportName('User');\n// Results in: User\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Aliased import\n```typescript\nconst importName = new ImportName({ 'UserInterface': 'IUser' });\n// Results in: UserInterface as IUser\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "ImportNameArg",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ImportNameArg"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 238,
              "col": 2,
              "byteIndex": 6789
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The original name being imported"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "name",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 216,
              "col": 2,
              "byteIndex": 6262
            }
          },
          {
            "jsDoc": {
              "doc": "The alias to use (if any)"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "alias",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 219,
              "col": 2,
              "byteIndex": 6315
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Generates the string representation of the import name.\n\nThis method creates the appropriate import specifier syntax,\neither a simple name or an aliased import using TypeScript's\n'as' keyword.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The formatted import specifier string\n"
                },
                {
                  "kind": "example",
                  "doc": "Simple import\n```typescript\nconst simple = new ImportName('useState');\nconsole.log(simple.toString()); // 'useState'\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Aliased import\n```typescript\nconst aliased = new ImportName({ 'Component': 'ReactComponent' });\nconsole.log(aliased.toString()); // 'Component as ReactComponent'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Import.ts",
              "line": 270,
              "col": 2,
              "byteIndex": 7659
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "Inserted",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
        "line": 158,
        "col": 0,
        "byteIndex": 5770
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a successfully inserted generator artifact in the SKMTC DSL system.\n\nThe `Inserted` class is returned when generators are inserted into the generation\ncontext, providing access to the generated content, metadata, and configuration.\nIt acts as a bridge between the insertion process and the consuming code that\nneeds to reference or use the generated artifacts.\n\nThis class provides type-safe access to generated values with proper handling\nof both forced and lazy generation modes, ensuring the correct optionality\nof the generated content based on the generation strategy used.\n\n## Key Features\n\n- **Type Safety**: Generic parameters preserve exact types from generators\n- **Generation Modes**: Handles both 'force' and 'lazy' generation strategies\n- **Metadata Access**: Provides access to identifiers, export paths, and settings\n- **Value Extraction**: Type-safe value extraction with proper optionality\n- **Enrichment Support**: Full support for custom enrichment data types\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The type of generated value (preserves generator output type)"
          },
          {
            "kind": "template",
            "name": "T",
            "doc": "- The generation type ('force' ensures non-null, 'lazy' allows undefined)"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional type for custom enrichment data\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage with forced generation\n```typescript\nimport { Inserted } from '@skmtc/core';\n\nclass MyGenerator extends ModelBase {\n  generate(): Definition {\n    // Insert a related model with forced generation\n    const userModel = this.insertModel(\n      new UserModelGenerator({ ... }),\n      'User'\n    ); // Returns Inserted<UserModelValue, 'force', EnrichmentType>\n\n    // Access the generated value (guaranteed to be present)\n    const userTypeName = userModel.toValue(); // UserModelValue (not undefined)\n    const exportPath = userModel.toExportPath(); // './src/models.ts'\n    const identifier = userModel.toName(); // 'User'\n\n    return new Definition({\n      identifier: Identifier.createType(this.refName),\n      value: {\n        generatorKey: this.generatorKey,\n        content: `export interface Order { user: ${userTypeName}; }`\n      }\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Working with lazy generation\n```typescript\nclass ConditionalGenerator extends ModelBase {\n  generate(): Definition {\n    // Insert with lazy generation (may not generate if already exists)\n    const optionalModel = this.insertModel(\n      new OptionalModelGenerator({ ... }),\n      'OptionalModel',\n      { generation: 'lazy' }\n    ); // Returns Inserted<OptionalValue, 'lazy', EnrichmentType>\n\n    // Value might be undefined with lazy generation\n    const value = optionalModel.toValue(); // OptionalValue | undefined\n\n    if (value) {\n      // Use the generated value\n      return this.createDefinitionWith(value);\n    } else {\n      // Handle case where generation was skipped\n      return this.createFallbackDefinition();\n    }\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Accessing insertion metadata\n```typescript\nclass MetadataAwareGenerator extends OperationBase {\n  generate(): Definition {\n    const requestModel = this.insertModel(\n      new RequestModelGenerator({ ... }),\n      'CreateUserRequest'\n    );\n\n    // Access various metadata\n    const modelName = requestModel.toName(); // 'CreateUserRequest'\n    const identifier = requestModel.toIdentifier(); // Full Identifier object\n    const exportPath = requestModel.toExportPath(); // './src/api/types.ts'\n    const enrichments = requestModel.settings.enrichments; // Custom data\n\n    console.log(`Generated ${modelName} in ${exportPath}`);\n\n    return new Definition({\n      identifier: Identifier.createVariable(this.operation.operationId!),\n      value: {\n        generatorKey: this.generatorKey,\n        content: `async function createUser(data: ${modelName}) { ... }`\n      }\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "With enrichment data\n```typescript\ntype ValidationEnrichment = {\n  validators: string[];\n  required: boolean;\n};\n\nclass EnrichedGenerator extends ModelBase<ValidationEnrichment> {\n  generate(): Definition {\n    const validatedModel = this.insertModel(\n      new ValidatedModelGenerator({ ... }),\n      'ValidatedUser'\n    ); // Returns Inserted<ModelValue, 'force', ValidationEnrichment>\n\n    // Access enrichment data\n    const enrichment = validatedModel.settings.enrichments;\n    const validators = enrichment?.validators ?? [];\n    const isRequired = enrichment?.required ?? false;\n\n    return new Definition({\n      identifier: Identifier.createType(this.refName),\n      value: {\n        generatorKey: this.generatorKey,\n        content: this.generateWithValidation(validatedModel.toValue(), validators)\n      }\n    });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new Inserted instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Insertion configuration"
                },
                {
                  "kind": "param",
                  "name": "args.settings",
                  "doc": "- Content settings with identifier and export path"
                },
                {
                  "kind": "param",
                  "name": "args.definition",
                  "doc": "- The generated definition containing the value"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "settings",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "definition",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      },
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
              "line": 172,
              "col": 2,
              "byteIndex": 6316
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Content settings including identifier and export path"
            },
            "tsType": {
              "repr": "ContentSettings",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "ContentSettings"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "settings",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
              "line": 160,
              "col": 2,
              "byteIndex": 5927
            }
          },
          {
            "jsDoc": {
              "doc": "The generated definition with its value"
            },
            "tsType": {
              "repr": "GeneratedDefinition",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  },
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                ],
                "typeName": "GeneratedDefinition"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "definition",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
              "line": 163,
              "col": 2,
              "byteIndex": 6023
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Gets the name of the inserted artifact.\n\nThis method returns the string name from the identifier, which is commonly\nused when referencing the generated artifact in code or templates.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The name of the inserted artifact\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userModel = this.insertModel(generator, 'User');\nconst name = userModel.toName(); // 'User'\n\n// Use in generated code\nconst code = `interface Order { user: ${name}; }`;\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toName",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
              "line": 194,
              "col": 2,
              "byteIndex": 6981
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the full identifier of the inserted artifact.\n\nThis method returns the complete Identifier object, which includes both\nthe name and type information. Useful when you need access to entity type\nor type annotations.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The complete Identifier object\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst model = this.insertModel(generator, 'User');\nconst identifier = model.toIdentifier();\n\nconsole.log(identifier.name);        // 'User'\nconsole.log(identifier.entityType);  // EntityType instance\nconsole.log(identifier.typeName);    // Optional type annotation\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toIdentifier",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "Identifier",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Identifier"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
              "line": 217,
              "col": 2,
              "byteIndex": 7698
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the export path where the artifact was generated.\n\nThis method returns the file path where the generated artifact is located,\nwhich is useful for creating import statements or understanding the file\nstructure of generated code.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The export path of the generated artifact\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userModel = this.insertModel(generator, 'User');\nconst exportPath = userModel.toExportPath(); // './src/models/User.ts'\n\n// Create import statement\nconst importStmt = `import { User } from '${exportPath}';`;\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toExportPath",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
              "line": 239,
              "col": 2,
              "byteIndex": 8389
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the generated value from the inserted artifact.\n\nThis method returns the actual generated content with proper type safety\nbased on the generation mode. For 'force' generation, the value is guaranteed\nto be present. For 'lazy' generation, the value might be undefined if\ngeneration was skipped.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The generated value, with optionality based on generation type\n"
                },
                {
                  "kind": "example",
                  "doc": "Forced generation (guaranteed value)\n```typescript\nconst userModel = this.insertModel(generator, 'User'); // 'force' by default\nconst value = userModel.toValue(); // UserModelValue (never undefined)\n\n// Safe to use directly\nconst code = `type OrderUser = ${value};`;\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Lazy generation (optional value)\n```typescript\nconst optionalModel = this.insertModel(generator, 'Optional', { generation: 'lazy' });\nconst value = optionalModel.toValue(); // OptionalValue | undefined\n\nif (value) {\n  // Use the generated value\n  const code = `type Optional = ${value};`;\n} else {\n  // Handle missing value (generation was skipped)\n  const code = 'type Optional = any; // Fallback';\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toValue",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "conditional",
                "conditionalType": {
                  "checkType": {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  },
                  "extendsType": {
                    "repr": "force",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "force"
                    }
                  },
                  "trueType": {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  },
                  "falseType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      },
                      {
                        "repr": "undefined",
                        "kind": "keyword",
                        "keyword": "undefined"
                      }
                    ]
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Inserted.ts",
              "line": 276,
              "col": 2,
              "byteIndex": 9693
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          },
          {
            "name": "T",
            "constraint": {
              "repr": "GenerationType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationType"
              }
            }
          },
          {
            "name": "EnrichmentType"
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "ModelBaseArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
        "line": 24,
        "col": 0,
        "byteIndex": 865
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor arguments for {@link ModelBase}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional type for custom enrichment data"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "jsDoc": {
                  "doc": "The generation context providing access to the processing pipeline"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 1001
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "settings",
                "jsDoc": {
                  "doc": "Content settings including export path and enrichment configuration"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1105
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ContentSettings",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ContentSettings"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Unique identifier for this generator type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1200
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "jsDoc": {
                  "doc": "Reference name for the model being generated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1283
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "ModelBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
        "line": 123,
        "col": 0,
        "byteIndex": 4183
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Base class for model generators in the SKMTC DSL system.\n\n`ModelBase` extends {@link ContentBase} to provide specialized functionality for\ngenerating code from OpenAPI schema models. It offers type-safe methods for\ninserting related models, managing schema references, and handling enrichments.\n\nThis class serves as the foundation for creating custom model generators that\ntransform OpenAPI schemas into various code artifacts like TypeScript interfaces,\nvalidation schemas, or database models.\n\n## Key Features\n\n- **Model Insertion**: Insert related models with automatic reference resolution\n- **Schema Normalization**: Handle complex schema references and fallbacks\n- **Export Management**: Control which models are exported from generated files\n- **Enrichment Support**: Extend functionality with custom enrichment data\n- **Type Safety**: Full TypeScript support with generic enrichment types\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional type for custom enrichment data\n"
          },
          {
            "kind": "example",
            "doc": "Basic model generator\n```typescript\nimport { ModelBase, Definition } from '@skmtc/core';\n\nclass TypeScriptInterface extends ModelBase {\n  toDefinition(): Definition {\n    const schema = this.context.getSchema(this.refName);\n\n    return new Definition({\n      name: this.refName,\n      content: `export interface ${this.refName} {\n        ${this.generateProperties(schema)}\n      }`\n    });\n  }\n\n  private generateProperties(schema: OasSchema): string {\n    // Generate interface properties from schema\n    return Object.entries(schema.properties || {})\n      .map(([key, prop]) => `${key}: ${this.getPropertyType(prop)}`)\n      .join(';\\n  ');\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "With enrichments\n```typescript\ntype ValidationEnrichment = {\n  validators: string[];\n  customRules: Record<string, string>;\n};\n\nclass ValidationModel extends ModelBase<ValidationEnrichment> {\n  toDefinition(): Definition {\n    const enrichment = this.settings.enrichment;\n    const validators = enrichment?.validators || [];\n\n    return new Definition({\n      name: `${this.refName}Validator`,\n      content: this.generateValidator(validators)\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Inserting related models\n```typescript\nclass ApiModel extends ModelBase {\n  toDefinition(): Definition {\n    const schema = this.context.getSchema(this.refName);\n\n    // Insert related models automatically\n    if (schema.properties?.user) {\n      this.insertNormalizedModel(\n        new TypeScriptInterface({ ... }),\n        { schema: schema.properties.user, fallbackName: 'User' }\n      );\n    }\n\n    return new Definition({\n      name: this.refName,\n      content: this.generateInterface(schema)\n    });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new ModelBase instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Model generator configuration"
                },
                {
                  "kind": "param",
                  "name": "args.context",
                  "doc": "- The generation context providing pipeline access"
                },
                {
                  "kind": "param",
                  "name": "args.settings",
                  "doc": "- Content settings with export path and enrichments"
                },
                {
                  "kind": "param",
                  "name": "args.generatorKey",
                  "doc": "- Unique identifier for this generator type"
                },
                {
                  "kind": "param",
                  "name": "args.refName",
                  "doc": "- Reference name for the model being generated\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst model = new ModelBase({\n  context: generateContext,\n  settings: {\n    exportPath: './src/models.ts',\n    enrichment: customEnrichments\n  },\n  generatorKey: 'typescript-models',\n  refName: 'UserModel'\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "settings",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generatorKey",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "refName",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ModelBaseArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ModelBaseArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
              "line": 155,
              "col": 2,
              "byteIndex": 5255
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Content settings including export path and enrichment configuration"
            },
            "tsType": {
              "repr": "ContentSettings",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "ContentSettings"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "settings",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
              "line": 125,
              "col": 2,
              "byteIndex": 4335
            }
          },
          {
            "jsDoc": {
              "doc": "Reference name for the model being generated"
            },
            "tsType": {
              "repr": "RefName",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "RefName"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "refName",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
              "line": 128,
              "col": 2,
              "byteIndex": 4434
            }
          },
          {
            "jsDoc": {
              "doc": "Generator key identifying this generator type"
            },
            "tsType": {
              "repr": "GeneratorKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratorKey"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "isOverride": true,
            "name": "generatorKey",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
              "line": 131,
              "col": 2,
              "byteIndex": 4509
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Inserts a related model with forced generation.\n\nThis method adds a related model to the current generation context, ensuring\nit will be generated regardless of whether it already exists. The inserted\nmodel will be exported to the same destination path as this model unless\n`noExport` is specified.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- Type of generated value returned by the insertable"
                },
                {
                  "kind": "template",
                  "name": "EnrichmentType",
                  "doc": "- Type of enrichment data for the insertable"
                },
                {
                  "kind": "param",
                  "name": "insertable",
                  "doc": "- The model generator to insert"
                },
                {
                  "kind": "param",
                  "name": "refName",
                  "doc": "- Reference name for the inserted model"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Insertion options"
                },
                {
                  "kind": "param",
                  "name": "options.noExport",
                  "doc": "- Whether to skip exporting the inserted model"
                },
                {
                  "kind": "return",
                  "doc": "Inserted model reference with generated value\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nclass UserModel extends ModelBase {\n  toDefinition(): Definition {\n    // Insert an address model that's always generated\n    const address = this.insertModel(\n      new AddressModel({ ... }),\n      'Address',\n      { noExport: false }\n    );\n\n    return new Definition({\n      name: this.refName,\n      content: `export interface ${this.refName} {\n        address: ${address.value}\n      }`\n    });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertModel",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "ModelInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "ModelInsertable"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "refName",
                  "optional": false,
                  "tsType": {
                    "repr": "RefName",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RefName"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "Pick",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InsertModelOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "force",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "force"
                                  }
                                }
                              ],
                              "typeName": "InsertModelOptions"
                            }
                          },
                          {
                            "repr": "noExport",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "noExport"
                            }
                          }
                        ],
                        "typeName": "Pick"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "Inserted",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "force",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "force"
                      }
                    },
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "Inserted"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "EnrichmentType",
                  "default": {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
              "line": 200,
              "col": 2,
              "byteIndex": 6788
            }
          },
          {
            "jsDoc": {
              "doc": "Inserts a related model with automatic schema normalization and reference resolution.\n\nThis method intelligently handles schema references by automatically resolving\nthem to appropriate model names. If the schema is a reference, it uses the\nreferenced name; otherwise it falls back to the provided fallback name.\n\nThis is particularly useful when working with complex nested schemas where\nyou want to automatically generate models for referenced types.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- Type of generated value returned by the insertable"
                },
                {
                  "kind": "template",
                  "name": "Schema",
                  "doc": "- Type of OpenAPI schema (schema object, reference, or void)"
                },
                {
                  "kind": "template",
                  "name": "EnrichmentType",
                  "doc": "- Type of enrichment data for the insertable"
                },
                {
                  "kind": "param",
                  "name": "insertable",
                  "doc": "- The model generator to insert"
                },
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Schema normalization arguments"
                },
                {
                  "kind": "param",
                  "name": "args.schema",
                  "doc": "- The OpenAPI schema to normalize (can be reference or actual schema)"
                },
                {
                  "kind": "param",
                  "name": "args.fallbackName",
                  "doc": "- Name to use if schema is not a reference"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Insertion options"
                },
                {
                  "kind": "param",
                  "name": "options.noExport",
                  "doc": "- Whether to skip exporting the inserted model"
                },
                {
                  "kind": "return",
                  "doc": "Inserted model reference with normalized name and generated value\n"
                },
                {
                  "kind": "example",
                  "doc": "Handling schema references\n```typescript\nclass OrderModel extends ModelBase {\n  toDefinition(): Definition {\n    const schema = this.context.getSchema(this.refName);\n\n    // Handle customer property - could be reference or inline schema\n    if (schema.properties?.customer) {\n      const customer = this.insertNormalizedModel(\n        new CustomerModel({ ... }),\n        {\n          schema: schema.properties.customer,\n          fallbackName: 'Customer'\n        }\n      );\n      // customer.refName will be 'Customer' or the referenced schema name\n    }\n\n    return new Definition({ ... });\n  }\n}\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "With complex nested schemas\n```typescript\n// If schema.properties.items is { $ref: '#/components/schemas/Product' }\n// Then the inserted model will use refName 'Product'\nconst items = this.insertNormalizedModel(\n  new ProductModel({ ... }),\n  {\n    schema: schema.properties.items,\n    fallbackName: 'Item' // Won't be used since schema has $ref\n  }\n);\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertNormalizedModel",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "ModelInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "ModelInsertable"
                    }
                  }
                },
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "schema",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "fallbackName",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "InsertNormalisedModelArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Schema",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Schema"
                                }
                              }
                            ],
                            "typeName": "InsertNormalisedModelArgs"
                          }
                        },
                        {
                          "repr": "destinationPath",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "destinationPath"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "Pick",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InsertModelOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "force",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "force"
                                  }
                                }
                              ],
                              "typeName": "InsertModelOptions"
                            }
                          },
                          {
                            "repr": "noExport",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "noExport"
                            }
                          }
                        ],
                        "typeName": "Pick"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "InsertNormalisedModelReturn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "Schema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Schema"
                      }
                    }
                  ],
                  "typeName": "InsertNormalisedModelReturn"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "Schema",
                  "constraint": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "OasSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasSchema"
                        }
                      },
                      {
                        "repr": "OasRef",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "schema",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "schema"
                              }
                            }
                          ],
                          "typeName": "OasRef"
                        }
                      },
                      {
                        "repr": "OasVoid",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasVoid"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "EnrichmentType",
                  "default": {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
              "line": 269,
              "col": 2,
              "byteIndex": 9577
            }
          },
          {
            "jsDoc": {
              "doc": "Registers a file-level artifact with the generation context.\n\nThis method allows the model generator to register additional content\n(like imports, exports, or file-level definitions) that should be included\nin the generated file. The registration is automatically scoped to this\nmodel's export path.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Registration arguments"
                },
                {
                  "kind": "param",
                  "name": "args.content",
                  "doc": "- The content to register (import, export, etc.)"
                },
                {
                  "kind": "param",
                  "name": "args.phase",
                  "doc": "- When to register the content ('pre' or 'post')\n"
                },
                {
                  "kind": "example",
                  "doc": "Registering imports\n```typescript\nclass ApiModel extends ModelBase {\n  toDefinition(): Definition {\n    // Register an import that all generated models need\n    this.register({\n      content: \"import { BaseModel } from './base';\",\n      phase: 'pre'\n    });\n\n    return new Definition({ ... });\n  }\n}\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Registering type exports\n```typescript\nclass TypeModel extends ModelBase {\n  toDefinition(): Definition {\n    this.register({\n      content: \"export type * from './types';\",\n      phase: 'post'\n    });\n\n    return new Definition({ ... });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "isOverride": true,
            "name": "register",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": {
                    "repr": "BaseRegisterArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BaseRegisterArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelBase.ts",
              "line": 330,
              "col": 2,
              "byteIndex": 11423
            }
          }
        ],
        "extends": "ContentBase",
        "implements": [],
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "ModelDriver",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
        "line": 39,
        "col": 0,
        "byteIndex": 1286
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Driver class responsible for managing model generation lifecycle.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The generated value type"
          },
          {
            "kind": "template",
            "name": "T",
            "doc": "- The generation type"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment type"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new ModelDriver instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Constructor arguments"
                },
                {
                  "kind": "param",
                  "name": "args.context",
                  "doc": "- Generation context"
                },
                {
                  "kind": "param",
                  "name": "args.insertable",
                  "doc": "- Model insertable configuration"
                },
                {
                  "kind": "param",
                  "name": "args.refName",
                  "doc": "- Reference name for the model"
                },
                {
                  "kind": "param",
                  "name": "args.generation",
                  "doc": "- Optional generation type"
                },
                {
                  "kind": "param",
                  "name": "args.destinationPath",
                  "doc": "- Optional destination path"
                },
                {
                  "kind": "param",
                  "name": "args.rootRef",
                  "doc": "- Optional root reference name"
                },
                {
                  "kind": "param",
                  "name": "args.noExport",
                  "doc": "- Whether to skip export declaration"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "insertable",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "refName",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generation",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "destinationPath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "rootRef",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "noExport",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CreateModelArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      },
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "CreateModelArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 69,
              "col": 2,
              "byteIndex": 2457
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The generation context"
            },
            "tsType": {
              "repr": "GenerateContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerateContext"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "context",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 41,
              "col": 2,
              "byteIndex": 1415
            }
          },
          {
            "jsDoc": {
              "doc": "The insertable model configuration"
            },
            "tsType": {
              "repr": "ModelInsertable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  },
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "ModelInsertable"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 43,
              "col": 2,
              "byteIndex": 1486
            }
          },
          {
            "jsDoc": {
              "doc": "Reference name for the model"
            },
            "tsType": {
              "repr": "RefName",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "RefName"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "refName",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 45,
              "col": 2,
              "byteIndex": 1573
            }
          },
          {
            "jsDoc": {
              "doc": "Content settings for the model"
            },
            "tsType": {
              "repr": "ContentSettings",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "ContentSettings"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "settings",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 47,
              "col": 2,
              "byteIndex": 1632
            }
          },
          {
            "jsDoc": {
              "doc": "Optional destination path for the generated file"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "destinationPath",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 49,
              "col": 2,
              "byteIndex": 1734
            }
          },
          {
            "jsDoc": {
              "doc": "The generated definition"
            },
            "tsType": {
              "repr": "GeneratedDefinition",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  },
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                ],
                "typeName": "GeneratedDefinition"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "definition",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 51,
              "col": 2,
              "byteIndex": 1795
            }
          },
          {
            "jsDoc": {
              "doc": "Optional root reference name"
            },
            "tsType": {
              "repr": "RefName",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "RefName"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "rootRef",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 53,
              "col": 2,
              "byteIndex": 1873
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to skip export declaration"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "noExport",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 55,
              "col": 2,
              "byteIndex": 1937
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Applies generation configuration to create the model definition.\n\nThis method handles the core generation logic, including identifier resolution,\nexport path management, and import registration for cross-file dependencies.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "T",
                  "doc": "- The generation type"
                },
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Apply configuration arguments"
                },
                {
                  "kind": "param",
                  "name": "args.generation",
                  "doc": "- Optional generation type (unused currently)"
                },
                {
                  "kind": "param",
                  "name": "args.destinationPath",
                  "doc": "- Optional destination path for imports"
                },
                {
                  "kind": "return",
                  "doc": "Generated definition for the model"
                }
              ]
            },
            "accessibility": "private",
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "apply",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "assign",
                  "left": {
                    "kind": "object",
                    "props": [
                      {
                        "kind": "keyValue",
                        "key": "generation",
                        "value": {
                          "kind": "identifier",
                          "name": "_generation",
                          "optional": false,
                          "tsType": null
                        }
                      },
                      {
                        "kind": "assign",
                        "key": "destinationPath",
                        "value": null
                      }
                    ],
                    "optional": false,
                    "tsType": {
                      "repr": "ApplyArgs",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "ApplyArgs"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "GeneratedDefinition",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "GeneratedDefinition"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "GenerationType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GenerationType"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 105,
              "col": 2,
              "byteIndex": 3636
            }
          },
          {
            "jsDoc": {
              "doc": "Retrieves or creates a definition for the model.\n\nThis method first checks for cached definitions to avoid duplicate generation,\nthen creates a new definition if none exists. It handles the complete model\ntransformation process including schema resolution and value generation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Definition retrieval arguments"
                },
                {
                  "kind": "param",
                  "name": "args.identifier",
                  "doc": "- The identifier for the definition"
                },
                {
                  "kind": "param",
                  "name": "args.exportPath",
                  "doc": "- The export path for the definition"
                },
                {
                  "kind": "return",
                  "doc": "Model definition instance"
                }
              ]
            },
            "accessibility": "private",
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "getDefinition",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "identifier",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "exportPath",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "GetDefinitionArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GetDefinitionArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Definition",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "Definition"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 140,
              "col": 2,
              "byteIndex": 4841
            }
          },
          {
            "jsDoc": {
              "doc": "Type guard to verify a definition matches the expected generated value type.\n\nThis method performs type narrowing to ensure a cached definition is compatible\nwith the current generation requirements, including export path validation.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- The expected generated value type"
                },
                {
                  "kind": "param",
                  "name": "definition",
                  "doc": "- The definition to verify (may be undefined)"
                },
                {
                  "kind": "param",
                  "name": "exportPath",
                  "doc": "- Expected export path for validation"
                },
                {
                  "kind": "return",
                  "doc": "True if definition matches expected type and constraints"
                }
              ]
            },
            "accessibility": "private",
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "affirmDefinition",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "definition",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Definition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Definition"
                        }
                      },
                      {
                        "repr": "undefined",
                        "kind": "keyword",
                        "keyword": "undefined"
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "exportPath",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "definition is \u001b[0m\u001b[38;5;12mDefinition\u001b[0m<\u001b[0m\u001b[38;5;12mV\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "identifier",
                    "name": "definition"
                  },
                  "type": {
                    "repr": "Definition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "Definition"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/ModelDriver.ts",
              "line": 194,
              "col": 2,
              "byteIndex": 6424
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          },
          {
            "name": "T",
            "constraint": {
              "repr": "GenerationType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationType"
              }
            }
          },
          {
            "name": "EnrichmentType"
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "ModelInsertableArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
        "line": 16,
        "col": 0,
        "byteIndex": 607
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for creating a model insertable instance.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichments to apply to the model"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "jsDoc": {
                  "doc": "The generation context providing access to OAS objects and utilities"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 751
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "settings",
                "jsDoc": {
                  "doc": "Content settings for customizing model generation behavior"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 846
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ContentSettings",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ContentSettings"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "jsDoc": {
                  "doc": "Reference name identifying the model schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 943
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "BaseModelConfig",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
        "line": 38,
        "col": 0,
        "byteIndex": 1328
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for creating a base model class.\n\nDefines the structure and behavior for model generators, including\nidentifier generation, export path resolution, and enrichment schemas.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichments to apply to generated models"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "jsDoc": {
                  "doc": "Unique identifier for the model generator"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
                  "line": 40,
                  "col": 2,
                  "byteIndex": 1441
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "toIdentifier",
                "jsDoc": {
                  "doc": "Function to generate identifiers from reference names"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1517
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "Identifier",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Identifier"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "refName",
                        "optional": false,
                        "tsType": {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toExportPath",
                "jsDoc": {
                  "doc": "Function to generate export paths from reference names"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1630
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "refName",
                        "optional": false,
                        "tsType": {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentSchema",
                "jsDoc": {
                  "doc": "Optional function to provide enrichment validation schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1742
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "v.BaseSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          },
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          },
                          {
                            "repr": "v.BaseIssue",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                }
                              ],
                              "typeName": "v.BaseIssue"
                            }
                          }
                        ],
                        "typeName": "v.BaseSchema"
                      }
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "toModelBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelBase.ts",
        "line": 95,
        "col": 13,
        "byteIndex": 3567
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a base model class constructor for generating type-safe model artifacts.\n\nThis factory function creates a specialized ModelBase class that implements\nthe provided configuration for identifier generation, export paths, and\nenrichment handling. The resulting class can be instantiated to generate\nmodel artifacts from OpenAPI schemas.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichments to apply to generated models"
          },
          {
            "kind": "param",
            "name": "config",
            "doc": "- Configuration defining the model generation behavior"
          },
          {
            "kind": "return",
            "doc": "Constructor function for creating model instances\n"
          },
          {
            "kind": "example",
            "doc": "Creating a TypeScript interface generator\n```typescript\nimport { toModelBase } from '@skmtc/core';\n\nconst TypeScriptModelBase = toModelBase({\n  id: 'typescript-interfaces',\n  toIdentifier: (refName) => new Identifier(pascalCase(refName)),\n  toExportPath: (refName) => `./models/${kebabCase(refName)}.ts`,\n  toEnrichmentSchema: () => v.object({\n    includeValidation: v.optional(v.boolean()),\n    readonly: v.optional(v.boolean())\n  })\n});\n\nclass TypeScriptModelGenerator extends TypeScriptModelBase {\n  generate() {\n    const enrichments = this.enrichments;\n    const interface = generateInterface(this.schema, {\n      readonly: enrichments?.readonly ?? false\n    });\n    this.register({ file: this.createFile(interface) });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Creating a validation schema generator\n```typescript\nconst ValidationModelBase = toModelBase({\n  id: 'zod-schemas',\n  toIdentifier: (refName) => new Identifier(`${pascalCase(refName)}Schema`),\n  toExportPath: (refName) => `./schemas/${kebabCase(refName)}.schema.ts`\n});\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": true,
                "tsType": {
                  "repr": "ModelBase",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ModelBase"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": {
                      "repr": "ModelInsertableArgs",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          }
                        ],
                        "typeName": "ModelInsertableArgs"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "config",
                "optional": false,
                "tsType": {
                  "repr": "BaseModelConfig",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "BaseModelConfig"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "EnrichmentType",
                "default": {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toModelEntry",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
        "line": 81,
        "col": 13,
        "byteIndex": 3402
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a model transformation entry for the SKMTC pipeline.\n\nThis function creates a standardized model entry that defines how to transform\nOpenAPI schema objects into model artifacts. Model entries are used by the\ngeneration pipeline to process schemas and create output files.\n\nThe resulting entry includes transformation logic, preview generation,\nmapping generation, enrichment handling, and schema validation.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichments that can be applied to models"
          },
          {
            "kind": "template",
            "name": "Acc",
            "doc": "- Accumulator type for the transformation process"
          },
          {
            "kind": "param",
            "name": "args",
            "doc": "- Configuration for the model entry"
          },
          {
            "kind": "param",
            "name": "args.id",
            "doc": "- Unique identifier for this model entry"
          },
          {
            "kind": "param",
            "name": "args.transform",
            "doc": "- Function to transform schemas into artifacts"
          },
          {
            "kind": "param",
            "name": "args.toPreviewModule",
            "doc": "- Optional function to generate preview modules"
          },
          {
            "kind": "param",
            "name": "args.toMappingModule",
            "doc": "- Optional function to generate mapping modules"
          },
          {
            "kind": "param",
            "name": "args.toEnrichmentSchema",
            "doc": "- Optional function to provide enrichment validation"
          },
          {
            "kind": "param",
            "name": "args.toEnrichmentRequest",
            "doc": "- Optional function to request enrichments"
          },
          {
            "kind": "return",
            "doc": "Model entry object for use in the generation pipeline\n"
          },
          {
            "kind": "example",
            "doc": "Basic model entry\n```typescript\nimport { toModelEntry } from '@skmtc/core';\n\nconst typeScriptModelEntry = toModelEntry({\n  id: 'typescript-models',\n  transform: ({ context, refName, acc }) => {\n    const schema = context.getSchemaByRefName(refName);\n    const tsInterface = generateTypeScriptInterface(schema);\n    return { ...acc, [refName]: tsInterface };\n  },\n  toPreviewModule: ({ context, refName }) => ({\n    group: 'forms',\n    title: `${refName} Model`,\n    description: 'Generated TypeScript interface'\n  })\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Model entry with enrichments\n```typescript\nconst validationModelEntry = toModelEntry({\n  id: 'validation-schemas',\n  transform: ({ context, refName, acc }) => {\n    const enrichments = context.getEnrichments(refName);\n    const schema = context.getSchemaByRefName(refName);\n    const validationSchema = generateValidationSchema(schema, {\n      strict: enrichments?.strict ?? false\n    });\n    return { ...acc, [refName]: validationSchema };\n  },\n  toEnrichmentSchema: () => v.object({\n    strict: v.optional(v.boolean()),\n    nullable: v.optional(v.boolean())\n  }),\n  toEnrichmentRequest: (refName) => ({\n    path: `models.${refName}`,\n    schema: enrichmentSchema\n  })\n});\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "id",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
                      "line": 89,
                      "col": 2,
                      "byteIndex": 3608
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "type",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
                      "line": 90,
                      "col": 2,
                      "byteIndex": 3622
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "model",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "model"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "transform",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
                      "line": 91,
                      "col": 2,
                      "byteIndex": 3639
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Acc",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Acc"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "refName",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "acc",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "TransformModelArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "Acc",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Acc"
                                    }
                                  }
                                ],
                                "typeName": "TransformModelArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toPreviewModule",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
                      "line": 92,
                      "col": 2,
                      "byteIndex": 3713
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "PreviewModule",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PreviewModule"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "refName",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "ToModelPreviewModuleArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ToModelPreviewModuleArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toMappingModule",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
                      "line": 93,
                      "col": 2,
                      "byteIndex": 3800
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "MappingModule",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MappingModule"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "refName",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "ToModelMappingArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ToModelMappingArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toEnrichmentSchema",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
                      "line": 94,
                      "col": 2,
                      "byteIndex": 3881
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "v.GenericSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "EnrichmentType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "EnrichmentType"
                                }
                              }
                            ],
                            "typeName": "v.GenericSchema"
                          }
                        },
                        "params": [],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toEnrichmentRequest",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/toModelEntry.ts",
                      "line": 95,
                      "col": 2,
                      "byteIndex": 3943
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "EnrichmentRequest",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "RequestedEnrichment",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "RequestedEnrichment"
                                    }
                                  }
                                ],
                                "typeName": "EnrichmentRequest"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "refName",
                            "optional": false,
                            "tsType": {
                              "repr": "RefName",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "RefName"
                              }
                            }
                          }
                        ],
                        "typeParams": [
                          {
                            "name": "RequestedEnrichment",
                            "constraint": {
                              "repr": "EnrichmentType",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "EnrichmentType"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "id",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "transform",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toPreviewModule",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toMappingModule",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toEnrichmentSchema",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toEnrichmentRequest",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToModelEntryArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      },
                      {
                        "repr": "Acc",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Acc"
                        }
                      }
                    ],
                    "typeName": "ToModelEntryArgs"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "EnrichmentType",
                "default": {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              },
              {
                "name": "Acc",
                "default": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ModelInsertableConstructorArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 15,
        "col": 0,
        "byteIndex": 640
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor arguments for model insertable instances.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment data type for additional metadata"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 717
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 744
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              },
              {
                "name": "settings",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 763
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ContentSettings",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ContentSettings"
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 19,
                  "col": 2,
                  "byteIndex": 807
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "rootRef",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 833
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "WithTransformModel",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 29,
        "col": 0,
        "byteIndex": 1045
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Interface for objects that provide model transformation capabilities.\n\nUsed by generator configurations to transform model definitions\nduring the code generation process."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "transformModel",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1082
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "refName",
                        "optional": false,
                        "tsType": {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ModelToEnrichmentsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 36,
        "col": 0,
        "byteIndex": 1192
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for generating enrichment data for models."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "refName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1233
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              },
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 38,
                  "col": 2,
                  "byteIndex": 1252
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TransformModelArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 46,
        "col": 0,
        "byteIndex": 1421
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments passed to model transformation functions.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Acc",
            "doc": "- Accumulator type for collecting transformation results"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 47,
                  "col": 2,
                  "byteIndex": 1463
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 48,
                  "col": 2,
                  "byteIndex": 1490
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              },
              {
                "name": "acc",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 49,
                  "col": 2,
                  "byteIndex": 1509
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Acc",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Acc"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Acc"
          }
        ]
      }
    },
    {
      "name": "ToModelPreviewModuleArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 58,
        "col": 0,
        "byteIndex": 1693
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for generating model preview modules.\n\nPreview modules provide quick insights into generated models\nwithout full code generation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 59,
                  "col": 2,
                  "byteIndex": 1736
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 60,
                  "col": 2,
                  "byteIndex": 1763
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ToModelMappingArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 69,
        "col": 0,
        "byteIndex": 1978
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for generating model mapping information.\n\nMappings track relationships between OAS schemas and generated models,\nenabling cross-references and dependency analysis."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 70,
                  "col": 2,
                  "byteIndex": 2015
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 71,
                  "col": 2,
                  "byteIndex": 2042
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ModelInsertable",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 83,
        "col": 0,
        "byteIndex": 2433
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration object for insertable model generators.\n\nDefines the contract for model generator classes that can be inserted\ninto the generation context to produce type-safe model definitions.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- Generated value type produced by the model generator"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment data type for additional metadata"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "intersection",
          "intersection": [
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "prototype",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 83,
                      "col": 63,
                      "byteIndex": 2496
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [
                  {
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "refName",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "settings",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "destinationPath",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "rootRef",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "ModelInsertableConstructorArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "EnrichmentType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "EnrichmentType"
                                }
                              }
                            ],
                            "typeName": "ModelInsertableConstructorArgs"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    "typeParams": [],
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 84,
                      "col": 2,
                      "byteIndex": 2517
                    }
                  }
                ],
                "methods": [],
                "properties": [
                  {
                    "name": "id",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 91,
                      "col": 2,
                      "byteIndex": 2655
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "type",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 92,
                      "col": 2,
                      "byteIndex": 2668
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "model",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "model"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toIdentifier",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 93,
                      "col": 2,
                      "byteIndex": 2684
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Identifier",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Identifier"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "refName",
                            "optional": false,
                            "tsType": {
                              "repr": "RefName",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "RefName"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toExportPath",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 94,
                      "col": 2,
                      "byteIndex": 2733
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "refName",
                            "optional": false,
                            "tsType": {
                              "repr": "RefName",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "RefName"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toEnrichments",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 95,
                      "col": 2,
                      "byteIndex": 2778
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "refName",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "ModelToEnrichmentsArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ModelToEnrichmentsArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "schemaToValueFn",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 96,
                      "col": 2,
                      "byteIndex": 2860
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "SchemaToValueFn",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SchemaToValueFn"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "createIdentifier",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                      "line": 97,
                      "col": 2,
                      "byteIndex": 2895
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Identifier",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Identifier"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "name",
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            {
              "repr": "Function",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Function"
              }
            }
          ]
        },
        "typeParams": [
          {
            "name": "V"
          },
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "ModelConfig",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
        "line": 109,
        "col": 0,
        "byteIndex": 3275
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration object for model generators.\n\nDefines the behavior and capabilities of model generators including\ntransformation logic, preview generation, and enrichment handling.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment data type for additional metadata"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 110,
                  "col": 2,
                  "byteIndex": 3333
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 111,
                  "col": 2,
                  "byteIndex": 3346
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "model",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "model"
                  }
                },
                "typeParams": []
              },
              {
                "name": "transform",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 112,
                  "col": 2,
                  "byteIndex": 3362
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "Acc",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Acc"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "refName",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "acc",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "TransformModelArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Acc",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Acc"
                                }
                              }
                            ],
                            "typeName": "TransformModelArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": [
                      {
                        "name": "Acc",
                        "default": {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              },
              {
                "name": "toPreviewModule",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 113,
                  "col": 2,
                  "byteIndex": 3447
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "PreviewModule",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "PreviewModule"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "refName",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "ToModelPreviewModuleArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ToModelPreviewModuleArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toMappingModule",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 114,
                  "col": 2,
                  "byteIndex": 3533
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MappingModule",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MappingModule"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "refName",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "ToModelMappingArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ToModelMappingArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentSchema",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 115,
                  "col": 2,
                  "byteIndex": 3613
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "v.BaseSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          },
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          },
                          {
                            "repr": "v.BaseIssue",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                }
                              ],
                              "typeName": "v.BaseIssue"
                            }
                          }
                        ],
                        "typeName": "v.BaseSchema"
                      }
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentRequest",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/model/types.ts",
                  "line": 116,
                  "col": 2,
                  "byteIndex": 3709
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "EnrichmentRequest",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "RequestedEnrichment",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "RequestedEnrichment"
                                }
                              }
                            ],
                            "typeName": "EnrichmentRequest"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "refName",
                        "optional": false,
                        "tsType": {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        }
                      }
                    ],
                    "typeParams": [
                      {
                        "name": "RequestedEnrichment",
                        "constraint": {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "OperationBaseArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
        "line": 29,
        "col": 0,
        "byteIndex": 1102
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor arguments for {@link OperationBase}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional type for custom enrichment data"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "jsDoc": {
                  "doc": "The generation context providing access to the processing pipeline"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
                  "line": 31,
                  "col": 2,
                  "byteIndex": 1242
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "settings",
                "jsDoc": {
                  "doc": "Content settings including export path and enrichment configuration"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
                  "line": 33,
                  "col": 2,
                  "byteIndex": 1346
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ContentSettings",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ContentSettings"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Unique identifier for this generator type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
                  "line": 35,
                  "col": 2,
                  "byteIndex": 1441
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "jsDoc": {
                  "doc": "The OpenAPI operation being processed"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1517
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "OperationBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
        "line": 144,
        "col": 0,
        "byteIndex": 5393
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Base class for operation generators in the SKMTC DSL system.\n\n`OperationBase` extends {@link ContentBase} to provide specialized functionality for\ngenerating code from OpenAPI operations. It offers type-safe methods for inserting\nrelated operations and models, managing complex operation dependencies, and handling\nenrichments specific to API operations.\n\nThis class serves as the foundation for creating custom operation generators that\ntransform OpenAPI operations into various code artifacts like API clients, server\nhandlers, validation middleware, or documentation.\n\n## Key Features\n\n- **Operation Insertion**: Insert related operations with automatic dependency tracking\n- **Model Integration**: Seamlessly insert related models from operation schemas\n- **Schema Normalization**: Handle complex request/response schema references\n- **Export Management**: Control which operations are exported from generated files\n- **Enrichment Support**: Extend functionality with operation-specific enrichment data\n- **Type Safety**: Full TypeScript support with generic enrichment types\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional type for custom enrichment data\n"
          },
          {
            "kind": "example",
            "doc": "Basic API client generator\n```typescript\nimport { OperationBase, Definition } from '@skmtc/core';\n\nclass ApiClientMethod extends OperationBase {\n  toDefinition(): Definition {\n    const { method, path, operationId } = this.operation;\n\n    return new Definition({\n      name: operationId || `${method}${this.pascalCasePath()}`,\n      content: `async ${operationId}(${this.generateParameters()}) {\n        return this.request('${method}', '${path}', ${this.generateRequestBody()});\n      }`\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "With request/response models\n```typescript\nclass TypedApiMethod extends OperationBase {\n  toDefinition(): Definition {\n    const operation = this.operation;\n\n    // Generate request model if needed\n    let requestType = 'void';\n    if (operation.requestBody?.content?.['application/json']?.schema) {\n      const requestModel = this.insertNormalizedModel(\n        new RequestModel({ ... }),\n        {\n          schema: operation.requestBody.content['application/json'].schema,\n          fallbackName: `${operation.operationId}Request`\n        }\n      );\n      requestType = requestModel.value;\n    }\n\n    // Generate response model\n    const responseSchema = operation.responses?.['200']?.content?.['application/json']?.schema;\n    const responseModel = this.insertNormalizedModel(\n      new ResponseModel({ ... }),\n      { schema: responseSchema, fallbackName: `${operation.operationId}Response` }\n    );\n\n    return new Definition({\n      name: operation.operationId,\n      content: `async ${operation.operationId}(data: ${requestType}): Promise<${responseModel.value}> {\n        return this.request('${operation.method}', '${operation.path}', data);\n      }`\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "With enrichments\n```typescript\ntype AuthEnrichment = {\n  requiresAuth: boolean;\n  permissions: string[];\n};\n\nclass SecuredApiMethod extends OperationBase<AuthEnrichment> {\n  toDefinition(): Definition {\n    const enrichment = this.settings.enrichment;\n    const requiresAuth = enrichment?.requiresAuth ?? false;\n\n    const authCheck = requiresAuth\n      ? 'this.checkAuth();'\n      : '';\n\n    return new Definition({\n      name: this.operation.operationId,\n      content: `async ${this.operation.operationId}() {\n        ${authCheck}\n        return this.request('${this.operation.method}', '${this.operation.path}');\n      }`\n    });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OperationBase instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Operation generator configuration"
                },
                {
                  "kind": "param",
                  "name": "args.context",
                  "doc": "- The generation context providing pipeline access"
                },
                {
                  "kind": "param",
                  "name": "args.settings",
                  "doc": "- Content settings with export path and enrichments"
                },
                {
                  "kind": "param",
                  "name": "args.generatorKey",
                  "doc": "- Unique identifier for this generator type"
                },
                {
                  "kind": "param",
                  "name": "args.operation",
                  "doc": "- The OpenAPI operation being processed\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst operation = new OperationBase({\n  context: generateContext,\n  settings: {\n    exportPath: './src/api.ts',\n    enrichment: customEnrichments\n  },\n  generatorKey: 'api-client',\n  operation: oasOperation\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generatorKey",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "settings",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "operation",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "OperationBaseArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "OperationBaseArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 176,
              "col": 2,
              "byteIndex": 6479
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Content settings including export path and enrichment configuration"
            },
            "tsType": {
              "repr": "ContentSettings",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "ContentSettings"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "settings",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 146,
              "col": 2,
              "byteIndex": 5549
            }
          },
          {
            "jsDoc": {
              "doc": "The OpenAPI operation being processed"
            },
            "tsType": {
              "repr": "OasOperation",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasOperation"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "operation",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 149,
              "col": 2,
              "byteIndex": 5643
            }
          },
          {
            "jsDoc": {
              "doc": "Generator key identifying this generator type"
            },
            "tsType": {
              "repr": "GeneratorKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratorKey"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "isOverride": true,
            "name": "generatorKey",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 152,
              "col": 2,
              "byteIndex": 5727
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Inserts a related operation with forced generation.\n\nThis method adds a related operation to the current generation context, ensuring\nit will be generated regardless of whether it already exists. This is useful for\noperations that depend on other operations or need to generate helper operations.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- Type of generated value returned by the insertable"
                },
                {
                  "kind": "template",
                  "name": "EnrichmentType",
                  "doc": "- Type of enrichment data for the insertable"
                },
                {
                  "kind": "param",
                  "name": "insertable",
                  "doc": "- The operation generator to insert"
                },
                {
                  "kind": "param",
                  "name": "operation",
                  "doc": "- The OpenAPI operation to process"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Insertion options"
                },
                {
                  "kind": "param",
                  "name": "options.noExport",
                  "doc": "- Whether to skip exporting the inserted operation"
                },
                {
                  "kind": "return",
                  "doc": "Inserted operation reference with generated value\n"
                },
                {
                  "kind": "example",
                  "doc": "Inserting helper operations\n```typescript\nclass CrudApiClient extends OperationBase {\n  toDefinition(): Definition {\n    // Insert a related validation operation\n    const validator = this.insertOperation(\n      new ValidationOperation({ ... }),\n      this.operation,\n      { noExport: true }\n    );\n\n    return new Definition({\n      name: this.operation.operationId,\n      content: `async ${this.operation.operationId}(data: any) {\n        ${validator.value}(data);\n        return this.request('${this.operation.method}', '${this.operation.path}', data);\n      }`\n    });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertOperation",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "OperationInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "OperationInsertable"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "operation",
                  "optional": false,
                  "tsType": {
                    "repr": "OasOperation",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasOperation"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "Pick",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InsertOperationOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "force",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "force"
                                  }
                                }
                              ],
                              "typeName": "InsertOperationOptions"
                            }
                          },
                          {
                            "repr": "noExport",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "noExport"
                            }
                          }
                        ],
                        "typeName": "Pick"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "Inserted",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "force",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "force"
                      }
                    },
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "Inserted"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "EnrichmentType",
                  "default": {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 221,
              "col": 2,
              "byteIndex": 8197
            }
          },
          {
            "jsDoc": {
              "doc": "Inserts a related model with forced generation.\n\nThis method adds a model to the current generation context, typically used\nfor request/response models or other types related to the operation. The model\nwill be generated and can be referenced in the operation code.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- Type of generated value returned by the insertable"
                },
                {
                  "kind": "template",
                  "name": "EnrichmentType",
                  "doc": "- Type of enrichment data for the insertable"
                },
                {
                  "kind": "param",
                  "name": "insertable",
                  "doc": "- The model generator to insert"
                },
                {
                  "kind": "param",
                  "name": "refName",
                  "doc": "- Reference name for the inserted model"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Insertion options"
                },
                {
                  "kind": "param",
                  "name": "options.noExport",
                  "doc": "- Whether to skip exporting the inserted model"
                },
                {
                  "kind": "return",
                  "doc": "Inserted model reference with generated value\n"
                },
                {
                  "kind": "example",
                  "doc": "Inserting request/response models\n```typescript\nclass ApiOperation extends OperationBase {\n  toDefinition(): Definition {\n    // Insert request model\n    const requestModel = this.insertModel(\n      new RequestModel({ ... }),\n      'CreateUserRequest'\n    );\n\n    // Insert response model\n    const responseModel = this.insertModel(\n      new ResponseModel({ ... }),\n      'CreateUserResponse'\n    );\n\n    return new Definition({\n      name: this.operation.operationId,\n      content: `async ${this.operation.operationId}(data: ${requestModel.value}): Promise<${responseModel.value}> {\n        return this.request('${this.operation.method}', '${this.operation.path}', data);\n      }`\n    });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertModel",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "ModelInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "ModelInsertable"
                    }
                  }
                },
                {
                  "kind": "identifier",
                  "name": "refName",
                  "optional": false,
                  "tsType": {
                    "repr": "RefName",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RefName"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "Pick",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InsertModelOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "force",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "force"
                                  }
                                }
                              ],
                              "typeName": "InsertModelOptions"
                            }
                          },
                          {
                            "repr": "noExport",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "noExport"
                            }
                          }
                        ],
                        "typeName": "Pick"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "Inserted",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "force",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "force"
                      }
                    },
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "Inserted"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "EnrichmentType",
                  "default": {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 274,
              "col": 2,
              "byteIndex": 10248
            }
          },
          {
            "jsDoc": {
              "doc": "Inserts a related model with automatic schema normalization and reference resolution.\n\nThis method intelligently handles schema references from operation request/response\nbodies, automatically resolving schema references to appropriate model names.\nThis is particularly useful for operations with complex request/response schemas.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- Type of generated value returned by the insertable"
                },
                {
                  "kind": "template",
                  "name": "Schema",
                  "doc": "- Type of OpenAPI schema (schema object, reference, or void)"
                },
                {
                  "kind": "template",
                  "name": "EnrichmentType",
                  "doc": "- Type of enrichment data for the insertable"
                },
                {
                  "kind": "param",
                  "name": "insertable",
                  "doc": "- The model generator to insert"
                },
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Schema normalization arguments"
                },
                {
                  "kind": "param",
                  "name": "args.schema",
                  "doc": "- The OpenAPI schema to normalize (from request/response)"
                },
                {
                  "kind": "param",
                  "name": "args.fallbackName",
                  "doc": "- Name to use if schema is not a reference"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Insertion options"
                },
                {
                  "kind": "param",
                  "name": "options.noExport",
                  "doc": "- Whether to skip exporting the inserted model"
                },
                {
                  "kind": "return",
                  "doc": "Inserted model reference with normalized name and generated value\n"
                },
                {
                  "kind": "example",
                  "doc": "Handling operation request/response schemas\n```typescript\nclass RestApiOperation extends OperationBase {\n  toDefinition(): Definition {\n    const operation = this.operation;\n\n    // Handle request body schema\n    let requestType = 'void';\n    const requestSchema = operation.requestBody?.content?.['application/json']?.schema;\n    if (requestSchema) {\n      const requestModel = this.insertNormalizedModel(\n        new TypeScriptInterface({ ... }),\n        {\n          schema: requestSchema,\n          fallbackName: `${operation.operationId}Request`\n        }\n      );\n      requestType = requestModel.value;\n    }\n\n    // Handle response schema\n    const responseSchema = operation.responses?.['200']?.content?.['application/json']?.schema;\n    const responseModel = this.insertNormalizedModel(\n      new TypeScriptInterface({ ... }),\n      {\n        schema: responseSchema,\n        fallbackName: `${operation.operationId}Response`\n      }\n    );\n\n    return new Definition({\n      name: operation.operationId,\n      content: `async ${operation.operationId}(data: ${requestType}): Promise<${responseModel.value}>`\n    });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertNormalizedModel",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "insertable",
                  "optional": false,
                  "tsType": {
                    "repr": "ModelInsertable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        },
                        {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      ],
                      "typeName": "ModelInsertable"
                    }
                  }
                },
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "schema",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "fallbackName",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "InsertNormalisedModelArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Schema",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Schema"
                                }
                              }
                            ],
                            "typeName": "InsertNormalisedModelArgs"
                          }
                        },
                        {
                          "repr": "destinationPath",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "destinationPath"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "options",
                    "optional": false,
                    "tsType": {
                      "repr": "Pick",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "InsertModelOptions",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "force",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "force"
                                  }
                                }
                              ],
                              "typeName": "InsertModelOptions"
                            }
                          },
                          {
                            "repr": "noExport",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "noExport"
                            }
                          }
                        ],
                        "typeName": "Pick"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "InsertNormalisedModelReturn",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "Schema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Schema"
                      }
                    }
                  ],
                  "typeName": "InsertNormalisedModelReturn"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                },
                {
                  "name": "Schema",
                  "constraint": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "OasSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasSchema"
                        }
                      },
                      {
                        "repr": "OasRef",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "schema",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "schema"
                              }
                            }
                          ],
                          "typeName": "OasRef"
                        }
                      },
                      {
                        "repr": "OasVoid",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasVoid"
                        }
                      }
                    ]
                  }
                },
                {
                  "name": "EnrichmentType",
                  "default": {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 342,
              "col": 2,
              "byteIndex": 13084
            }
          },
          {
            "jsDoc": {
              "doc": "Defines and registers a new definition in the generation context.\n\nThis is an experimental method that allows creating and registering\ndefinitions directly without going through the standard insertion flow.\nUse with caution as the API may change in future versions.\n",
              "tags": [
                {
                  "kind": "experimental"
                },
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- Type of generated value"
                },
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Definition arguments"
                },
                {
                  "kind": "param",
                  "name": "args.identifier",
                  "doc": "- Unique identifier for the definition"
                },
                {
                  "kind": "param",
                  "name": "args.value",
                  "doc": "- The generated value to associate with the definition"
                },
                {
                  "kind": "param",
                  "name": "args.noExport",
                  "doc": "- Whether to skip exporting the definition"
                },
                {
                  "kind": "return",
                  "doc": "The created and registered definition\n"
                },
                {
                  "kind": "example",
                  "doc": "Creating inline definitions\n```typescript\nclass InlineHelperOperation extends OperationBase {\n  toDefinition(): Definition {\n    // Create an inline helper function\n    const helper = this.defineAndRegister({\n      identifier: 'validateRequest',\n      value: 'function validateRequest(data: any) { ... }',\n      noExport: true\n    });\n\n    return new Definition({\n      name: this.operation.operationId,\n      content: `async ${this.operation.operationId}(data: any) {\n        ${helper.value}(data);\n        return this.request('${this.operation.method}', '${this.operation.path}', data);\n      }`\n    });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "defineAndRegister",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "identifier",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "value",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "noExport",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "Omit",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "DefineAndRegisterArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "V",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "V"
                                }
                              }
                            ],
                            "typeName": "DefineAndRegisterArgs"
                          }
                        },
                        {
                          "repr": "destinationPath",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "destinationPath"
                          }
                        }
                      ],
                      "typeName": "Omit"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Definition",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "Definition"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 399,
              "col": 2,
              "byteIndex": 15146
            }
          },
          {
            "jsDoc": {
              "doc": "Registers a file-level artifact with the generation context.\n\nThis method allows the operation generator to register additional content\n(like imports, exports, or file-level definitions) that should be included\nin the generated file. The registration is automatically scoped to this\noperation's export path.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Registration arguments"
                },
                {
                  "kind": "param",
                  "name": "args.content",
                  "doc": "- The content to register (import, export, etc.)"
                },
                {
                  "kind": "param",
                  "name": "args.phase",
                  "doc": "- When to register the content ('pre' or 'post')\n"
                },
                {
                  "kind": "example",
                  "doc": "Registering API client imports\n```typescript\nclass HttpOperation extends OperationBase {\n  toDefinition(): Definition {\n    // Register imports needed for HTTP operations\n    this.register({\n      content: \"import { ApiClient } from './client';\",\n      phase: 'pre'\n    });\n\n    this.register({\n      content: \"import { RequestOptions } from './types';\",\n      phase: 'pre'\n    });\n\n    return new Definition({ ... });\n  }\n}\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Registering utility exports\n```typescript\nclass ApiOperationGroup extends OperationBase {\n  toDefinition(): Definition {\n    // Register a utility export after all operations\n    this.register({\n      content: \"export const API_VERSION = '1.0';\",\n      phase: 'post'\n    });\n\n    return new Definition({ ... });\n  }\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "isOverride": true,
            "name": "register",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "args",
                  "optional": false,
                  "tsType": {
                    "repr": "BaseRegisterArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "BaseRegisterArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationBase.ts",
              "line": 459,
              "col": 2,
              "byteIndex": 16960
            }
          }
        ],
        "extends": "ContentBase",
        "implements": [],
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "OperationDriver",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
        "line": 65,
        "col": 0,
        "byteIndex": 2177
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Driver class for generating operation-based artifacts from OpenAPI operations.\n\nThe `OperationDriver` manages the transformation of OpenAPI operation objects\ninto code artifacts, handling path generation, identifier resolution, and\ndefinition management. It serves as the core orchestrator for operation-based\ncode generation in the SKMTC pipeline.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- Type of generated values produced by this driver"
          },
          {
            "kind": "template",
            "name": "T",
            "doc": "- Type of generation strategy (e.g., 'function', 'class', 'hook')"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichments that can be applied\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage in an operation generator\n```typescript\nclass APIClientGenerator extends OperationBase {\n  generate() {\n    const driver = new OperationDriver({\n      context: this.context,\n      insertable: this,\n      operation: this.operation,\n      generation: 'function'\n    });\n\n    const functionCode = driver.definition.toValueString();\n    const file = this.createFile(functionCode);\n    this.register({ file });\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OperationDriver instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Configuration for the operation driver"
                },
                {
                  "kind": "param",
                  "name": "args.context",
                  "doc": "- Generation context"
                },
                {
                  "kind": "param",
                  "name": "args.insertable",
                  "doc": "- Insertable providing generation configuration"
                },
                {
                  "kind": "param",
                  "name": "args.operation",
                  "doc": "- OpenAPI operation to process"
                },
                {
                  "kind": "param",
                  "name": "args.generation",
                  "doc": "- Optional generation type"
                },
                {
                  "kind": "param",
                  "name": "args.destinationPath",
                  "doc": "- Optional custom destination path"
                },
                {
                  "kind": "param",
                  "name": "args.noExport",
                  "doc": "- Whether to exclude from exports"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "insertable",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "operation",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generation",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "destinationPath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "noExport",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CreateOperationArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      },
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "CreateOperationArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 96,
              "col": 2,
              "byteIndex": 3474
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The generation context providing access to OAS objects and utilities"
            },
            "tsType": {
              "repr": "GenerateContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerateContext"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "context",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 71,
              "col": 2,
              "byteIndex": 2376
            }
          },
          {
            "jsDoc": {
              "doc": "The insertable object that provides generation configuration"
            },
            "tsType": {
              "repr": "OperationInsertable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  },
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "OperationInsertable"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "insertable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 73,
              "col": 2,
              "byteIndex": 2473
            }
          },
          {
            "jsDoc": {
              "doc": "The OpenAPI operation object being processed"
            },
            "tsType": {
              "repr": "OasOperation",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasOperation"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "operation",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 75,
              "col": 2,
              "byteIndex": 2580
            }
          },
          {
            "jsDoc": {
              "doc": "Content settings for customizing generation behavior"
            },
            "tsType": {
              "repr": "ContentSettings",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "ContentSettings"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "settings",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 77,
              "col": 2,
              "byteIndex": 2668
            }
          },
          {
            "jsDoc": {
              "doc": "Optional custom destination path for generated files"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "destinationPath",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 79,
              "col": 2,
              "byteIndex": 2774
            }
          },
          {
            "jsDoc": {
              "doc": "The generated definition containing the transformed operation"
            },
            "tsType": {
              "repr": "GeneratedDefinition",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  },
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                ],
                "typeName": "GeneratedDefinition"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "definition",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 81,
              "col": 2,
              "byteIndex": 2872
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to exclude this operation from exports"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "noExport",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 83,
              "col": 2,
              "byteIndex": 2968
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Applies generation configuration to create the operation definition.\n\nThis method handles the core generation logic for operations, including\nidentifier resolution, export path management, and import registration\nfor cross-file dependencies.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "T",
                  "doc": "- The generation type"
                },
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Apply configuration arguments"
                },
                {
                  "kind": "param",
                  "name": "args.generation",
                  "doc": "- Optional generation type (unused currently)"
                },
                {
                  "kind": "param",
                  "name": "args.destinationPath",
                  "doc": "- Optional destination path for imports"
                },
                {
                  "kind": "return",
                  "doc": "Generated definition for the operation"
                }
              ]
            },
            "accessibility": "private",
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "apply",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "assign",
                  "left": {
                    "kind": "object",
                    "props": [
                      {
                        "kind": "keyValue",
                        "key": "generation",
                        "value": {
                          "kind": "identifier",
                          "name": "_generation",
                          "optional": false,
                          "tsType": null
                        }
                      },
                      {
                        "kind": "assign",
                        "key": "destinationPath",
                        "value": null
                      }
                    ],
                    "optional": false,
                    "tsType": {
                      "repr": "ApplyArgs",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "T",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "T"
                            }
                          }
                        ],
                        "typeName": "ApplyArgs"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "GeneratedDefinition",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "GeneratedDefinition"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "T",
                  "constraint": {
                    "repr": "GenerationType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GenerationType"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 130,
              "col": 2,
              "byteIndex": 4545
            }
          },
          {
            "jsDoc": {
              "doc": "Retrieves or creates a definition for the operation.\n\nThis method first checks for cached definitions to avoid duplicate generation,\nthen creates a new definition if none exists. It handles the complete operation\ntransformation process including schema resolution and value generation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Definition retrieval arguments"
                },
                {
                  "kind": "param",
                  "name": "args.identifier",
                  "doc": "- The identifier for the definition"
                },
                {
                  "kind": "param",
                  "name": "args.exportPath",
                  "doc": "- The export path for the definition"
                },
                {
                  "kind": "return",
                  "doc": "Operation definition instance"
                }
              ]
            },
            "accessibility": "private",
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "getDefinition",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "identifier",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "exportPath",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "GetDefinitionArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GetDefinitionArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "Definition",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "Definition"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 165,
              "col": 2,
              "byteIndex": 5762
            }
          },
          {
            "jsDoc": {
              "doc": "Type guard to verify a definition matches the expected generated value type.\n\nThis method performs type narrowing to ensure a cached definition is compatible\nwith the current generation requirements, including export path validation.\n",
              "tags": [
                {
                  "kind": "template",
                  "name": "V",
                  "doc": "- The expected generated value type"
                },
                {
                  "kind": "param",
                  "name": "definition",
                  "doc": "- The definition to verify (may be undefined)"
                },
                {
                  "kind": "param",
                  "name": "exportPath",
                  "doc": "- Expected export path for validation"
                },
                {
                  "kind": "return",
                  "doc": "True if definition matches expected type and constraints"
                }
              ]
            },
            "accessibility": "private",
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "affirmDefinition",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "definition",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "Definition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Definition"
                        }
                      },
                      {
                        "repr": "undefined",
                        "kind": "keyword",
                        "keyword": "undefined"
                      }
                    ]
                  }
                },
                {
                  "kind": "identifier",
                  "name": "exportPath",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "definition is \u001b[0m\u001b[38;5;12mDefinition\u001b[0m<\u001b[0m\u001b[38;5;12mV\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "identifier",
                    "name": "definition"
                  },
                  "type": {
                    "repr": "Definition",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "Definition"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "GeneratedValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "GeneratedValue"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/OperationDriver.ts",
              "line": 207,
              "col": 2,
              "byteIndex": 7000
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          },
          {
            "name": "T",
            "constraint": {
              "repr": "GenerationType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationType"
              }
            }
          },
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "BaseOperationConfig",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationBase.ts",
        "line": 19,
        "col": 0,
        "byteIndex": 793
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for creating a base operation class.\n\nDefines the structure and behavior for operation generators, including\nidentifier generation, export path resolution, and enrichment schemas.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichments to apply to generated operations"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "jsDoc": {
                  "doc": "Unique identifier for the operation generator"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationBase.ts",
                  "line": 21,
                  "col": 2,
                  "byteIndex": 914
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "toIdentifier",
                "jsDoc": {
                  "doc": "Function to generate identifiers from operations"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationBase.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 985
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "Identifier",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Identifier"
                      }
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "operation",
                        "optional": false,
                        "tsType": {
                          "repr": "OasOperation",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasOperation"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toExportPath",
                "jsDoc": {
                  "doc": "Function to generate export paths from operations"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationBase.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 1100
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "operation",
                        "optional": false,
                        "tsType": {
                          "repr": "OasOperation",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasOperation"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentSchema",
                "jsDoc": {
                  "doc": "Optional function to provide enrichment validation schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationBase.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 1219
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "v.BaseSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          },
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          },
                          {
                            "repr": "v.BaseIssue",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                }
                              ],
                              "typeName": "v.BaseIssue"
                            }
                          }
                        ],
                        "typeName": "v.BaseSchema"
                      }
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "toOperationBase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationBase.ts",
        "line": 81,
        "col": 13,
        "byteIndex": 3242
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a base operation class constructor for generating type-safe operation artifacts.\n\nThis factory function creates a specialized OperationBase class that implements\nthe provided configuration for identifier generation, export paths, and\nenrichment handling. The resulting class can be instantiated to generate\noperation artifacts from OpenAPI operations.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichments to apply to generated operations"
          },
          {
            "kind": "param",
            "name": "config",
            "doc": "- Configuration defining the operation generation behavior"
          },
          {
            "kind": "return",
            "doc": "Constructor function for creating operation instances\n"
          },
          {
            "kind": "example",
            "doc": "Creating a TypeScript function generator\n```typescript\nimport { toOperationBase } from '@skmtc/core';\n\nconst TypeScriptOperationBase = toOperationBase({\n  id: 'typescript-functions',\n  toIdentifier: (operation) => new Identifier(camelCase(operation.operationId)),\n  toExportPath: (operation) => `./operations/${kebabCase(operation.operationId)}.ts`,\n  toEnrichmentSchema: () => v.object({\n    includeValidation: v.optional(v.boolean()),\n    asyncMode: v.optional(v.boolean())\n  })\n});\n\nclass TypeScriptOperationGenerator extends TypeScriptOperationBase {\n  generate() {\n    const enrichments = this.enrichments;\n    const functionCode = generateFunction(this.operation, {\n      async: enrichments?.asyncMode ?? true\n    });\n    this.register({ file: this.createFile(functionCode) });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Creating a React hook generator\n```typescript\nconst ReactHookOperationBase = toOperationBase({\n  id: 'react-hooks',\n  toIdentifier: (operation) => new Identifier(`use${pascalCase(operation.operationId)}`),\n  toExportPath: (operation) => `./hooks/${kebabCase(operation.operationId)}.hook.ts`\n});\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": true,
                "tsType": {
                  "repr": "OperationBase",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "OperationBase"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "args",
                    "optional": false,
                    "tsType": {
                      "repr": "OperationInsertableArgs",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          }
                        ],
                        "typeName": "OperationInsertableArgs"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "config",
                "optional": false,
                "tsType": {
                  "repr": "BaseOperationConfig",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "BaseOperationConfig"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "EnrichmentType",
                "default": {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ToOperationConfigArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
        "line": 23,
        "col": 0,
        "byteIndex": 939
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration arguments for creating operation generator entries.\n\nDefines the structure for operation generator configuration including transform functions,\nenrichment schemas, preview/mapping modules, and support validation.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichment data this operation can provide"
          },
          {
            "kind": "template",
            "name": "Acc",
            "doc": "- Accumulator type used during operation processing"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 1019
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "transform",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 1032
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "Acc",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Acc"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "acc",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "TransformOperationArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Acc",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Acc"
                                }
                              }
                            ],
                            "typeName": "TransformOperationArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentSchema",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 1111
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "v.GenericSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          }
                        ],
                        "typeName": "v.GenericSchema"
                      }
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "isSupported",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 1172
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "IsSupportedOperationConfigArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "EnrichmentType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "EnrichmentType"
                                }
                              }
                            ],
                            "typeName": "IsSupportedOperationConfigArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toPreviewModule",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1272
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "PreviewModule",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "PreviewModule"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "ToOperationPreviewModuleArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ToOperationPreviewModuleArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toMappingModule",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                  "line": 29,
                  "col": 2,
                  "byteIndex": 1364
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MappingModule",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MappingModule"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "ToOperationMappingArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ToOperationMappingArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentRequest",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1450
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "EnrichmentRequest",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "RequestedEnrichment",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "RequestedEnrichment"
                                }
                              }
                            ],
                            "typeName": "EnrichmentRequest"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "operation",
                        "optional": false,
                        "tsType": {
                          "repr": "OasOperation",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasOperation"
                          }
                        }
                      }
                    ],
                    "typeParams": [
                      {
                        "name": "RequestedEnrichment",
                        "constraint": {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          },
          {
            "name": "Acc",
            "default": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            }
          }
        ]
      }
    },
    {
      "name": "toOperationEntry",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
        "line": 63,
        "col": 13,
        "byteIndex": 2672
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a configured operation generator entry.\n\nTransforms operation configuration arguments into a standardized operation generator entry\nthat can be used within the SKMTC generation pipeline. Provides type-safe operation processing\nwith optional enrichment support and preview capabilities.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Type of enrichment data this operation provides"
          },
          {
            "kind": "template",
            "name": "Acc",
            "doc": "- Accumulator type used during operation processing"
          },
          {
            "kind": "param",
            "name": "config",
            "doc": "- Configuration object defining operation behavior"
          },
          {
            "kind": "return",
            "doc": "Configured operation generator entry ready for pipeline integration\n"
          },
          {
            "kind": "example",
            "doc": "Basic operation entry\n```typescript\nimport { toOperationEntry } from '@skmtc/core';\n\nconst operationEntry = toOperationEntry({\n  id: 'my-operation-generator',\n  transform: ({ context, operation, acc }) => {\n    // Transform operation into desired format\n    return processedOperation;\n  },\n  isSupported: ({ operation }) => {\n    return operation.method === 'POST';\n  }\n});\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "id",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 72,
                      "col": 2,
                      "byteIndex": 2902
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "type",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 73,
                      "col": 2,
                      "byteIndex": 2916
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "operation",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "operation"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "transform",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 74,
                      "col": 2,
                      "byteIndex": 2937
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Acc",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Acc"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "operation",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "acc",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "TransformOperationArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "Acc",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "Acc"
                                    }
                                  }
                                ],
                                "typeName": "TransformOperationArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toEnrichmentSchema",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 75,
                      "col": 2,
                      "byteIndex": 3017
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "v.GenericSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "EnrichmentType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "EnrichmentType"
                                }
                              }
                            ],
                            "typeName": "v.GenericSchema"
                          }
                        },
                        "params": [],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "isSupported",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 76,
                      "col": 2,
                      "byteIndex": 3079
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "operation",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "IsSupportedArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "IsSupportedArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toPreviewModule",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 77,
                      "col": 2,
                      "byteIndex": 3148
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "PreviewModule",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "PreviewModule"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "operation",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "ToOperationPreviewModuleArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ToOperationPreviewModuleArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toMappingModule",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 78,
                      "col": 2,
                      "byteIndex": 3241
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "MappingModule",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "MappingModule"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "operation",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "ToOperationMappingArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "ToOperationMappingArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toEnrichmentRequest",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/toOperationEntry.ts",
                      "line": 79,
                      "col": 2,
                      "byteIndex": 3328
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "EnrichmentRequest",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "RequestedEnrichment",
                                    "kind": "typeRef",
                                    "typeRef": {
                                      "typeParams": null,
                                      "typeName": "RequestedEnrichment"
                                    }
                                  }
                                ],
                                "typeName": "EnrichmentRequest"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "operation",
                            "optional": false,
                            "tsType": {
                              "repr": "OasOperation",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasOperation"
                              }
                            }
                          }
                        ],
                        "typeParams": [
                          {
                            "name": "RequestedEnrichment",
                            "constraint": {
                              "repr": "EnrichmentType",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "EnrichmentType"
                              }
                            }
                          }
                        ]
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "id",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "transform",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toEnrichmentSchema",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "isSupported",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toPreviewModule",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toMappingModule",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toEnrichmentRequest",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToOperationConfigArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      },
                      {
                        "repr": "Acc",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Acc"
                        }
                      }
                    ],
                    "typeName": "ToOperationConfigArgs"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "EnrichmentType",
                "default": {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              },
              {
                "name": "Acc",
                "default": {
                  "repr": "void",
                  "kind": "keyword",
                  "keyword": "void"
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OperationInsertableArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 13,
        "col": 0,
        "byteIndex": 590
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments passed to operation insertable constructors.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment data type for additional metadata"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 660
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "settings",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 687
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ContentSettings",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      }
                    ],
                    "typeName": "ContentSettings"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 731
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "TransformOperationArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 24,
        "col": 0,
        "byteIndex": 903
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments passed to operation transformation functions.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Acc",
            "doc": "- Accumulator type for collecting transformation results"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 949
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 976
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "acc",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 1002
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Acc",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Acc"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Acc"
          }
        ]
      }
    },
    {
      "name": "WithTransformOperation",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 36,
        "col": 0,
        "byteIndex": 1225
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Interface for objects that provide operation transformation capabilities.\n\nUsed by generator configurations to transform operation definitions\nduring the code generation process."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "transformOperation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1266
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "void",
                      "kind": "keyword",
                      "keyword": "void"
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "operation",
                        "optional": false,
                        "tsType": {
                          "repr": "OasOperation",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasOperation"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "IsSupportedOperationConfigArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 45,
        "col": 0,
        "byteIndex": 1505
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for checking if an operation is supported with enrichment configuration.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment data type for additional metadata"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1582
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 47,
                  "col": 2,
                  "byteIndex": 1609
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "enrichments",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 48,
                  "col": 2,
                  "byteIndex": 1635
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "EnrichmentType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "EnrichmentType"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "IsSupportedOperationArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 54,
        "col": 0,
        "byteIndex": 1750
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for checking if an operation is supported for code generation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 55,
                  "col": 2,
                  "byteIndex": 1793
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 56,
                  "col": 2,
                  "byteIndex": 1820
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OperationToEnrichmentsArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 62,
        "col": 0,
        "byteIndex": 1915
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for generating enrichment data for operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 63,
                  "col": 2,
                  "byteIndex": 1960
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 64,
                  "col": 2,
                  "byteIndex": 1986
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ToOperationPreviewModuleArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 73,
        "col": 0,
        "byteIndex": 2182
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for generating operation preview modules.\n\nPreview modules provide quick insights into generated operations\nwithout full code generation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 74,
                  "col": 2,
                  "byteIndex": 2229
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 75,
                  "col": 2,
                  "byteIndex": 2256
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ToOperationMappingArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 84,
        "col": 0,
        "byteIndex": 2483
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for generating operation mapping information.\n\nMappings track relationships between OAS operations and generated code,\nenabling cross-references and dependency analysis."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 85,
                  "col": 2,
                  "byteIndex": 2524
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 86,
                  "col": 2,
                  "byteIndex": 2551
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OperationInsertable",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 98,
        "col": 0,
        "byteIndex": 2965
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration object for insertable operation generators.\n\nDefines the contract for operation generator classes that can be inserted\ninto the generation context to produce type-safe operation definitions.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- Generated value type produced by the operation generator"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment data type for additional metadata"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "intersection",
          "intersection": [
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "prototype",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                      "line": 98,
                      "col": 67,
                      "byteIndex": 3032
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [
                  {
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "settings",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "OperationInsertableArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "EnrichmentType",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "EnrichmentType"
                                }
                              }
                            ],
                            "typeName": "OperationInsertableArgs"
                          }
                        }
                      }
                    ],
                    "returnType": {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    },
                    "typeParams": [],
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                      "line": 99,
                      "col": 2,
                      "byteIndex": 3053
                    }
                  }
                ],
                "methods": [],
                "properties": [
                  {
                    "name": "id",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                      "line": 100,
                      "col": 2,
                      "byteIndex": 3138
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "type",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                      "line": 101,
                      "col": 2,
                      "byteIndex": 3151
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "operation",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "operation"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toIdentifier",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                      "line": 102,
                      "col": 2,
                      "byteIndex": 3171
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "Identifier",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Identifier"
                          }
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "operation",
                            "optional": false,
                            "tsType": {
                              "repr": "OasOperation",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasOperation"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toExportPath",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                      "line": 103,
                      "col": 2,
                      "byteIndex": 3227
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        "params": [
                          {
                            "kind": "identifier",
                            "name": "operation",
                            "optional": false,
                            "tsType": {
                              "repr": "OasOperation",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasOperation"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "toEnrichments",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                      "line": 104,
                      "col": 2,
                      "byteIndex": 3279
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "fnOrConstructor",
                      "fnOrConstructor": {
                        "constructor": false,
                        "tsType": {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        },
                        "params": [
                          {
                            "kind": "object",
                            "props": [
                              {
                                "kind": "assign",
                                "key": "operation",
                                "value": null
                              },
                              {
                                "kind": "assign",
                                "key": "context",
                                "value": null
                              }
                            ],
                            "optional": false,
                            "tsType": {
                              "repr": "OperationToEnrichmentsArgs",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OperationToEnrichmentsArgs"
                              }
                            }
                          }
                        ],
                        "typeParams": []
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            {
              "repr": "Function",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Function"
              }
            }
          ]
        },
        "typeParams": [
          {
            "name": "V"
          },
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "IsSupportedArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 111,
        "col": 0,
        "byteIndex": 3490
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for checking if an operation is supported for generation."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 112,
                  "col": 2,
                  "byteIndex": 3524
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "operation",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 113,
                  "col": 2,
                  "byteIndex": 3551
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OperationConfig",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
        "line": 124,
        "col": 0,
        "byteIndex": 3872
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration object for operation generators.\n\nDefines the behavior and capabilities of operation generators including\nsupport detection, transformation logic, and enrichment handling.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional enrichment data type for additional metadata"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 125,
                  "col": 2,
                  "byteIndex": 3934
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 126,
                  "col": 2,
                  "byteIndex": 3947
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "operation",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "operation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "transform",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 127,
                  "col": 2,
                  "byteIndex": 3967
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "Acc",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Acc"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "acc",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "TransformOperationArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Acc",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Acc"
                                }
                              }
                            ],
                            "typeName": "TransformOperationArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": [
                      {
                        "name": "Acc",
                        "default": {
                          "repr": "void",
                          "kind": "keyword",
                          "keyword": "void"
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentSchema",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 128,
                  "col": 2,
                  "byteIndex": 4058
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "v.GenericSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "EnrichmentType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "EnrichmentType"
                            }
                          }
                        ],
                        "typeName": "v.GenericSchema"
                      }
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "isSupported",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 129,
                  "col": 2,
                  "byteIndex": 4119
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "IsSupportedArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "IsSupportedArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toPreviewModule",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 130,
                  "col": 2,
                  "byteIndex": 4187
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "PreviewModule",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "PreviewModule"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "ToOperationPreviewModuleArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ToOperationPreviewModuleArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toMappingModule",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 131,
                  "col": 2,
                  "byteIndex": 4279
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "MappingModule",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "MappingModule"
                      }
                    },
                    "params": [
                      {
                        "kind": "object",
                        "props": [
                          {
                            "kind": "assign",
                            "key": "context",
                            "value": null
                          },
                          {
                            "kind": "assign",
                            "key": "operation",
                            "value": null
                          }
                        ],
                        "optional": false,
                        "tsType": {
                          "repr": "ToOperationMappingArgs",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "ToOperationMappingArgs"
                          }
                        }
                      }
                    ],
                    "typeParams": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "toEnrichmentRequest",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/operation/types.ts",
                  "line": 132,
                  "col": 2,
                  "byteIndex": 4365
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "EnrichmentRequest",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "RequestedEnrichment",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "RequestedEnrichment"
                                }
                              }
                            ],
                            "typeName": "EnrichmentRequest"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "params": [
                      {
                        "kind": "identifier",
                        "name": "operation",
                        "optional": false,
                        "tsType": {
                          "repr": "OasOperation",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasOperation"
                          }
                        }
                      }
                    ],
                    "typeParams": [
                      {
                        "name": "RequestedEnrichment",
                        "constraint": {
                          "repr": "EnrichmentType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "EnrichmentType"
                          }
                        }
                      }
                    ]
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "Stringable",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Stringable.ts",
        "line": 76,
        "col": 0,
        "byteIndex": 2317
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents any object that can be converted to a string representation.\n\nThe `Stringable` interface is a fundamental type used throughout the SKMTC DSL\nsystem to ensure that objects can be converted to strings for code generation.\nThis interface matches JavaScript's built-in `toString()` contract and is used\nextensively by the {@link List} class and other string-building utilities.\n\n## Usage in SKMTC\n\nThis type is used as a constraint in generic classes and functions that need\nto output string representations. It allows for type-safe string building\nwhile accommodating both primitive types and custom objects.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Built-in types are stringable\n```typescript\nimport type { Stringable } from '@skmtc/core';\n\n// All these types implement Stringable\nconst str: Stringable = 'hello';        // string\nconst num: Stringable = 42;             // number\nconst bool: Stringable = true;          // boolean\nconst obj: Stringable = { toString: () => 'custom' }; // custom object\n```\n"
          },
          {
            "kind": "example",
            "doc": "Custom classes implementing Stringable\n```typescript\nclass CodeBlock implements Stringable {\n  constructor(private code: string) {}\n\n  toString(): string {\n    return `{\\n  ${this.code}\\n}`;\n  }\n}\n\nconst block = new CodeBlock('console.log(\"hello\");');\nconsole.log(block.toString());\n// {\n//   console.log(\"hello\");\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using with List class\n```typescript\nimport { List } from '@skmtc/core';\n\n// List accepts any Stringable items\nconst stringables: Stringable[] = [\n  'string literal',\n  42,\n  true,\n  { toString: () => 'custom object' },\n  new CodeBlock('return value;')\n];\n\nconst list = new List(stringables);\nconsole.log(list.toString());\n// string literal, 42, true, custom object, {\n//   return value;\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Type constraints in generics\n```typescript\nfunction joinWithCommas<T extends Stringable>(items: T[]): string {\n  return items.map(item => item.toString()).join(', ');\n}\n\nconst result = joinWithCommas([1, 2, 3]); // \"1, 2, 3\"\nconst identifiers = joinWithCommas([\n  Identifier.createVariable('user'),\n  Identifier.createType('User')\n]); // \"user, User\"\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "toString",
                "jsDoc": {
                  "doc": "Converts the object to its string representation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/dsl/Stringable.ts",
                  "line": 78,
                  "col": 2,
                  "byteIndex": 2404
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "fnOrConstructor",
                  "fnOrConstructor": {
                    "constructor": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "params": [],
                    "typeParams": []
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "collateExamples",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/collateExamples.ts",
        "line": 161,
        "col": 13,
        "byteIndex": 5090
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Recursively collates and builds example values from OpenAPI schemas.\n\nThis function traverses OpenAPI schema structures and generates comprehensive\nexample values based on the schema definitions and any explicit examples provided.\nIt handles complex nested structures including objects, arrays, unions, and\nreferences while preventing infinite recursion through depth limiting.\n\nThe function prioritizes explicit examples when available and falls back to\ngenerating examples from nested schemas. It's particularly useful for creating\nrealistic test data, API documentation examples, and mock responses.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Configuration for example collation"
          },
          {
            "kind": "param",
            "name": "args.objectSchema",
            "doc": "- The schema to extract examples from"
          },
          {
            "kind": "param",
            "name": "args.depth",
            "doc": "- Current recursion depth (prevents infinite loops)"
          },
          {
            "kind": "return",
            "doc": "Collated example value matching the schema structure, or undefined if no examples\n"
          },
          {
            "kind": "throws",
            "type": "Error",
            "doc": "When recursion depth exceeds 15 levels (prevents stack overflow)\n"
          },
          {
            "kind": "example",
            "doc": "Basic schema examples\n```typescript\nimport { collateExamples } from '@skmtc/core';\n\n// String schema with example\nconst stringSchema = new OasString({ example: 'john.doe@example.com' });\nconst example = collateExamples({ objectSchema: stringSchema, depth: 0 });\nconsole.log(example); // 'john.doe@example.com'\n\n// Number schema with example\nconst numberSchema = new OasNumber({ example: 42 });\nconst numExample = collateExamples({ objectSchema: numberSchema, depth: 0 });\nconsole.log(numExample); // 42\n```\n"
          },
          {
            "kind": "example",
            "doc": "Object schema examples\n```typescript\n// Object schema with nested properties\nconst userSchema = new OasObject({\n  properties: {\n    id: new OasInteger({ example: 123 }),\n    name: new OasString({ example: 'John Doe' }),\n    email: new OasString({ example: 'john@example.com' }),\n    age: new OasInteger({ example: 30 })\n  }\n});\n\nconst userExample = collateExamples({ objectSchema: userSchema, depth: 0 });\nconsole.log(userExample);\n// {\n//   id: 123,\n//   name: 'John Doe',\n//   email: 'john@example.com',\n//   age: 30\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Array schema examples\n```typescript\n// Array of objects\nconst usersArraySchema = new OasArray({\n  items: new OasObject({\n    properties: {\n      id: new OasInteger({ example: 1 }),\n      name: new OasString({ example: 'Jane Smith' })\n    }\n  })\n});\n\nconst arrayExample = collateExamples({ objectSchema: usersArraySchema, depth: 0 });\nconsole.log(arrayExample);\n// [\n//   {\n//     id: 1,\n//     name: 'Jane Smith'\n//   }\n// ]\n```\n"
          },
          {
            "kind": "example",
            "doc": "Union schema examples\n```typescript\n// Union of string and number\nconst unionSchema = new OasUnion({\n  members: [\n    new OasString({ example: 'text-value' }),\n    new OasNumber({ example: 99 })\n  ]\n});\n\nconst unionExample = collateExamples({ objectSchema: unionSchema, depth: 0 });\nconsole.log(unionExample); // 'text-value' (first member with example)\n```\n"
          },
          {
            "kind": "example",
            "doc": "Reference resolution\n```typescript\n// Schema with reference to another schema\nconst addressRef = new OasRef({\n  $ref: '#/components/schemas/Address',\n  resolve: () => new OasObject({\n    properties: {\n      street: new OasString({ example: '123 Main St' }),\n      city: new OasString({ example: 'Springfield' })\n    }\n  })\n});\n\nconst refExample = collateExamples({ objectSchema: addressRef, depth: 0 });\nconsole.log(refExample);\n// {\n//   street: '123 Main St',\n//   city: 'Springfield'\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Depth limiting and error handling\n```typescript\n// Deep nesting detection\ntry {\n  const deepExample = collateExamples({ objectSchema: someSchema, depth: 16 });\n} catch (error) {\n  console.error('Depth limit exceeded:', error.message); // 'Depth limit reached'\n}\n\n// Handling missing schemas\nconst emptyExample = collateExamples({ objectSchema: undefined, depth: 0 });\nconsole.log(emptyExample); // undefined\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in API documentation generation\n```typescript\nclass ApiDocGenerator {\n  generateExampleResponse(responseSchema: OasSchema) {\n    const example = collateExamples({ objectSchema: responseSchema, depth: 0 });\n\n    if (example) {\n      return {\n        description: 'Example response',\n        value: example\n      };\n    }\n\n    return { description: 'No example available' };\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "unknown",
              "kind": "keyword",
              "keyword": "unknown"
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "objectSchema",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "depth",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CollatedExampleArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CollatedExampleArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "formatNumber",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/formatNumber.ts",
        "line": 96,
        "col": 13,
        "byteIndex": 3044
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Formats a number using locale-specific formatting without decimal places.\n\nThis utility function formats numbers according to locale conventions,\nadding thousand separators and other locale-specific number formatting\nwhile ensuring the output contains no fractional digits. It's useful\nfor displaying counts, statistics, or other whole numbers in a\nhuman-readable format.\n",
        "tags": [
          {
            "kind": "param",
            "name": "value",
            "doc": "- The number to format"
          },
          {
            "kind": "param",
            "name": "locales",
            "doc": "- The locale(s) to use for formatting (defaults to 'en-US')"
          },
          {
            "kind": "return",
            "doc": "The formatted number as a string with locale-appropriate thousand separators\n"
          },
          {
            "kind": "example",
            "doc": "Basic formatting with default locale (en-US)\n```typescript\nimport { formatNumber } from '@skmtc/core';\n\nconsole.log(formatNumber(1234));     // '1,234'\nconsole.log(formatNumber(1234567));  // '1,234,567'\nconsole.log(formatNumber(42));       // '42'\nconsole.log(formatNumber(0));        // '0'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Formatting with different locales\n```typescript\nconst bigNumber = 1234567;\n\nconsole.log(formatNumber(bigNumber, 'en-US')); // '1,234,567'\nconsole.log(formatNumber(bigNumber, 'de-DE')); // '1.234.567'\nconsole.log(formatNumber(bigNumber, 'fr-FR')); // '1 234 567'\nconsole.log(formatNumber(bigNumber, 'en-IN')); // '12,34,567'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Formatting decimal numbers (fractional part removed)\n```typescript\n// The function always rounds to whole numbers\nconsole.log(formatNumber(1234.56));    // '1,235' (rounded)\nconsole.log(formatNumber(999.99));     // '1,000' (rounded)\nconsole.log(formatNumber(1000.1));     // '1,000' (rounded)\nconsole.log(formatNumber(1000.0));     // '1,000'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in reporting and statistics\n```typescript\nclass StatsReporter {\n  generateReport(stats: {\n    totalFiles: number;\n    linesGenerated: number;\n    errors: number;\n  }) {\n    return `\nGeneration Report:\n- Files generated: ${formatNumber(stats.totalFiles)}\n- Lines of code: ${formatNumber(stats.linesGenerated)}\n- Errors encountered: ${formatNumber(stats.errors)}\n    `.trim();\n  }\n}\n\nconst reporter = new StatsReporter();\nconst report = reporter.generateReport({\n  totalFiles: 1234,\n  linesGenerated: 567890,\n  errors: 5\n});\n\nconsole.log(report);\n// Generation Report:\n// - Files generated: 1,234\n// - Lines of code: 567,890\n// - Errors encountered: 5\n```\n"
          },
          {
            "kind": "example",
            "doc": "International number formatting\n```typescript\nconst count = 50000;\n\n// Different regions format numbers differently\nconst formats = [\n  { locale: 'en-US', label: 'US English' },\n  { locale: 'de-DE', label: 'German' },\n  { locale: 'fr-FR', label: 'French' },\n  { locale: 'ja-JP', label: 'Japanese' }\n];\n\nformats.forEach(({ locale, label }) => {\n  console.log(`${label}: ${formatNumber(count, locale)}`);\n});\n\n// US English: 50,000\n// German: 50.000\n// French: 50 000\n// Japanese: 50,000\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "locales",
                  "optional": false,
                  "tsType": {
                    "repr": "Intl.LocalesArgument",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Intl.LocalesArgument"
                    }
                  }
                },
                "right": "en-US",
                "tsType": null
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "GenerationStats",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
        "line": 19,
        "col": 0,
        "byteIndex": 632
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Comprehensive generation statistics extracted from build artifacts and manifest."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "tokens",
                "jsDoc": {
                  "doc": "Total number of GPT tokens in generated content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
                  "line": 21,
                  "col": 2,
                  "byteIndex": 723
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "lines",
                "jsDoc": {
                  "doc": "Total number of lines generated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 781
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "totalTime",
                "jsDoc": {
                  "doc": "Total generation time in milliseconds"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 844
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "errors",
                "jsDoc": {
                  "doc": "Error paths organized as nested arrays"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 912
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "files",
                "jsDoc": {
                  "doc": "Total number of generated files"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
                  "line": 29,
                  "col": 2,
                  "byteIndex": 974
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toGenerationStats",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
        "line": 134,
        "col": 13,
        "byteIndex": 4431
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Generates comprehensive statistics about the code generation process.\n\nThis function analyzes the generation manifest and produced artifacts to create\ndetailed statistics including token counts, lines of code, timing information,\nerror tracking, and file counts. It's used for performance monitoring, debugging,\nand reporting on generation runs.\n\nThe function combines multiple analysis methods to provide a complete picture\nof the generation process, including tokenization analysis for cost estimation,\nerror path extraction for debugging, and timing analysis for performance optimization.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Generation analysis configuration"
          },
          {
            "kind": "param",
            "name": "args.manifest",
            "doc": "- The generation manifest with metadata and results"
          },
          {
            "kind": "param",
            "name": "args.artifacts",
            "doc": "- Map of file paths to generated content"
          },
          {
            "kind": "return",
            "doc": "Comprehensive generation statistics object\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { toGenerationStats } from '@skmtc/core';\n\nconst stats = toGenerationStats({\n  manifest: {\n    startAt: 1672531200000,\n    endAt: 1672531245000,\n    files: {\n      './models.ts': { lines: 150, characters: 4500 },\n      './types.ts': { lines: 80, characters: 2100 }\n    },\n    results: { }\n  },\n  artifacts: {\n    './models.ts': 'export interface User { id: string; name: string; }',\n    './types.ts': 'export type Status = \"active\" | \"inactive\";'\n  }\n});\n\nconsole.log(stats);\n// {\n//   tokens: 250,\n//   lines: 230,\n//   totalTime: 45000,\n//   errors: [],\n//   files: 2\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Performance monitoring\n```typescript\nclass GenerationMonitor {\n  analyzeGeneration(manifest: ManifestContent, artifacts: Record<string, string>) {\n    const stats = toGenerationStats({ manifest, artifacts });\n\n    console.log(`Generation completed in ${stats.totalTime}ms`);\n    console.log(`Generated ${stats.files} files with ${stats.lines} lines`);\n    console.log(`Token usage: ${stats.tokens} tokens`);\n\n    if (stats.errors.length > 0) {\n      console.warn(`Found ${stats.errors.length} errors:`);\n      stats.errors.forEach((errorPath, index) => {\n        console.warn(`  ${index + 1}. ${errorPath.join(' -> ')}`);\n      });\n    }\n\n    return stats;\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Cost estimation\n```typescript\nfunction estimateGenerationCost(stats: GenerationStats): number {\n  const tokensPerDollar = 1000000; // Example rate\n  const estimatedCost = stats.tokens / tokensPerDollar;\n\n  console.log(`Estimated cost: $${estimatedCost.toFixed(4)}`);\n  console.log(`Efficiency: ${stats.lines / stats.tokens} lines per token`);\n\n  return estimatedCost;\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Build reporting\n```typescript\nfunction generateBuildReport(stats: GenerationStats): string {\n  const efficiency = stats.totalTime / stats.files;\n  const successRate = ((stats.files - stats.errors.length) / stats.files * 100).toFixed(1);\n\n  return `\nBuild Report:\n-----------\nFiles Generated: ${stats.files}\nTotal Lines: ${stats.lines.toLocaleString()}\nToken Count: ${stats.tokens.toLocaleString()}\nGeneration Time: ${(stats.totalTime / 1000).toFixed(2)}s\nAverage per File: ${efficiency.toFixed(0)}ms\nSuccess Rate: ${successRate}%\nErrors: ${stats.errors.length}\n  `.trim();\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "GenerationStats",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationStats"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "manifest",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "artifacts",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "GenerationStatsArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerationStatsArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toManifestTokens",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
        "line": 172,
        "col": 13,
        "byteIndex": 5622
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Calculates the total number of GPT tokens in all generated artifacts.\n\nThis function uses GPT tokenization to count the total number of tokens\nacross all generated code artifacts. This is useful for cost estimation\nwhen using token-based pricing models and for understanding the size\nand complexity of generated content.\n",
        "tags": [
          {
            "kind": "param",
            "name": "artifacts",
            "doc": "- Map of file paths to generated content strings"
          },
          {
            "kind": "return",
            "doc": "Total number of GPT tokens across all artifacts\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst artifacts = {\n  './models.ts': 'export interface User { id: string; name: string; }',\n  './types.ts': 'export type Status = \"active\" | \"inactive\";'\n};\n\nconst tokens = toManifestTokens(artifacts);\nconsole.log(tokens); // e.g., 24 tokens\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "artifacts",
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toManifestLines",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
        "line": 205,
        "col": 13,
        "byteIndex": 6625
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Calculates the total number of lines across all generated files.\n\nThis function sums up the line counts from the manifest's file metadata\nto provide the total lines of code generated. This metric is useful\nfor understanding the scale of code generation and tracking productivity.\n",
        "tags": [
          {
            "kind": "param",
            "name": "manifest",
            "doc": "- The generation manifest containing file metadata"
          },
          {
            "kind": "return",
            "doc": "Total number of lines across all generated files\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst manifest = {\n  files: {\n    './models.ts': { lines: 150, characters: 4500 },\n    './types.ts': { lines: 80, characters: 2100 }\n  },\n  // ... other manifest properties\n};\n\nconst lines = toManifestLines(manifest);\nconsole.log(lines); // 230\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "manifest",
                "optional": false,
                "tsType": {
                  "repr": "ManifestContent",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ManifestContent"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toTotalTime",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
        "line": 237,
        "col": 13,
        "byteIndex": 7622
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Calculates the total generation time from the manifest timestamps.\n\nThis function computes the duration of the generation process by\ncalculating the difference between the end and start timestamps\nrecorded in the manifest. The result is in milliseconds.\n",
        "tags": [
          {
            "kind": "param",
            "name": "manifest",
            "doc": "- The generation manifest with timing information"
          },
          {
            "kind": "return",
            "doc": "Total generation time in milliseconds\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst manifest = {\n  startAt: 1672531200000, // January 1, 2023 00:00:00 GMT\n  endAt: 1672531245000,   // January 1, 2023 00:00:45 GMT\n  // ... other manifest properties\n};\n\nconst duration = toTotalTime(manifest);\nconsole.log(duration); // 45000 (45 seconds)\nconsole.log(`${duration / 1000}s`); // \"45s\"\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "manifest",
                "optional": false,
                "tsType": {
                  "repr": "ManifestContent",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ManifestContent"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toManifestErrors",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
        "line": 274,
        "col": 13,
        "byteIndex": 8730
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Extracts and organizes error paths from the manifest results.\n\nThis function recursively traverses the results structure in the manifest\nto identify all error conditions and their associated file paths. Errors\nare returned as arrays of path segments, making it easy to understand\nthe location and context of each error.\n",
        "tags": [
          {
            "kind": "param",
            "name": "results",
            "doc": "- The results object from the generation manifest"
          },
          {
            "kind": "return",
            "doc": "Array of error paths, each represented as an array of path segments\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst results = {\n  'models.ts': {\n    'User': 'success',\n    'Product': 'error'\n  },\n  'types.ts': 'success'\n};\n\nconst errors = toManifestErrors(results);\nconsole.log(errors); // [['models.ts', 'Product']]\n\n// Display errors in readable format\nerrors.forEach(errorPath => {\n  console.log(`Error at: ${errorPath.join(' -> ')}`);\n});\n// Output: \"Error at: models.ts -> Product\"\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "results",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "ManifestContent",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ManifestContent"
                      }
                    },
                    "indexType": {
                      "repr": "results",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "results"
                      }
                    }
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "checkResult",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/generationStats.ts",
        "line": 360,
        "col": 13,
        "byteIndex": 11133
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Recursively checks results structure for error conditions and collects error paths.\n\nThis function traverses the complex nested structure of generation results,\nidentifying error conditions at any level and recording their full path context.\nIt handles arrays, objects, strings, and null values, building a comprehensive\nmap of all errors that occurred during generation.\n\nThe function mutates the errors array parameter, accumulating error paths\nas it traverses the results structure. This approach is used for performance\nwhen processing large result sets.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Arguments for result checking"
          },
          {
            "kind": "param",
            "name": "args.path",
            "doc": "- Current path segments being traversed"
          },
          {
            "kind": "param",
            "name": "args.result",
            "doc": "- The result value to check for errors"
          },
          {
            "kind": "param",
            "name": "args.errors",
            "doc": "- Array to accumulate error paths (mutated by function)\n"
          },
          {
            "kind": "example",
            "doc": "Simple error detection\n```typescript\nconst errors: string[][] = [];\n\ncheckResult({\n  path: ['models.ts'],\n  result: 'error',\n  errors\n});\n\nconsole.log(errors); // [['models.ts']]\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nested structure error detection\n```typescript\nconst errors: string[][] = [];\nconst nestedResult = {\n  'User': 'success',\n  'Product': {\n    'validation': 'error',\n    'generation': 'success'\n  }\n};\n\ncheckResult({\n  path: ['models.ts'],\n  result: nestedResult,\n  errors\n});\n\nconsole.log(errors); // [['models.ts', 'Product', 'validation']]\n```\n"
          },
          {
            "kind": "example",
            "doc": "Array handling\n```typescript\nconst errors: string[][] = [];\nconst arrayResult = ['success', null, 'error', 'success'];\n\ncheckResult({\n  path: ['batch'],\n  result: arrayResult,\n  errors\n});\n\nconsole.log(errors); // [['batch']] - for the 'error' item\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "void",
              "kind": "keyword",
              "keyword": "void"
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "path",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "result",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "errors",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CheckResultArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CheckResultArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isEmpty",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/isEmpty.ts",
        "line": 63,
        "col": 13,
        "byteIndex": 1921
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Checks whether a record/object is empty (has no enumerable properties).\n\nThis utility function determines if an object contains any enumerable properties\nby checking the length of its keys array. It's commonly used throughout the\nSKMTC codebase to validate whether generated objects, configurations, or\nother data structures contain meaningful content.\n",
        "tags": [
          {
            "kind": "param",
            "name": "value",
            "doc": "- The record/object to check for emptiness"
          },
          {
            "kind": "return",
            "doc": "`true` if the object has no enumerable properties, `false` otherwise\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { isEmpty } from '@skmtc/core';\n\nconsole.log(isEmpty({})); // true\nconsole.log(isEmpty({ name: 'John' })); // false\nconsole.log(isEmpty({ a: undefined })); // false (undefined is still a property)\n```\n"
          },
          {
            "kind": "example",
            "doc": "In conditional logic\n```typescript\nconst userPreferences = loadUserPreferences();\n\nif (isEmpty(userPreferences)) {\n  // Apply default settings\n  applyDefaults();\n} else {\n  // Use user's custom settings\n  applyUserSettings(userPreferences);\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Filtering collections\n```typescript\nconst configurations = [\n  { api: 'v1', settings: {} },\n  { api: 'v2', settings: { timeout: 5000 } },\n  { api: 'v3', settings: {} }\n];\n\nconst validConfigs = configurations.filter(config => !isEmpty(config.settings));\nconsole.log(validConfigs); // [{ api: 'v2', settings: { timeout: 5000 } }]\n```\n"
          },
          {
            "kind": "example",
            "doc": "Code generation usage\n```typescript\nclass Generator {\n  generateInterface(properties: Record<string, string>) {\n    if (isEmpty(properties)) {\n      return 'interface EmptyInterface {}';\n    }\n\n    const props = Object.entries(properties)\n      .map(([name, type]) => `  ${name}: ${type};`)\n      .join('\\n');\n\n    return `interface GeneratedInterface {\\n${props}\\n}`;\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "object",
                  "kind": "keyword",
                  "keyword": "object"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isImported",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/isImported.ts",
        "line": 83,
        "col": 13,
        "byteIndex": 2831
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Determines whether two file paths represent different locations (import required).\n\nThis utility function normalizes two file paths and compares them to determine\nif they represent different files. It's used throughout the SKMTC system to\ndecide when import statements are needed - if two paths are different, an\nimport is required to access symbols from one file in another.\n\nThe function handles path normalization to ensure consistent comparisons\nacross different operating systems and path formats (handling './' vs absolute\npaths, different separators, etc.).\n",
        "tags": [
          {
            "kind": "param",
            "name": "pathOne",
            "doc": "- The first file path to compare"
          },
          {
            "kind": "param",
            "name": "pathTwo",
            "doc": "- The second file path to compare"
          },
          {
            "kind": "return",
            "doc": "`true` if the paths are different (import needed), `false` if they're the same file\n"
          },
          {
            "kind": "example",
            "doc": "Basic path comparison\n```typescript\nimport { isImported } from '@skmtc/core';\n\n// Same file, no import needed\nconsole.log(isImported('./src/user.ts', './src/user.ts')); // false\n\n// Different files, import needed\nconsole.log(isImported('./src/user.ts', './src/product.ts')); // true\n```\n"
          },
          {
            "kind": "example",
            "doc": "Path normalization handling\n```typescript\n// These all represent the same file after normalization\nconsole.log(isImported('./src/user.ts', 'src/user.ts')); // false\nconsole.log(isImported('src/./user.ts', 'src/user.ts')); // false\nconsole.log(isImported('src/models/../user.ts', 'src/user.ts')); // false\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in import decision logic\n```typescript\nclass FileGenerator {\n  addImportIfNeeded(\n    sourceFile: string,\n    targetFile: string,\n    importName: string\n  ) {\n    if (isImported(sourceFile, targetFile)) {\n      // Files are different, add import\n      this.addImport(sourceFile, targetFile, importName);\n      console.log(`Added import: ${importName} from ${targetFile}`);\n    } else {\n      // Same file, no import needed\n      console.log(`No import needed - same file: ${sourceFile}`);\n    }\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Cross-platform path handling\n```typescript\n// Works consistently across platforms\nconst windowsPath = 'src\\\\models\\\\user.ts';\nconst unixPath = 'src/models/user.ts';\n\nconsole.log(isImported(windowsPath, unixPath)); // false (same file)\n```\n"
          },
          {
            "kind": "example",
            "doc": "In generator context\n```typescript\nclass ModelGenerator {\n  generateModel(modelPath: string, referencePath: string) {\n    const definition = this.createModelDefinition();\n\n    if (isImported(modelPath, referencePath)) {\n      // Need to import the referenced model\n      definition.addImport(referencePath, 'ReferencedModel');\n    }\n\n    return definition;\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "pathOne",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "pathTwo",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toEndpointType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/naming.ts",
        "line": 22,
        "col": 13,
        "byteIndex": 748
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Determines the endpoint type based on HTTP method.\n",
        "tags": [
          {
            "kind": "param",
            "name": "operation",
            "doc": "- The OpenAPI operation to analyze"
          },
          {
            "kind": "return",
            "doc": "'query' for GET operations, 'mutation' for all others\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst getOp = new OasOperation({ method: 'get', path: '/users' });\nconsole.log(toEndpointType(getOp)); // 'query'\n\nconst postOp = new OasOperation({ method: 'post', path: '/users' });\nconsole.log(toEndpointType(postOp)); // 'mutation'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "query",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "query"
                  }
                },
                {
                  "repr": "mutation",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "mutation"
                  }
                }
              ]
            },
            "params": [
              {
                "kind": "identifier",
                "name": "operation",
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toEndpointName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/naming.ts",
        "line": 38,
        "col": 13,
        "byteIndex": 1244
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Generates endpoint name in the `camelCase{method}Api{path}` format.\n",
        "tags": [
          {
            "kind": "param",
            "name": "operation",
            "doc": "- The OpenAPI operation"
          },
          {
            "kind": "return",
            "doc": "Camel-cased endpoint name\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst op = new OasOperation({ method: 'post', path: '/users/{id}/profile' });\nconsole.log(toEndpointName(op)); // 'createApiUsersIdProfile'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "operation",
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toResponseName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/naming.ts",
        "line": 58,
        "col": 13,
        "byteIndex": 1759
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Generates response type name for an operation.\n",
        "tags": [
          {
            "kind": "param",
            "name": "operation",
            "doc": "- The OpenAPI operation"
          },
          {
            "kind": "return",
            "doc": "Response type name with 'Response' suffix\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst op = new OasOperation({ method: 'get', path: '/users' });\nconsole.log(toResponseName(op)); // 'getApiUsersResponse'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "operation",
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toArgsName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/naming.ts",
        "line": 76,
        "col": 13,
        "byteIndex": 2246
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Generates arguments type name for an operation.\n",
        "tags": [
          {
            "kind": "param",
            "name": "operation",
            "doc": "- The OpenAPI operation"
          },
          {
            "kind": "return",
            "doc": "Arguments type name with 'Args' suffix\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst op = new OasOperation({ method: 'put', path: '/users/{id}' });\nconsole.log(toArgsName(op)); // 'updateApiUsersIdArgs'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "operation",
                "optional": false,
                "tsType": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toMethodVerb",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/naming.ts",
        "line": 96,
        "col": 13,
        "byteIndex": 2770
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Converts HTTP method to a descriptive verb.\n",
        "tags": [
          {
            "kind": "param",
            "name": "method",
            "doc": "- HTTP method"
          },
          {
            "kind": "return",
            "doc": "Descriptive verb for the method\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconsole.log(toMethodVerb('post')); // 'Create'\nconsole.log(toMethodVerb('put'));  // 'Update'\nconsole.log(toMethodVerb('get'));  // 'get'\nconsole.log(toMethodVerb('delete')); // 'delete'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "method",
                "optional": false,
                "tsType": {
                  "repr": "Method",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Method"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toRefName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/refFns.ts",
        "line": 46,
        "col": 13,
        "byteIndex": 1602
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Extracts a reference name from an OpenAPI $ref string.\n\nThis function parses JSON Pointer references (like '#/components/schemas/User')\nand extracts the final component as a branded RefName type. It's used throughout\nthe SKMTC system to convert string references into type-safe reference names.\n",
        "tags": [
          {
            "kind": "param",
            "name": "$ref",
            "doc": "- The OpenAPI reference string (e.g., '#/components/schemas/User')"
          },
          {
            "kind": "return",
            "doc": "The extracted reference name as a branded RefName type\n"
          },
          {
            "kind": "throws",
            "type": "Error",
            "doc": "When the reference string is invalid or empty\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { toRefName } from '@skmtc/core/helpers';\n\nconst refName = toRefName('#/components/schemas/User');\nconsole.log(refName); // 'User' (typed as RefName)\n\nconst responseRef = toRefName('#/components/responses/ErrorResponse');\nconsole.log(responseRef); // 'ErrorResponse' (typed as RefName)\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error cases\n```typescript\n// These will throw errors:\ntoRefName('invalid/ref/'); // Error: 'Invalid reference'\ntoRefName('#/components/schemas/'); // Error: 'Invalid reference'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with OAS processing\n```typescript\nclass SchemaProcessor {\n  processReference(ref: string) {\n    const refName = toRefName(ref);\n    const schema = this.document.components.schemas[refName];\n    return this.processSchema(schema, refName);\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "RefName",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "RefName"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "$ref",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isRef",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/refFns.ts",
        "line": 116,
        "col": 13,
        "byteIndex": 3551
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type guard function to check if a value is an OpenAPI reference object.\n\nThis function performs runtime type checking to determine if an unknown value\nis an OpenAPI Reference Object (contains a $ref property with a string value).\nIt's essential for safely handling mixed schema/reference data during processing.\n",
        "tags": [
          {
            "kind": "param",
            "name": "value",
            "doc": "- The value to check for reference properties"
          },
          {
            "kind": "return",
            "doc": "True if the value is a reference object, false otherwise\n"
          },
          {
            "kind": "example",
            "doc": "Basic type checking\n```typescript\nimport { isRef } from '@skmtc/core/helpers';\n\nconst schemaOrRef: unknown = { $ref: '#/components/schemas/User' };\n\nif (isRef(schemaOrRef)) {\n  // TypeScript now knows schemaOrRef has a $ref property\n  console.log(schemaOrRef.$ref); // Safe to access\n  const refName = toRefName(schemaOrRef.$ref);\n} else {\n  // Handle as actual schema object\n  console.log('Direct schema object');\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Processing mixed data\n```typescript\nfunction processSchemaOrRef(data: unknown) {\n  if (isRef(data)) {\n    // Handle reference\n    return resolveReference(data.$ref);\n  } else {\n    // Handle direct schema\n    return processSchema(data as SchemaObject);\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Array processing\n```typescript\nconst mixedArray: unknown[] = [\n  { type: 'string' },\n  { $ref: '#/components/schemas/User' },\n  { type: 'number' }\n];\n\nconst references = mixedArray.filter(isRef);\nconst schemas = mixedArray.filter(item => !isRef(item));\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "value is \u001b[0m\u001b[38;5;12mRef\u001b[0m",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "identifier",
                  "name": "value"
                },
                "type": {
                  "repr": "Ref",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Ref"
                  }
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toGetRef",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/refFns.ts",
        "line": 188,
        "col": 13,
        "byteIndex": 5960
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a reference resolver function for an OpenAPI document.\n\nThis higher-order function returns a resolver that can dereference OpenAPI\nJSON Pointer references within the context of a specific document. It handles\nnested references by recursively resolving reference chains until it reaches\nan actual schema object.\n\nThe resolver is particularly useful during schema processing where you need\nto follow reference chains to get the actual schema definitions.\n",
        "tags": [
          {
            "kind": "param",
            "name": "oasDocument",
            "doc": "- The OpenAPI document containing the schemas to resolve against"
          },
          {
            "kind": "return",
            "doc": "A function that resolves reference objects to schema objects\n"
          },
          {
            "kind": "throws",
            "type": "Error",
            "doc": "When a reference cannot be resolved or points to a non-existent schema\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { toGetRef } from '@skmtc/core/helpers';\n\nconst resolver = toGetRef(openApiDocument);\n\nconst userSchema = resolver({ $ref: '#/components/schemas/User' });\nconsole.log(userSchema.type); // 'object'\nconsole.log(userSchema.properties); // User properties\n```\n"
          },
          {
            "kind": "example",
            "doc": "Resolving nested references\n```typescript\n// If User references Address, and Address references Country\nconst resolver = toGetRef(document);\n\n// This will follow the chain: User -> Address -> Country\nconst resolvedSchema = resolver({ $ref: '#/components/schemas/User' });\n// Returns the final resolved schema object\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error handling\n```typescript\nconst resolver = toGetRef(document);\n\ntry {\n  const schema = resolver({ $ref: '#/components/schemas/NonExistent' });\n} catch (error) {\n  console.error('Reference resolution failed:', error.message);\n  // Error: Invalid reference: #/components/schemas/NonExistent\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with schema processing\n```typescript\nclass SchemaProcessor {\n  private resolver = toGetRef(this.document);\n\n  processProperty(property: SchemaObject | ReferenceObject) {\n    if (isRef(property)) {\n      const resolved = this.resolver(property);\n      return this.processSchema(resolved);\n    }\n    return this.processSchema(property);\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "unknown",
              "kind": "keyword",
              "keyword": "unknown"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "oasDocument",
                "optional": false,
                "tsType": {
                  "repr": "OpenAPIV3.Document",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OpenAPIV3.Document"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "capitalize",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/strings.ts",
        "line": 59,
        "col": 13,
        "byteIndex": 1932
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Capitalizes the first character of a string.\n",
        "tags": [
          {
            "kind": "param",
            "name": "str",
            "doc": "- The string to capitalize"
          },
          {
            "kind": "return",
            "doc": "The string with the first character uppercased\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\ncapitalize('hello world'); // 'Hello world'\ncapitalize('API'); // 'API'\ncapitalize(''); // ''\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "str",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "decapitalize",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/strings.ts",
        "line": 76,
        "col": 13,
        "byteIndex": 2366
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Decapitalizes (lowercases) the first character of a string.\n",
        "tags": [
          {
            "kind": "param",
            "name": "str",
            "doc": "- The string to decapitalize"
          },
          {
            "kind": "return",
            "doc": "The string with the first character lowercased\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\ndecapitalize('Hello World'); // 'hello World'\ndecapitalize('API'); // 'aPI'\ndecapitalize(''); // ''\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "str",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "camelCase",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/strings.ts",
        "line": 121,
        "col": 13,
        "byteIndex": 3842
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Converts a string to camelCase, removing non-alphanumeric characters.\n\nThis function handles various input formats including kebab-case, snake_case,\nspace-separated words, and mixed formats. It intelligently capitalizes words\nafter the first unless `upperFirst` is specified.\n",
        "tags": [
          {
            "kind": "param",
            "name": "str",
            "doc": "- The string to convert to camelCase"
          },
          {
            "kind": "param",
            "name": "options",
            "doc": "- Options to control the conversion"
          },
          {
            "kind": "param",
            "name": "options.upperFirst",
            "doc": "- Whether to capitalize the first character (default: false)"
          },
          {
            "kind": "return",
            "doc": "The camelCase version of the input string\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\ncamelCase('hello world'); // 'helloWorld'\ncamelCase('user-name'); // 'userName'\ncamelCase('api_key'); // 'apiKey'\ncamelCase('HTTP-Response'); // 'httpResponse'\n```\n"
          },
          {
            "kind": "example",
            "doc": "PascalCase (upperFirst)\n```typescript\ncamelCase('user profile', { upperFirst: true }); // 'UserProfile'\ncamelCase('api-client', { upperFirst: true }); // 'ApiClient'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex inputs\n```typescript\ncamelCase('get-user-by-id'); // 'getUserById'\ncamelCase('XML_HTTP_Request'); // 'xmlHttpRequest'\ncamelCase('2fa-enabled'); // '2faEnabled'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "str",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "upperFirst",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "CamelCaseOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "CamelCaseOptions"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ParsedModuleName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/parseModuleName.ts",
        "line": 19,
        "col": 0,
        "byteIndex": 448
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents the parsed components of a module name.\n\nThis type breaks down a module name into its constituent parts,\nsupporting various formats used in different package managers\nand registries (npm, JSR, Deno, etc.).\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\n// For 'jsr:@std/path@1.0.0'\nconst parsed: ParsedModuleName = {\n  scheme: 'jsr',\n  scopeName: '@std',\n  packageName: 'path',\n  version: '1.0.0'\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "scheme",
                "jsDoc": {
                  "doc": "The module scheme (e.g., 'npm', 'jsr', 'https')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/parseModuleName.ts",
                  "line": 21,
                  "col": 2,
                  "byteIndex": 540
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "scopeName",
                "jsDoc": {
                  "doc": "The scope name for scoped packages (e.g., '@std', '@company')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/parseModuleName.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 635
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "packageName",
                "jsDoc": {
                  "doc": "The package name (the main identifier)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/parseModuleName.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 710
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "version",
                "jsDoc": {
                  "doc": "The version specifier (e.g., '1.0.0', '^2.3.4')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/parseModuleName.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 789
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "parseModuleName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/parseModuleName.ts",
        "line": 183,
        "col": 13,
        "byteIndex": 4937
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Parses a module name string into its component parts.\n\nThis utility function decomposes module names from various formats into\nstructured components, handling schemes, scopes, versions, and package names.\nIt supports formats used by npm, JSR, Deno, and other package managers.\n\nThe parser handles complex module name patterns including:\n- Scheme prefixes (jsr:, npm:, https:)\n- Scoped packages (@scope/package)\n- Version specifiers (@version)\n- Combinations of the above\n",
        "tags": [
          {
            "kind": "param",
            "name": "moduleName",
            "doc": "- The module name string to parse"
          },
          {
            "kind": "return",
            "doc": "Parsed components of the module name\n"
          },
          {
            "kind": "example",
            "doc": "Basic package names\n```typescript\nimport { parseModuleName } from '@skmtc/core';\n\n// Simple package name\nconst simple = parseModuleName('lodash');\n// {\n//   scheme: null,\n//   scopeName: null,\n//   packageName: 'lodash',\n//   version: null\n// }\n\n// Package with version\nconst versioned = parseModuleName('lodash@4.17.21');\n// {\n//   scheme: null,\n//   scopeName: null,\n//   packageName: 'lodash',\n//   version: '4.17.21'\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Scoped packages\n```typescript\n// Scoped package\nconst scoped = parseModuleName('@company/utils');\n// {\n//   scheme: null,\n//   scopeName: '@company',\n//   packageName: 'utils',\n//   version: null\n// }\n\n// Scoped package with version\nconst scopedVersioned = parseModuleName('@company/utils@2.0.0');\n// {\n//   scheme: null,\n//   scopeName: '@company',\n//   packageName: 'utils',\n//   version: '2.0.0'\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Scheme-prefixed modules\n```typescript\n// JSR module\nconst jsrModule = parseModuleName('jsr:@std/path@1.0.0');\n// {\n//   scheme: 'jsr',\n//   scopeName: '@std',\n//   packageName: 'path',\n//   version: '1.0.0'\n// }\n\n// npm module with scheme\nconst npmModule = parseModuleName('npm:lodash@^4.17.0');\n// {\n//   scheme: 'npm',\n//   scopeName: null,\n//   packageName: 'lodash',\n//   version: '^4.17.0'\n// }\n\n// HTTPS module\nconst httpsModule = parseModuleName('https:example.com/package@v1.2.3');\n// {\n//   scheme: 'https',\n//   scopeName: null,\n//   packageName: 'example.com/package',\n//   version: 'v1.2.3'\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex parsing scenarios\n```typescript\n// Multiple levels in package name\nconst nested = parseModuleName('npm:@babel/plugin-transform-runtime@^7.0.0');\n// {\n//   scheme: 'npm',\n//   scopeName: '@babel',\n//   packageName: 'plugin-transform-runtime',\n//   version: '^7.0.0'\n// }\n\n// Version ranges and pre-release versions\nconst prerelease = parseModuleName('jsr:@deno/std@1.0.0-rc.1');\n// {\n//   scheme: 'jsr',\n//   scopeName: '@deno',\n//   packageName: 'std',\n//   version: '1.0.0-rc.1'\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in dependency management\n```typescript\nclass DependencyManager {\n  processDependency(moduleSpec: string) {\n    const parsed = parseModuleName(moduleSpec);\n\n    console.log(`Processing ${parsed.packageName}`);\n\n    if (parsed.scheme) {\n      console.log(`Using ${parsed.scheme} registry`);\n    }\n\n    if (parsed.scopeName) {\n      console.log(`Scoped package: ${parsed.scopeName}/${parsed.packageName}`);\n    }\n\n    if (parsed.version) {\n      console.log(`Version constraint: ${parsed.version}`);\n    }\n\n    return this.resolvePackage(parsed);\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Building module URLs\n```typescript\nfunction buildModuleUrl(moduleSpec: string): string {\n  const parsed = parseModuleName(moduleSpec);\n\n  switch (parsed.scheme) {\n    case 'jsr':\n      return `https://jsr.io/${parsed.scopeName}/${parsed.packageName}`;\n    case 'npm':\n      const scope = parsed.scopeName ? `${parsed.scopeName}/` : '';\n      return `https://npmjs.com/package/${scope}${parsed.packageName}`;\n    default:\n      return `https://deno.land/x/${parsed.packageName}`;\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "ParsedModuleName",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParsedModuleName"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "moduleName",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toResolvedArtifactPath",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/helpers/toResolvedArtifactPath.ts",
        "line": 218,
        "col": 13,
        "byteIndex": 6847
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Resolves artifact destination paths relative to a base directory.\n\nThis utility function combines a base path with a destination path to create\nthe final resolved file path for generated artifacts. It handles special path\nprefixes (like '@/') and provides sensible defaults when no base path is specified.\n\nThe function is used throughout the rendering pipeline to determine the final\nfile system locations for generated code artifacts, ensuring consistent path\nresolution across different operating systems and deployment scenarios.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Path resolution configuration"
          },
          {
            "kind": "param",
            "name": "args.basePath",
            "doc": "- Base directory path (defaults to './' if undefined)"
          },
          {
            "kind": "param",
            "name": "args.destinationPath",
            "doc": "- Destination path for the artifact"
          },
          {
            "kind": "return",
            "doc": "The resolved absolute or relative path for the artifact\n"
          },
          {
            "kind": "example",
            "doc": "Basic path resolution\n```typescript\nimport { toResolvedArtifactPath } from '@skmtc/core';\n\n// With explicit base path\nconst resolved1 = toResolvedArtifactPath({\n  basePath: './src/generated',\n  destinationPath: 'models/User.ts'\n});\nconsole.log(resolved1); // './src/generated/models/User.ts'\n\n// With undefined base path (uses default)\nconst resolved2 = toResolvedArtifactPath({\n  basePath: undefined,\n  destinationPath: 'types.ts'\n});\nconsole.log(resolved2); // './types.ts'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Special path prefix handling\n```typescript\n// '@/' prefix gets stripped and resolved relative to base\nconst resolved = toResolvedArtifactPath({\n  basePath: './output',\n  destinationPath: '@/api/models.ts'\n});\nconsole.log(resolved); // './output/api/models.ts'\n\n// Regular paths work normally\nconst normal = toResolvedArtifactPath({\n  basePath: './build',\n  destinationPath: 'components/Button.tsx'\n});\nconsole.log(normal); // './build/components/Button.tsx'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Cross-platform path resolution\n```typescript\n// Works consistently across platforms\nconst windowsPath = toResolvedArtifactPath({\n  basePath: 'C:\\\\projects\\\\app\\\\dist',\n  destinationPath: 'utils/helpers.js'\n});\n\nconst unixPath = toResolvedArtifactPath({\n  basePath: '/home/user/projects/app/dist',\n  destinationPath: 'utils/helpers.js'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in file generation\n```typescript\nclass ArtifactWriter {\n  writeArtifact(\n    content: string,\n    destination: string,\n    baseDir?: string\n  ) {\n    const resolvedPath = toResolvedArtifactPath({\n      basePath: baseDir,\n      destinationPath: destination\n    });\n\n    console.log(`Writing to: ${resolvedPath}`);\n    return Deno.writeTextFile(resolvedPath, content);\n  }\n}\n\nconst writer = new ArtifactWriter();\nawait writer.writeArtifact(\n  'export const greeting = \"Hello\";',\n  '@/constants.ts',\n  './src/generated'\n);\n// Writes to: ./src/generated/constants.ts\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with rendering pipeline\n```typescript\nclass FileRenderer {\n  renderFiles(\n    files: Map<string, File>,\n    outputDir: string\n  ): Record<string, string> {\n    const artifacts: Record<string, string> = {};\n\n    for (const [destPath, file] of files) {\n      const resolvedPath = toResolvedArtifactPath({\n        basePath: outputDir,\n        destinationPath: destPath\n      });\n\n      artifacts[resolvedPath] = file.toString();\n    }\n\n    return artifacts;\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Dynamic base path resolution\n```typescript\nfunction resolveForEnvironment(\n  destination: string,\n  env: 'development' | 'production'\n): string {\n  const basePaths = {\n    development: './dev-output',\n    production: './dist'\n  };\n\n  return toResolvedArtifactPath({\n    basePath: basePaths[env],\n    destinationPath: destination\n  });\n}\n\nconst devPath = resolveForEnvironment('api.ts', 'development');\nconst prodPath = resolveForEnvironment('api.ts', 'production');\n\nconsole.log(devPath);  // './dev-output/api.ts'\nconsole.log(prodPath); // './dist/api.ts'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "basePath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "destinationPath",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToResolvedArtifactPathArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToResolvedArtifactPathArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "StackTrail",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
        "line": 73,
        "col": 0,
        "byteIndex": 2653
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a stack-based trail for tracking document traversal in OpenAPI processing.\n\nThe `StackTrail` class maintains a stack of string frames that represent the current\npath through an OpenAPI document structure. It's used throughout the SKMTC pipeline\nfor tracking context during parsing, generating, and debugging schema processing.\n\nThis class is essential for error reporting, debugging, and maintaining context\nwhen processing nested OpenAPI structures like schemas, operations, and components.\n\n## Key Features\n\n- **Path Tracking**: Maintains a trail of traversed document elements\n- **Context Preservation**: Preserves parsing context for error reporting\n- **Stack Operations**: Supports push, pop, clone, and manipulation operations\n- **Reference Resolution**: Can generate OpenAPI reference strings from trails\n- **Serialization**: Supports string serialization and parsing for persistence\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { StackTrail } from '@skmtc/core';\n\n// Start with empty trail\nconst trail = new StackTrail();\n\n// Build a path through document structure\ntrail.append('components')\n     .append('schemas')\n     .append('User')\n     .append('properties')\n     .append('name');\n\nconsole.log(trail.toString()); // 'components:schemas:User:properties:name'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Schema reference generation\n```typescript\nconst schemaTrail = new StackTrail(['components', 'schemas', 'User']);\nconst ref = schemaTrail.toStackRef();\nconsole.log(ref); // '#/components/schemas/User'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error context tracking\n```typescript\nclass SchemaProcessor {\n  processSchema(schema: OasSchema, trail: StackTrail) {\n    try {\n      // Process schema logic\n      return this.transformSchema(schema);\n    } catch (error) {\n      throw new Error(`Error at ${trail.toString()}: ${error.message}`);\n      // Error at components:schemas:User:properties:email: Invalid format\n    }\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Cloning and manipulation\n```typescript\nconst baseTrail = new StackTrail(['components', 'schemas']);\n\n// Clone for processing different schemas\nconst userTrail = baseTrail.clone().append('User');\nconst productTrail = baseTrail.clone().append('Product');\n\nconsole.log(userTrail.toString());    // 'components:schemas:User'\nconsole.log(productTrail.toString()); // 'components:schemas:Product'\nconsole.log(baseTrail.toString());    // 'components:schemas' (unchanged)\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new StackTrail instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "stack",
                  "doc": "- Initial stack frames (defaults to empty array)\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// Empty trail\nconst trail1 = new StackTrail();\n\n// Pre-populated trail\nconst trail2 = new StackTrail(['components', 'schemas', 'User']);\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "stack",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 91,
              "col": 2,
              "byteIndex": 3081
            }
          }
        ],
        "properties": [],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Creates a shallow copy of the stack trail.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "A new StackTrail instance with copied frames\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst original = new StackTrail(['components', 'schemas']);\nconst copy = original.clone();\n\ncopy.append('User');\nconsole.log(original.toString()); // 'components:schemas'\nconsole.log(copy.toString());     // 'components:schemas:User'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "clone",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "StackTrail",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "StackTrail"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 110,
              "col": 2,
              "byteIndex": 3585
            }
          },
          {
            "jsDoc": {
              "doc": "Creates a new trail from a slice of the current trail.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "start",
                  "doc": "- Starting index (inclusive)"
                },
                {
                  "kind": "param",
                  "name": "end",
                  "doc": "- Ending index (exclusive, optional)"
                },
                {
                  "kind": "return",
                  "doc": "A new StackTrail with sliced frames\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail = new StackTrail(['a', 'b', 'c', 'd', 'e']);\n\nconst slice1 = trail.slice(1, 3);\nconsole.log(slice1.toString()); // 'b:c'\n\nconst slice2 = trail.slice(2);\nconsole.log(slice2.toString()); // 'c:d:e'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "slice",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "start",
                  "optional": false,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                {
                  "kind": "identifier",
                  "name": "end",
                  "optional": true,
                  "tsType": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                }
              ],
              "returnType": {
                "repr": "StackTrail",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "StackTrail"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 132,
              "col": 2,
              "byteIndex": 4177
            }
          },
          {
            "jsDoc": {
              "doc": "Checks if all specified frames exist in the trail.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "frames",
                  "doc": "- Array of frames to check for"
                },
                {
                  "kind": "return",
                  "doc": "True if all frames are present in the trail\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User', 'properties']);\n\nconsole.log(trail.includes(['schemas', 'User'])); // true\nconsole.log(trail.includes(['schemas', 'Product'])); // false\nconsole.log(trail.includes(['components'])); // true\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "includes",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "frames",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 151,
              "col": 2,
              "byteIndex": 4798
            }
          },
          {
            "jsDoc": {
              "doc": "Gets a copy of the current stack frames.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Array of stack frames in order\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User']);\nconst frames = trail.stackTrail;\nconsole.log(frames); // ['components', 'schemas', 'User']\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "stackTrail",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 167,
              "col": 2,
              "byteIndex": 5233
            }
          },
          {
            "jsDoc": {
              "doc": "Appends frame(s) to the end of the trail.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "frame",
                  "doc": "- Single frame string or array of frames to append"
                },
                {
                  "kind": "return",
                  "doc": "This StackTrail instance for chaining\n"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When frame is not a string or string array\n"
                },
                {
                  "kind": "example",
                  "doc": "Single frame\n```typescript\nconst trail = new StackTrail(['components']);\ntrail.append('schemas').append('User');\nconsole.log(trail.toString()); // 'components:schemas:User'\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Multiple frames\n```typescript\nconst trail = new StackTrail();\ntrail.append(['components', 'schemas', 'User']);\nconsole.log(trail.toString()); // 'components:schemas:User'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "append",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "frame",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "StackTrail",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "StackTrail"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 193,
              "col": 2,
              "byteIndex": 5990
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the parent name of a property frame.\n\nThis method is specifically designed to find parent object names\nfor property trails in schema processing.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "frame",
                  "doc": "- The frame name to find the parent of"
                },
                {
                  "kind": "return",
                  "doc": "Parent name if found, undefined otherwise\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User', 'properties', 'email']);\nconst parent = trail.getParentOf('email');\nconsole.log(parent); // 'User'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "getParentOf",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "frame",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 225,
              "col": 2,
              "byteIndex": 6818
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the trail to an OpenAPI reference string if applicable.\n\nOnly trails that represent valid OpenAPI component references\n(starting with 'components') can be converted to reference strings.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "OpenAPI reference string or undefined if not a valid reference trail\n"
                },
                {
                  "kind": "example",
                  "doc": "Valid reference trail\n```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User']);\nconst ref = trail.toStackRef();\nconsole.log(ref); // '#/components/schemas/User'\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Invalid trail\n```typescript\nconst trail = new StackTrail(['paths', '/users', 'get']);\nconst ref = trail.toStackRef();\nconsole.log(ref); // undefined\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toStackRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 258,
              "col": 2,
              "byteIndex": 7939
            }
          },
          {
            "jsDoc": {
              "doc": "Removes frame(s) from the end of the trail.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "frame",
                  "doc": "- Single frame string or array of frames to remove"
                },
                {
                  "kind": "return",
                  "doc": "This StackTrail instance for chaining\n"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When trying to remove a frame that doesn't match the last frame"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When frame is not a string or string array\n"
                },
                {
                  "kind": "example",
                  "doc": "Single frame removal\n```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User', 'properties']);\ntrail.remove('properties');\nconsole.log(trail.toString()); // 'components:schemas:User'\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Multiple frame removal\n```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User', 'properties', 'name']);\ntrail.remove(['name', 'properties']);\nconsole.log(trail.toString()); // 'components:schemas:User'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "remove",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "frame",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ]
                  }
                }
              ],
              "returnType": {
                "repr": "StackTrail",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "StackTrail"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 299,
              "col": 2,
              "byteIndex": 9146
            }
          },
          {
            "jsDoc": {
              "doc": "Joins multiple stacks or strings into a single colon-separated string.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "stacks",
                  "doc": "- Array of StackTrail instances or strings to join"
                },
                {
                  "kind": "return",
                  "doc": "Joined string with colon separators\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail1 = new StackTrail(['components', 'schemas']);\nconst trail2 = new StackTrail(['User', 'properties']);\n\nconst joined = StackTrail.join(trail1, 'separator', trail2);\nconsole.log(joined); // 'components:schemas:separator:User:properties'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "join",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "rest",
                  "arg": {
                    "kind": "identifier",
                    "name": "stacks",
                    "optional": false,
                    "tsType": null
                  },
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "",
                      "kind": "parenthesized",
                      "parenthesized": {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "StackTrail",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "StackTrail"
                            }
                          },
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        ]
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 336,
              "col": 2,
              "byteIndex": 10176
            }
          },
          {
            "jsDoc": {
              "doc": "Parses a colon-separated string into a StackTrail instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "value",
                  "doc": "- Colon-separated string to parse"
                },
                {
                  "kind": "return",
                  "doc": "New StackTrail instance\n"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When the string contains empty tokens\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail = StackTrail.parse('components:schemas:User:properties:name');\nconsole.log(trail.stackTrail); // ['components', 'schemas', 'User', 'properties', 'name']\n\n// Handles escaped colons\nconst escapedTrail = StackTrail.parse('components:schemas:User%3AType');\nconsole.log(escapedTrail.stackTrail); // ['components', 'schemas', 'User:Type']\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "parse",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "value",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "StackTrail",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "StackTrail"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 358,
              "col": 2,
              "byteIndex": 10961
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the trail to JSON representation.\n\nUsed for serialization in JSON contexts. Returns the same\nas toString() method.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "String representation of the trail\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User']);\nconst json = JSON.stringify({ path: trail });\nconsole.log(json); // '{\"path\":\"components:schemas:User\"}'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJSON",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 385,
              "col": 2,
              "byteIndex": 11677
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the trail to a colon-separated string representation.\n\nColons within frame names are escaped as '%3A' to avoid conflicts\nwith the separator character.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "String representation of the trail\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst trail = new StackTrail(['components', 'schemas', 'User']);\nconsole.log(trail.toString()); // 'components:schemas:User'\n\n// With colon in frame name\nconst trailWithColon = new StackTrail(['components', 'schemas', 'User:Type']);\nconsole.log(trailWithColon.toString()); // 'components:schemas:User%3AType'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/context/StackTrail.ts",
              "line": 407,
              "col": 2,
              "byteIndex": 12364
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "ArrayFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 282
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasArray}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the array value can be null"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "items",
                "jsDoc": {
                  "doc": "Schema definition for array items"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 393
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the array schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 476
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the array schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 536
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the array value can be null"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 604
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "typeParams": []
              },
              {
                "name": "uniqueItems",
                "jsDoc": {
                  "doc": "Whether array items must be unique"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 670
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 744
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example array value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 817
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "maxItems",
                "jsDoc": {
                  "doc": "Maximum number of items allowed"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 947
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minItems",
                "jsDoc": {
                  "doc": "Minimum number of items required"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1009
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of allowed enum values for the entire array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1088
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "",
                            "kind": "parenthesized",
                            "parenthesized": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                },
                                {
                                  "repr": "null",
                                  "kind": "keyword",
                                  "keyword": "null"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "defaultValue",
                "jsDoc": {
                  "doc": "Default value for the array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1214
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "OasArray",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
        "line": 130,
        "col": 0,
        "byteIndex": 4220
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an array schema in the OpenAPI Specification.\n\n`OasArray` handles array type definitions with comprehensive validation\nconstraints including item count limits, uniqueness requirements, and\nitem type specifications. It supports nested schemas and references\nfor complex array structures.\n\nThis class is used throughout the OAS processing pipeline to represent\narray fields in API schemas, including lists of objects, primitive arrays,\nand complex nested array structures.\n\n## Key Features\n\n- **Item Type Definition**: Support for any schema type as array items\n- **Size Constraints**: Minimum and maximum item count validation\n- **Uniqueness Validation**: Ensure array items are unique (like Set behavior)\n- **Nested Schemas**: Support for complex nested array structures\n- **Reference Handling**: Seamless integration with schema references\n- **Nullable Support**: Type-safe nullable array handling\n- **JSON Schema**: Conversion to standard JSON Schema format\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the array value can be null\n"
          },
          {
            "kind": "example",
            "doc": "String array\n```typescript\nimport { OasArray, OasString } from '@skmtc/core';\n\nconst tagsArray = new OasArray({\n  title: 'Tags',\n  description: 'List of tags associated with the item',\n  items: new OasString({ minLength: 1 }),\n  minItems: 1,\n  uniqueItems: true,\n  example: ['javascript', 'typescript', 'react']\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Object array with references\n```typescript\nimport { OasArray, OasRef } from '@skmtc/core';\n\nconst usersArray = new OasArray({\n  title: 'Users',\n  description: 'List of user objects',\n  items: new OasRef({ refName: 'User' }),\n  maxItems: 100,\n  example: [\n    { id: 1, name: 'John' },\n    { id: 2, name: 'Jane' }\n  ]\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nested array (array of arrays)\n```typescript\nconst matrixArray = new OasArray({\n  title: 'Matrix',\n  description: '2D array of numbers',\n  items: new OasArray({\n    items: new OasInteger({ minimum: 0 })\n  }),\n  example: [\n    [1, 2, 3],\n    [4, 5, 6],\n    [7, 8, 9]\n  ]\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable array with constraints\n```typescript\nconst optionalIdsArray = new OasArray<true>({\n  title: 'Optional IDs',\n  description: 'Optional list of IDs',\n  items: new OasInteger({ format: 'int64', minimum: 1 }),\n  nullable: true,\n  minItems: 0,\n  maxItems: 10,\n  defaultValue: null\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Unique items validation\n```typescript\nconst uniqueEmailsArray = new OasArray({\n  title: 'Email Recipients',\n  description: 'List of unique email addresses',\n  items: new OasString({ format: 'email' }),\n  uniqueItems: true, // Ensures no duplicate emails\n  minItems: 1,\n  example: ['user1@example.com', 'user2@example.com']\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasArray instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Array configuration fields including items schema, validation constraints, and metadata"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "ArrayFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Nullable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Nullable"
                        }
                      }
                    ],
                    "typeName": "ArrayFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 192,
              "col": 2,
              "byteIndex": 5852
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 135,
              "col": 2,
              "byteIndex": 4419
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'array' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "array",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "array"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 139,
              "col": 2,
              "byteIndex": 4534
            }
          },
          {
            "jsDoc": {
              "doc": "Defines the type of items in the array."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "items",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 143,
              "col": 2,
              "byteIndex": 4617
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the array."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 147,
              "col": 2,
              "byteIndex": 4702
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the array."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 151,
              "col": 2,
              "byteIndex": 4775
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether value can be null."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "nullable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 155,
              "col": 2,
              "byteIndex": 4863
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether the array items must be unique."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "uniqueItems",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 159,
              "col": 2,
              "byteIndex": 4963
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 162,
              "col": 2,
              "byteIndex": 5039
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the array."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 167,
              "col": 2,
              "byteIndex": 5137
            }
          },
          {
            "jsDoc": {
              "doc": "The maximum number of items in the array."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "maxItems",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 171,
              "col": 2,
              "byteIndex": 5284
            }
          },
          {
            "jsDoc": {
              "doc": "The minimum number of items in the array."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "minItems",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 175,
              "col": 2,
              "byteIndex": 5374
            }
          },
          {
            "jsDoc": {
              "doc": "The enum values for the array."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "unknown",
                              "kind": "keyword",
                              "keyword": "unknown"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "enums",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 180,
              "col": 2,
              "byteIndex": 5454
            }
          },
          {
            "jsDoc": {
              "doc": "The default value for the array."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "defaultValue",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 185,
              "col": 2,
              "byteIndex": 5593
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Determines if this array is a reference object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Always returns false since this is a concrete array instance, not a reference"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 211,
              "col": 2,
              "byteIndex": 6477
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this array object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The array instance itself since it's already a concrete object, not a reference"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasArray",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasArray"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 220,
              "col": 2,
              "byteIndex": 6682
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this array object one level.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The array instance itself since it's already a concrete object, not a reference"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasArray",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasArray"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 229,
              "col": 2,
              "byteIndex": 6892
            }
          },
          {
            "jsDoc": {
              "doc": "Converts this OAS array to an OpenAPI v3 JSON schema representation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Conversion options including reference handling and formatting preferences"
                },
                {
                  "kind": "return",
                  "doc": "OpenAPI v3 array schema object with type, items schema, and all validation constraints"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.ArraySchemaObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.ArraySchemaObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/Array.ts",
              "line": 239,
              "col": 2,
              "byteIndex": 7241
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "default": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "oasArrayData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
        "line": 67,
        "col": 13,
        "byteIndex": 2013
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI array data objects.\n\nThis comprehensive schema validates OpenAPI array schemas according to the OpenAPI v3\nspecification, including item type definitions, length constraints, uniqueness requirements,\nand enumeration values. It uses lazy evaluation to handle recursive schema references,\nallowing for complex nested array structures and self-referential schemas.\n\nThe schema supports both direct schema definitions and reference objects for the items\nproperty, enabling flexible array type definitions that can reference other schemas\nin the document or define inline item types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating a simple array schema\n```typescript\nimport { oasArrayData } from '@skmtc/core/oas/array';\nimport * as v from 'valibot';\n\nconst schema = {\n  type: 'array',\n  items: {\n    type: 'string'\n  },\n  description: 'List of user names',\n  minItems: 1,\n  maxItems: 100\n};\n\nconst validated = v.parse(oasArrayData, schema);\nconsole.log(validated.minItems); // 1\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating array with reference items\n```typescript\nconst refArraySchema = {\n  type: 'array',\n  items: {\n    $ref: '#/components/schemas/User'\n  },\n  title: 'User List',\n  uniqueItems: true,\n  default: []\n};\n\nconst result = v.parse(oasArrayData, refArraySchema);\nconsole.log(result.uniqueItems); // true\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating constrained arrays\n```typescript\nconst constrainedArray = {\n  type: 'array',\n  items: { type: 'number' },\n  minItems: 2,\n  maxItems: 10,\n  uniqueItems: true,\n  enums: [[1, 2, 3], [4, 5, 6]]\n};\n\nconst validated = v.parse(oasArrayData, constrainedArray);\nconsole.log(validated.maxItems); // 10\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasArrayData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasArrayData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "oasArrayDataWithoutItems",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
        "line": 122,
        "col": 13,
        "byteIndex": 3975
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for array data without the items property.\n\nThis specialized schema validates array schemas when the items property is processed\nseparately from the main array constraints. It's commonly used during schema parsing\nand transformation processes where items need special handling, such as when resolving\nreferences or applying schema merging operations.\n\nThis pattern is useful in multi-phase parsing where array constraints (like min/max\nitems, uniqueness) are validated independently from the item type definitions,\nallowing for more flexible processing pipelines.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating array constraints without items\n```typescript\nimport { oasArrayDataWithoutItems } from '@skmtc/core/oas/array';\nimport * as v from 'valibot';\n\nconst constraintsOnly = {\n  type: 'array',\n  title: 'Validation Rules',\n  minItems: 1,\n  maxItems: 50,\n  uniqueItems: true,\n  default: []\n};\n\nconst validated = v.parse(oasArrayDataWithoutItems, constraintsOnly);\nconsole.log(validated.uniqueItems); // true\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in two-phase parsing\n```typescript\nfunction parseArraySchema(schema: unknown) {\n  // Phase 1: Validate basic array structure\n  const arrayConstraints = v.parse(oasArrayDataWithoutItems, schema);\n\n  // Phase 2: Process items separately (not shown)\n  const items = processItemsSchema((schema as any).items);\n\n  return { ...arrayConstraints, items };\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasArrayDataWithoutItems",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasArrayDataWithoutItems"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasArrayData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
        "line": 222,
        "col": 0,
        "byteIndex": 6715
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI array schema objects.\n\nRepresents the complete structure of OpenAPI array schemas as processed by the SKMTC\npipeline. This type includes all standard OpenAPI array schema properties including\nitem type specifications, length constraints, uniqueness requirements, and metadata\nfields. It's used throughout the array processing pipeline for type-safe handling\nof array schema definitions.\n\n## Usage in SKMTC Pipeline\n\nThis type is used by:\n- Schema parsers to validate incoming array schema data\n- Array processors to transform OpenAPI schemas into OAS objects\n- Code generators to access array constraints and generate validation code\n- Type generators to create appropriate array type definitions\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic string array schema\n```typescript\nimport type { OasArrayData } from '@skmtc/core/oas/array';\n\nconst tagListSchema: OasArrayData = {\n  type: 'array',\n  items: {\n    type: 'string',\n    minLength: 1,\n    maxLength: 50\n  },\n  title: 'Tag List',\n  description: 'Collection of tags for categorization',\n  minItems: 0,\n  maxItems: 20,\n  uniqueItems: true,\n  default: []\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Array of referenced objects\n```typescript\nconst userListSchema: OasArrayData = {\n  type: 'array',\n  items: {\n    $ref: '#/components/schemas/User'\n  },\n  title: 'User Collection',\n  description: 'List of user objects',\n  minItems: 1,\n  default: []\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex nested array schema\n```typescript\nconst matrixSchema: OasArrayData = {\n  type: 'array',\n  items: {\n    type: 'array',\n    items: {\n      type: 'number'\n    },\n    minItems: 3,\n    maxItems: 3\n  },\n  title: '3x3 Matrix',\n  description: 'Two-dimensional number array representing a 3x3 matrix',\n  minItems: 3,\n  maxItems: 3\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Enum array with constraints\n```typescript\nconst statusListSchema: OasArrayData = {\n  type: 'array',\n  items: {\n    type: 'string',\n    enum: ['active', 'inactive', 'pending']\n  },\n  title: 'Status List',\n  description: 'Multiple status values',\n  uniqueItems: true,\n  enums: [\n    ['active'],\n    ['active', 'pending'],\n    ['inactive', 'pending']\n  ]\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Type identifier (always 'array')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 224,
                  "col": 2,
                  "byteIndex": 6788
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "array",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "array"
                  }
                },
                "typeParams": []
              },
              {
                "name": "items",
                "jsDoc": {
                  "doc": "Schema definition for array items (can be direct schema or reference)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 226,
                  "col": 2,
                  "byteIndex": 6883
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchemaData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaData"
                      }
                    },
                    {
                      "repr": "OasSchemaRefData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaRefData"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "title",
                "jsDoc": {
                  "doc": "Human-readable title for the array schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 228,
                  "col": 2,
                  "byteIndex": 6976
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description explaining the array's purpose and contents"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 230,
                  "col": 2,
                  "byteIndex": 7067
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value used when no explicit array is provided"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 232,
                  "col": 2,
                  "byteIndex": 7153
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                },
                "typeParams": []
              },
              {
                "name": "maxItems",
                "jsDoc": {
                  "doc": "Maximum number of items allowed in the array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 234,
                  "col": 2,
                  "byteIndex": 7229
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minItems",
                "jsDoc": {
                  "doc": "Minimum number of items required in the array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 236,
                  "col": 2,
                  "byteIndex": 7304
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "uniqueItems",
                "jsDoc": {
                  "doc": "Whether all items in the array must be unique"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 238,
                  "col": 2,
                  "byteIndex": 7379
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of valid enumeration values for the entire array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 240,
                  "col": 2,
                  "byteIndex": 7467
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasArrayDataWithoutItems",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
        "line": 288,
        "col": 0,
        "byteIndex": 9019
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Array schema data without the items property.\n\nRepresents an array schema with all standard properties except the items definition.\nThis type is used during parsing phases where item schemas are processed separately\nfrom array constraints, enabling more flexible processing pipelines and better\nseparation of concerns in complex schema transformation operations.\n\n## Common Use Cases\n\n- **Two-phase parsing**: Validate array structure first, then process items\n- **Schema merging**: Combine array constraints from multiple sources\n- **Constraint extraction**: Extract array rules for validation generation\n- **Reference resolution**: Process items after resolving schema references\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Array constraints for validation\n```typescript\nimport type { OasArrayDataWithoutItems } from '@skmtc/core/oas/array';\n\nconst constraintsSchema: OasArrayDataWithoutItems = {\n  type: 'array',\n  title: 'Validation Rules',\n  description: 'Array with length and uniqueness constraints',\n  minItems: 1,\n  maxItems: 100,\n  uniqueItems: true,\n  default: []\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Enum constraints without item types\n```typescript\nconst enumArrayConstraints: OasArrayDataWithoutItems = {\n  type: 'array',\n  title: 'Option Groups',\n  description: 'Predefined option combinations',\n  enums: [\n    ['option1', 'option2'],\n    ['option3', 'option4'],\n    ['option1', 'option3', 'option4']\n  ],\n  uniqueItems: true\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Type identifier (always 'array')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 290,
                  "col": 2,
                  "byteIndex": 9104
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "array",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "array"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "jsDoc": {
                  "doc": "Human-readable title for the array schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 292,
                  "col": 2,
                  "byteIndex": 9171
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description explaining the array's purpose and contents"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 294,
                  "col": 2,
                  "byteIndex": 9262
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value used when no explicit array is provided"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 296,
                  "col": 2,
                  "byteIndex": 9348
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                },
                "typeParams": []
              },
              {
                "name": "maxItems",
                "jsDoc": {
                  "doc": "Maximum number of items allowed in the array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 298,
                  "col": 2,
                  "byteIndex": 9424
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minItems",
                "jsDoc": {
                  "doc": "Minimum number of items required in the array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 300,
                  "col": 2,
                  "byteIndex": 9499
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "uniqueItems",
                "jsDoc": {
                  "doc": "Whether all items in the array must be unique"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 302,
                  "col": 2,
                  "byteIndex": 9574
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of valid enumeration values for the entire array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/array-types.ts",
                  "line": 304,
                  "col": 2,
                  "byteIndex": 9662
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "unknown",
                    "kind": "keyword",
                    "keyword": "unknown"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toArray",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/toArray.ts",
        "line": 76,
        "col": 13,
        "byteIndex": 2476
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Transforms an OpenAPI v3 array schema object into an internal OAS array representation.\n\nThis function processes OpenAPI array schemas by extracting and parsing nullable values,\nexamples, enumerations, and default values. It handles the complete transformation from\nraw OpenAPI JSON to the SKMTC internal array representation with proper type safety.\n\nThe transformation follows a pipeline approach:\n1. Parse nullable flag and extract base value\n2. Parse example values with nullable support\n3. Parse enumeration constraints\n4. Parse default values  \n5. Create final OasArray instance\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Transformation arguments"
          },
          {
            "kind": "param",
            "name": "args.value",
            "doc": "- The OpenAPI v3 array schema object to transform"
          },
          {
            "kind": "param",
            "name": "args.context",
            "doc": "- Parse context providing utilities and tracing"
          },
          {
            "kind": "return",
            "doc": "Transformed OAS array object with parsed properties\n"
          },
          {
            "kind": "example",
            "doc": "Basic array transformation\n```typescript\nimport { toArray } from '@skmtc/core';\n\nconst openApiArray = {\n  type: 'array',\n  items: { type: 'string' },\n  maxItems: 10,\n  uniqueItems: true\n};\n\nconst oasArray = toArray({\n  value: openApiArray,\n  context: parseContext\n});\n\nconsole.log(oasArray.maxItems); // 10\nconsole.log(oasArray.uniqueItems); // true\n```\n"
          },
          {
            "kind": "example",
            "doc": "Array with nullable and examples\n```typescript\nconst complexArray = {\n  type: 'array',\n  items: { type: 'number' },\n  nullable: true,\n  example: [1, 2, 3],\n  default: [],\n  enum: [[1, 2], [3, 4], null]\n};\n\nconst oasArray = toArray({\n  value: complexArray,\n  context: parseContext\n});\n\nconsole.log(oasArray.nullable); // true\nconsole.log(oasArray.example); // [1, 2, 3]\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasArray",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasArray"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToArrayArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToArrayArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toParsedArray",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/array/toArray.ts",
        "line": 174,
        "col": 13,
        "byteIndex": 5676
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates an OAS array instance from pre-parsed array schema components.\n\nThis function is the final step in the array transformation pipeline, taking\nalready-parsed nullable, example, enum, and default values and combining them\nwith the remaining array properties to create the complete OasArray instance.\n\nThe function handles type-safe nullable parsing, items schema resolution,\nand specification extension processing. It uses Valibot for schema validation\nand maintains proper type relationships between nullable flags and value types.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Boolean type indicating if the array can be null"
          },
          {
            "kind": "param",
            "name": "args",
            "doc": "- Pre-parsed array components"
          },
          {
            "kind": "param",
            "name": "args.value",
            "doc": "- OpenAPI array object without parsed fields"
          },
          {
            "kind": "param",
            "name": "args.context",
            "doc": "- Parse context for tracing and utilities"
          },
          {
            "kind": "param",
            "name": "args.nullable",
            "doc": "- Parsed nullable flag"
          },
          {
            "kind": "param",
            "name": "args.example",
            "doc": "- Parsed example value (type-safe with nullable)"
          },
          {
            "kind": "param",
            "name": "args.enums",
            "doc": "- Parsed enumeration constraints (type-safe with nullable)"
          },
          {
            "kind": "param",
            "name": "args.defaultValue",
            "doc": "- Parsed default value (type-safe with nullable)"
          },
          {
            "kind": "return",
            "doc": "Complete OAS array instance with all properties\n"
          },
          {
            "kind": "example",
            "doc": "Type-safe nullable array\n```typescript\nconst nullableArray = toParsedArray({\n  context: parseContext,\n  nullable: true,\n  example: [1, 2, 3], // Can be null due to nullable: true\n  enums: [[1], [2], null], // Null allowed in enums\n  defaultValue: null,\n  value: {\n    type: 'array',\n    items: { type: 'number' },\n    maxItems: 5\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Non-nullable array\n```typescript\nconst regularArray = toParsedArray({\n  context: parseContext,\n  nullable: false,\n  example: ['a', 'b'], // Cannot be null\n  enums: [['x'], ['y']], // No null values allowed\n  defaultValue: [],\n  value: {\n    type: 'array',\n    items: { type: 'string' }\n  }\n});\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasArray",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Nullable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Nullable"
                    }
                  }
                ],
                "typeName": "OasArray"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "nullable",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "example",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "enums",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "defaultValue",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToParsedArrayArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Nullable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Nullable"
                        }
                      }
                    ],
                    "typeName": "ToParsedArrayArgs"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "Nullable",
                "constraint": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "BooleanFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 291
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasBoolean}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the boolean can be null (affects type unions)"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the boolean schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 408
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the boolean schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 470
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the boolean value can be null"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 540
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 612
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example value for the boolean (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 730
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of valid enum values for the boolean (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 902
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "",
                            "kind": "parenthesized",
                            "parenthesized": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "boolean",
                                  "kind": "keyword",
                                  "keyword": "boolean"
                                },
                                {
                                  "repr": "null",
                                  "kind": "keyword",
                                  "keyword": "null"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "boolean",
                            "kind": "keyword",
                            "keyword": "boolean"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value for the boolean (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 1065
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "boolean",
                          "kind": "keyword",
                          "keyword": "boolean"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "OasBoolean",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
        "line": 159,
        "col": 0,
        "byteIndex": 5136
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a boolean schema in the OpenAPI Specification.\n\nThe `OasBoolean` class handles boolean data types in OpenAPI schemas, supporting\nboth simple true/false values and more complex boolean schemas with constraints,\nenumerations, and nullable types. This class provides type-safe boolean handling\nwith optional null value support through generic typing.\n\n## Key Features\n\n- **Type Safety**: Generic nullable type support with proper TypeScript inference\n- **Enum Support**: Constrain boolean values to specific true/false combinations\n- **Null Handling**: Optional null value support for nullable boolean types\n- **Validation**: Default values and example validation\n- **JSON Schema**: Converts to standard JSON Schema format for validation\n- **Documentation**: Rich metadata support for API documentation\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the boolean value itself can be null\n"
          },
          {
            "kind": "example",
            "doc": "Basic boolean schema\n```typescript\nimport { OasBoolean } from '@skmtc/core';\n\nconst isActiveSchema = new OasBoolean({\n  title: 'Active Status',\n  description: 'Whether the user account is active',\n  default: true,\n  example: true\n});\n\n// This represents: boolean with default true\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable boolean schema\n```typescript\nconst nullableFlag = new OasBoolean<true>({\n  title: 'Optional Flag',\n  description: 'An optional boolean flag that can be null',\n  nullable: true,\n  default: null,\n  example: true\n});\n\n// This represents: boolean | null\n```\n"
          },
          {
            "kind": "example",
            "doc": "Boolean with enum constraints\n```typescript\nconst strictBoolean = new OasBoolean({\n  title: 'Confirmation',\n  description: 'Must explicitly be true to confirm action',\n  enums: [true], // Only true is allowed\n  example: true\n});\n\n// This only accepts true, effectively making it required\n```\n"
          },
          {
            "kind": "example",
            "doc": "Boolean with null in enum\n```typescript\nconst triStateBoolean = new OasBoolean<true>({\n  title: 'Approval Status',\n  description: 'Approval can be true (approved), false (denied), or null (pending)',\n  nullable: true,\n  enums: [true, false, null],\n  default: null,\n  example: null\n});\n\n// This represents: true | false | null (tri-state logic)\n```\n"
          },
          {
            "kind": "example",
            "doc": "Feature flag schema\n```typescript\nconst featureFlag = new OasBoolean({\n  title: 'Feature Enabled',\n  description: 'Whether the new feature is enabled for this user',\n  default: false,\n  example: false\n});\n\n// Used in configuration objects\nconst userConfig = new OasObject({\n  properties: {\n    darkMode: featureFlag,\n    notifications: featureFlag,\n    betaFeatures: featureFlag\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Consent and agreement booleans\n```typescript\nconst consentSchema = new OasBoolean({\n  title: 'Terms Accepted',\n  description: 'User has accepted the terms and conditions',\n  enums: [true], // Must be true to be valid\n  example: true\n});\n\nconst privacyConsent = new OasBoolean({\n  title: 'Privacy Policy Accepted',\n  description: 'User has accepted the privacy policy',\n  default: false,\n  example: true\n});\n\n// Used in registration forms where consent is required\n```\n"
          },
          {
            "kind": "example",
            "doc": "Optional settings with nullable booleans\n```typescript\nconst userPreferences = new OasObject({\n  properties: {\n    emailNotifications: new OasBoolean<true>({\n      title: 'Email Notifications',\n      description: 'Enable email notifications (null means use default)',\n      nullable: true,\n      default: null\n    }),\n    smsNotifications: new OasBoolean<true>({\n      title: 'SMS Notifications',\n      description: 'Enable SMS notifications (null means not set)',\n      nullable: true,\n      default: null\n    })\n  }\n});\n\n// Allows: { emailNotifications: true, smsNotifications: null }\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasBoolean instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Boolean configuration fields including validation constraints and metadata"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "BooleanFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Nullable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Nullable"
                          }
                        }
                      ],
                      "typeName": "BooleanFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 203,
              "col": 2,
              "byteIndex": 6384
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 164,
              "col": 2,
              "byteIndex": 5337
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'boolean' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "boolean",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "boolean"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 168,
              "col": 2,
              "byteIndex": 5454
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the boolean."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 172,
              "col": 2,
              "byteIndex": 5531
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the boolean."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 176,
              "col": 2,
              "byteIndex": 5606
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether value can be null."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "nullable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 180,
              "col": 2,
              "byteIndex": 5694
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 183,
              "col": 2,
              "byteIndex": 5768
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the boolean."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 187,
              "col": 2,
              "byteIndex": 5867
            }
          },
          {
            "jsDoc": {
              "doc": "Possible values the boolean can have"
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "boolean",
                              "kind": "keyword",
                              "keyword": "boolean"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "boolean",
                        "kind": "keyword",
                        "keyword": "boolean"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "enums",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 192,
              "col": 2,
              "byteIndex": 6006
            }
          },
          {
            "jsDoc": {
              "doc": "The default value of the boolean."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "default",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 196,
              "col": 2,
              "byteIndex": 6145
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Determines if this boolean is a reference object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Always returns false since this is a concrete boolean instance, not a reference"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 218,
              "col": 2,
              "byteIndex": 6866
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this boolean object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The boolean instance itself since it's already a concrete object, not a reference"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasBoolean",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasBoolean"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 227,
              "col": 2,
              "byteIndex": 7075
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this boolean object one level.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The boolean instance itself since it's already a concrete object, not a reference"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasBoolean",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasBoolean"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 236,
              "col": 2,
              "byteIndex": 7291
            }
          },
          {
            "jsDoc": {
              "doc": "Converts this OAS boolean to an OpenAPI v3 JSON schema representation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Conversion options (currently unused for boolean schemas)"
                },
                {
                  "kind": "return",
                  "doc": "OpenAPI v3 boolean schema object with type and all validation constraints"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.NonArraySchemaObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.NonArraySchemaObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/Boolean.ts",
              "line": 247,
              "col": 2,
              "byteIndex": 7651
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "default": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "oasBooleanData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/boolean-types.ts",
        "line": 39,
        "col": 13,
        "byteIndex": 1194
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI boolean data objects.\n\nThis schema validates OpenAPI boolean schemas according to the OpenAPI v3 specification,\nincluding optional properties like default values, enumeration constraints, title,\nand description metadata. Boolean enums are commonly used to restrict values to\nspecific boolean constants (e.g., [true] for always-true flags).\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating a basic boolean schema\n```typescript\nimport { oasBooleanData } from '@skmtc/core/oas/boolean';\nimport * as v from 'valibot';\n\nconst schema = {\n  type: 'boolean',\n  description: 'Whether the feature is enabled',\n  default: false\n};\n\nconst validated = v.parse(oasBooleanData, schema);\nconsole.log(validated.default); // false\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating boolean with enumeration\n```typescript\nconst constrainedBoolean = {\n  type: 'boolean',\n  title: 'Admin Flag',\n  description: 'User admin status',\n  enum: [true] // Only true values allowed\n};\n\nconst result = v.parse(oasBooleanData, constrainedBoolean);\nconsole.log(result.enum); // [true]\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasBooleanData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasBooleanData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasBooleanData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/boolean-types.ts",
        "line": 96,
        "col": 0,
        "byteIndex": 3012
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI boolean schema objects.\n\nRepresents the structure of OpenAPI boolean schemas as processed by the SKMTC pipeline.\nThis type includes all standard OpenAPI boolean schema properties including metadata,\ndefault values, and enumeration constraints. It's used throughout the boolean\nprocessing pipeline for type-safe handling of boolean schema definitions.\n\n## Usage in SKMTC Pipeline\n\nThis type is used by:\n- Schema parsers to validate incoming boolean schema data\n- Boolean processors to transform OpenAPI schemas into OAS objects\n- Code generators to access boolean schema metadata and constraints\n- Validation systems to ensure schema compliance\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic boolean schema\n```typescript\nimport type { OasBooleanData } from '@skmtc/core/oas/boolean';\n\nconst isActiveSchema: OasBooleanData = {\n  type: 'boolean',\n  title: 'Active Status',\n  description: 'Whether the record is active',\n  default: true\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Boolean with enumeration constraints\n```typescript\nconst adminFlagSchema: OasBooleanData = {\n  type: 'boolean',\n  description: 'Administrative privileges flag',\n  enum: [false, true], // Allow both values\n  default: false\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Read-only boolean flag\n```typescript\nconst systemFlagSchema: OasBooleanData = {\n  type: 'boolean',\n  title: 'System Generated',\n  description: 'Indicates if the record was system-generated',\n  enum: [true], // Always true\n  default: true\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Type identifier (always 'boolean')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/boolean-types.ts",
                  "line": 98,
                  "col": 2,
                  "byteIndex": 3089
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "boolean"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "jsDoc": {
                  "doc": "Human-readable title for the boolean schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/boolean-types.ts",
                  "line": 100,
                  "col": 2,
                  "byteIndex": 3160
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description explaining the boolean's purpose and usage"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/boolean-types.ts",
                  "line": 102,
                  "col": 2,
                  "byteIndex": 3250
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value used when no explicit value is provided"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/boolean-types.ts",
                  "line": 104,
                  "col": 2,
                  "byteIndex": 3336
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "enum",
                "jsDoc": {
                  "doc": "Array of valid boolean values for enumeration constraints"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/boolean-types.ts",
                  "line": 106,
                  "col": 2,
                  "byteIndex": 3423
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toBoolean",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/toBoolean.ts",
        "line": 74,
        "col": 13,
        "byteIndex": 2433
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Transforms an OpenAPI v3 boolean schema object into an internal OAS boolean representation.\n\nThis function processes OpenAPI boolean schemas by extracting and parsing nullable values,\nexamples, enumerations, and default values. It handles the complete transformation from\nraw OpenAPI JSON to the SKMTC internal boolean representation with proper validation.\n\nThe transformation follows a pipeline approach:\n1. Parse nullable flag and extract base value\n2. Parse example values with nullable support\n3. Parse enumeration constraints (typically [true], [false], or [true, false])\n4. Parse default values\n5. Create final OasBoolean instance\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Transformation arguments"
          },
          {
            "kind": "param",
            "name": "args.value",
            "doc": "- The OpenAPI v3 boolean schema object to transform"
          },
          {
            "kind": "param",
            "name": "args.context",
            "doc": "- Parse context providing utilities and tracing"
          },
          {
            "kind": "return",
            "doc": "Transformed OAS boolean object with parsed properties\n"
          },
          {
            "kind": "example",
            "doc": "Basic boolean transformation\n```typescript\nimport { toBoolean } from '@skmtc/core';\n\nconst openApiBoolean = {\n  type: 'boolean',\n  default: false\n};\n\nconst oasBoolean = toBoolean({\n  value: openApiBoolean,\n  context: parseContext\n});\n\nconsole.log(oasBoolean.default); // false\n```\n"
          },
          {
            "kind": "example",
            "doc": "Boolean with nullable and enum\n```typescript\nconst flagBoolean = {\n  type: 'boolean',\n  nullable: true,\n  enum: [true, null],\n  default: null,\n  example: true,\n  title: 'Feature Flag',\n  description: 'Whether the feature is enabled'\n};\n\nconst oasBoolean = toBoolean({\n  value: flagBoolean,\n  context: parseContext\n});\n\nconsole.log(oasBoolean.nullable); // true\nconsole.log(oasBoolean.enums); // [true, null]\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasBoolean",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasBoolean"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToBooleanArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToBooleanArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toParsedBoolean",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/boolean/toBoolean.ts",
        "line": 120,
        "col": 13,
        "byteIndex": 3686
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasBoolean",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Nullable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Nullable"
                    }
                  }
                ],
                "typeName": "OasBoolean"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "nullable",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "example",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "enums",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "defaultValue",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToParsedBooleanArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Nullable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Nullable"
                        }
                      }
                    ],
                    "typeName": "ToParsedBooleanArgs"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "Nullable",
                "constraint": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "componentsKeys",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
        "line": 14,
        "col": 13,
        "byteIndex": 602
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Available component types in an OpenAPI document."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "array",
          "array": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ComponentsFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
        "line": 27,
        "col": 0,
        "byteIndex": 791
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasComponents}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "schemas",
                "jsDoc": {
                  "doc": "Reusable schema components"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 29,
                  "col": 2,
                  "byteIndex": 862
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RefName",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RefName"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasSchema",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasSchema"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "schema",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "schema"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "responses",
                "jsDoc": {
                  "doc": "Reusable response components"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 31,
                  "col": 2,
                  "byteIndex": 958
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RefName",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RefName"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasResponse",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasResponse"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "response",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "response"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "parameters",
                "jsDoc": {
                  "doc": "Reusable parameter components"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 33,
                  "col": 2,
                  "byteIndex": 1061
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RefName",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RefName"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasParameter",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasParameter"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "parameter",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "parameter"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "jsDoc": {
                  "doc": "Reusable example components"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 35,
                  "col": 2,
                  "byteIndex": 1165
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RefName",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RefName"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasExample",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExample"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "example",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "example"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "requestBodies",
                "jsDoc": {
                  "doc": "Reusable request body components"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1268
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RefName",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RefName"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasRequestBody",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasRequestBody"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "requestBody",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "requestBody"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "headers",
                "jsDoc": {
                  "doc": "Reusable header components"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 39,
                  "col": 2,
                  "byteIndex": 1378
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "RefName",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "RefName"
                        }
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasHeader",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasHeader"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "header",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "header"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "securitySchemes",
                "jsDoc": {
                  "doc": "Reusable security scheme components"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 41,
                  "col": 2,
                  "byteIndex": 1481
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasSecurityScheme",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasSecurityScheme"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "securityScheme",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "securityScheme"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
                  "line": 43,
                  "col": 2,
                  "byteIndex": 1612
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasComponents",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
        "line": 203,
        "col": 0,
        "byteIndex": 6494
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents the OpenAPI Components Object in the SKMTC OAS processing system.\n\nThe `OasComponents` class manages the reusable components section of an OpenAPI\ndocument, providing centralized access to shared schemas, responses, parameters,\nand other reusable elements that can be referenced throughout the API specification.\n\nThis class serves as the central registry for all reusable components, enabling\nefficient reference resolution and reducing duplication in OpenAPI documents.\n\n## Key Features\n\n- **Schema Management**: Central repository for reusable data schemas\n- **Response Reuse**: Common response definitions for consistent API responses\n- **Parameter Standardization**: Shared parameter definitions across operations\n- **Reference Resolution**: Support for internal references ($ref) to components\n- **Type Safety**: Strongly typed access to different component categories\n- **Extension Support**: Custom OpenAPI extension field handling\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic component access\n```typescript\nimport { OasComponents } from '@skmtc/core';\n\n// Typically created during document parsing\nconst components = new OasComponents({\n  schemas: {\n    User: new OasObject({\n      properties: {\n        id: new OasString(),\n        name: new OasString()\n      }\n    }),\n    Product: new OasObject({\n      properties: {\n        id: new OasString(),\n        price: new OasNumber()\n      }\n    })\n  },\n  responses: {\n    NotFound: new OasResponse({\n      description: '404 - Resource not found'\n    })\n  }\n});\n\n// Access schemas\nconst userSchema = components.schemas?.['User'];\nconst productSchema = components.schemas?.['Product'];\n\n// Access responses\nconst notFoundResponse = components.responses?.['NotFound'];\n```\n"
          },
          {
            "kind": "example",
            "doc": "Schema management\n```typescript\n// Get all schema reference names\nconst schemaNames = components.toSchemasRefNames();\nconsole.log(schemaNames); // ['User', 'Product', 'Order']\n\n// Remove a schema (useful for processing)\nconst removedSchema = components.removeSchema('ObsoleteSchema');\nconsole.log('Removed:', removedSchema);\n\n// Check remaining schemas\nconst remainingSchemas = components.toSchemasRefNames();\nconsole.log('Remaining:', remainingSchemas);\n```\n"
          },
          {
            "kind": "example",
            "doc": "Parameter reuse\n```typescript\nconst components = new OasComponents({\n  parameters: {\n    PageSize: new OasParameter({\n      name: 'pageSize',\n      in: 'query',\n      schema: new OasInteger({ minimum: 1, maximum: 100, default: 20 })\n    }),\n    PageNumber: new OasParameter({\n      name: 'page',\n      in: 'query',\n      schema: new OasInteger({ minimum: 1, default: 1 })\n    })\n  }\n});\n\n// These parameters can be referenced in operations:\n// $ref: '#/components/parameters/PageSize'\n// $ref: '#/components/parameters/PageNumber'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Response standardization\n```typescript\nconst components = new OasComponents({\n  responses: {\n    Success: new OasResponse({\n      description: 'Successful operation',\n      content: {\n        'application/json': {\n          schema: new OasObject({\n            properties: {\n              success: new OasBoolean({ default: true }),\n              data: new OasObject({ additionalProperties: true })\n            }\n          })\n        }\n      }\n    }),\n    ValidationError: new OasResponse({\n      description: 'Validation failed',\n      content: {\n        'application/json': {\n          schema: new OasObject({\n            properties: {\n              error: new OasString(),\n              details: new OasArray({\n                items: new OasString()\n              })\n            }\n          })\n        }\n      }\n    })\n  }\n});\n\n// Standardized responses across all operations\n```\n"
          },
          {
            "kind": "example",
            "doc": "Processing components in generators\n```typescript\nclass ComponentProcessor {\n  processDocument(document: OasDocument) {\n    const components = document.components;\n    if (!components) return;\n\n    // Process all schemas\n    if (components.schemas) {\n      Object.entries(components.schemas).forEach(([name, schema]) => {\n        if (schema.isRef()) {\n          console.log(`Schema ${name} is a reference to ${schema.$ref}`);\n        } else {\n          console.log(`Schema ${name} is a direct definition`);\n        }\n      });\n    }\n\n    // Process parameters\n    if (components.parameters) {\n      Object.keys(components.parameters).forEach(paramName => {\n        console.log(`Reusable parameter: ${paramName}`);\n      });\n    }\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasComponents instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Component definitions (defaults to empty object)\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst components = new OasComponents({\n  schemas: {\n    User: userSchema,\n    Product: productSchema\n  },\n  responses: {\n    NotFound: notFoundResponse\n  }\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "ComponentsFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ComponentsFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 227,
              "col": 2,
              "byteIndex": 7045
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Static identifier property for OasComponents"
            },
            "tsType": {
              "repr": "components",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "components"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 205,
              "col": 2,
              "byteIndex": 6579
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Gets all schema reference names.\n\nThis method extracts the keys from the schemas object and returns them\nas an array of RefName types. Useful for iterating over all available\nschemas or checking schema availability.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Array of reference names for all schemas\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst components = new OasComponents({\n  schemas: {\n    User: userSchema,\n    Product: productSchema,\n    Order: orderSchema\n  }\n});\n\nconst schemaNames = components.toSchemasRefNames();\nconsole.log(schemaNames); // ['User', 'Product', 'Order']\n\n// Use for processing\nschemaNames.forEach(name => {\n  const schema = components.schemas?.[name];\n  console.log(`Processing schema: ${name}`);\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toSchemasRefNames",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 260,
              "col": 2,
              "byteIndex": 7956
            }
          },
          {
            "jsDoc": {
              "doc": "Record holding re-usable {@link OasSchema} objects or Refs"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "schemas",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasSchema",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasSchema"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "schema",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "schema"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 265,
              "col": 2,
              "byteIndex": 8129
            }
          },
          {
            "jsDoc": {
              "doc": "Removes a schema from the components and returns it.\n\nThis method permanently removes a schema from the components object\nand returns the removed schema. This is useful during processing when\nyou need to extract and handle specific schemas separately.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "refName",
                  "doc": "- The reference name of the schema to remove"
                },
                {
                  "kind": "return",
                  "doc": "The removed schema object or reference\n"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When the schema doesn't exist or schemas object is undefined\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst components = new OasComponents({\n  schemas: {\n    User: userSchema,\n    Product: productSchema,\n    Internal: internalSchema\n  }\n});\n\n// Remove internal schema that shouldn't be exposed\nconst internalSchema = components.removeSchema('Internal');\nconsole.log('Removed internal schema');\n\n// Check remaining schemas\nconst remainingSchemas = components.toSchemasRefNames();\nconsole.log(remainingSchemas); // ['User', 'Product']\n\n// Process removed schema separately\nif (!internalSchema.isRef()) {\n  console.log('Processing internal schema privately');\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "removeSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "refName",
                  "optional": false,
                  "tsType": {
                    "repr": "RefName",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "RefName"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 305,
              "col": 2,
              "byteIndex": 9449
            }
          },
          {
            "jsDoc": {
              "doc": "Record holding re-usable {@link OasResponse} objects or Refs"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "responses",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasResponse",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasResponse"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "response",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "response"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 314,
              "col": 2,
              "byteIndex": 9709
            }
          },
          {
            "jsDoc": {
              "doc": "Record holding re-usable {@link OasParameter} objects or Refs"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "parameters",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasParameter",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasParameter"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "parameter",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "parameter"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 319,
              "col": 2,
              "byteIndex": 9903
            }
          },
          {
            "jsDoc": {
              "doc": "Record holding re-usable {@link OasExample} objects or Refs"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "examples",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasExample",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasExample"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "example",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "example"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 324,
              "col": 2,
              "byteIndex": 10099
            }
          },
          {
            "jsDoc": {
              "doc": "Record holding re-usable {@link OasRequestBody} objects or Refs"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "requestBodies",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasRequestBody",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasRequestBody"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "requestBody",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "requestBody"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 329,
              "col": 2,
              "byteIndex": 10291
            }
          },
          {
            "jsDoc": {
              "doc": "Record holding re-usable {@link OasHeader} objects or Refs"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "headers",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "RefName",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "RefName"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasHeader",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasHeader"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "header",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "header"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 334,
              "col": 2,
              "byteIndex": 10496
            }
          },
          {
            "jsDoc": {
              "doc": "Record holding re-usable {@link OasSecurityScheme} objects or Refs"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "securitySchemes",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasSecurityScheme",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasSecurityScheme"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "securityScheme",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "securityScheme"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 339,
              "col": 2,
              "byteIndex": 10687
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/Components.ts",
              "line": 344,
              "col": 2,
              "byteIndex": 10872
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasComponentsData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
        "line": 25,
        "col": 0,
        "byteIndex": 883
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 919
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "components",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "components"
                  }
                },
                "typeParams": []
              },
              {
                "name": "schemas",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 943
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasSchemaData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasSchemaData"
                            }
                          },
                          {
                            "repr": "OasSchemaRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasSchemaRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "responses",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1004
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasResponseData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasResponseData"
                            }
                          },
                          {
                            "repr": "OasResponseRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasResponseRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "parameters",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
                  "line": 29,
                  "col": 2,
                  "byteIndex": 1071
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasParameterData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasParameterData"
                            }
                          },
                          {
                            "repr": "OasParameterRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasParameterRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1141
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasExampleData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleData"
                            }
                          },
                          {
                            "repr": "OasExampleRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "requestBodies",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
                  "line": 31,
                  "col": 2,
                  "byteIndex": 1205
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasRequestBodyData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasRequestBodyData"
                            }
                          },
                          {
                            "repr": "OasRequestBodyRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasRequestBodyRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "headers",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1282
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasHeaderData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasHeaderData"
                            }
                          },
                          {
                            "repr": "OasHeaderRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasHeaderRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasComponentsData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/components/components-types.ts",
        "line": 35,
        "col": 13,
        "byteIndex": 1357
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasComponentsData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasComponentsData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ContactFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
        "line": 7,
        "col": 0,
        "byteIndex": 182
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasContact}.\n\nDefines the configuration options for creating contact information,\nincluding name, URL, email, and extension fields."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 214
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "url",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 230
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "email",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
                  "line": 10,
                  "col": 2,
                  "byteIndex": 245
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
                  "line": 11,
                  "col": 2,
                  "byteIndex": 262
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasContact",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
        "line": 40,
        "col": 0,
        "byteIndex": 1024
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Contact Object in the OpenAPI Specification.\n\nThe `OasContact` class encapsulates contact information for the API,\nproviding details about who to contact for support, questions, or issues.\nThis information is typically displayed in API documentation.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic contact information\n```typescript\nimport { OasContact } from '@skmtc/core';\n\nconst contact = new OasContact({\n  name: 'API Support Team',\n  email: 'support@example.com'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complete contact details\n```typescript\nconst fullContact = new OasContact({\n  name: 'John Doe',\n  url: 'https://example.com/contact',\n  email: 'john@example.com'\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasContact instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Contact information fields including name, URL, and email"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "ContactFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ContactFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
              "line": 58,
              "col": 2,
              "byteIndex": 1665
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for this OAS contact object"
            },
            "tsType": {
              "repr": "contact",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "contact"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
              "line": 42,
              "col": 2,
              "byteIndex": 1105
            }
          },
          {
            "jsDoc": {
              "doc": "The identifying name of the contact person/organization"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "name",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
              "line": 45,
              "col": 2,
              "byteIndex": 1202
            }
          },
          {
            "jsDoc": {
              "doc": "URL pointing to the contact information"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "url",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
              "line": 47,
              "col": 2,
              "byteIndex": 1278
            }
          },
          {
            "jsDoc": {
              "doc": "Email address of the contact person/organization"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "email",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
              "line": 49,
              "col": 2,
              "byteIndex": 1362
            }
          },
          {
            "jsDoc": {
              "doc": "Custom extension fields (x-* properties) for additional contact metadata"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/Contact.ts",
              "line": 51,
              "col": 2,
              "byteIndex": 1472
            }
          }
        ],
        "indexSignatures": [],
        "methods": [],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasContactData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/contact-types.ts",
        "line": 73,
        "col": 0,
        "byteIndex": 2158
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI contact information objects.\n\nThis type represents contact information as specified in the OpenAPI v3 specification's\nInfo Object. Contact information provides details about the person or organization\nresponsible for the API, including optional name, website URL, and email address.\n\nThe contact information is typically displayed in API documentation and used by\ndevelopers to reach out for support, questions, or feedback about the API.\n\n## Usage in SKMTC Pipeline\n\nThis type is used by:\n- Info processors to validate and structure contact information\n- Documentation generators to display API maintainer information\n- Client generators to embed support contact details in generated code\n- Validation systems to ensure contact information completeness\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic contact information\n```typescript\nimport type { OasContactData } from '@skmtc/core/oas/contact';\n\nconst apiContact: OasContactData = {\n  oasType: 'contact',\n  name: 'API Support Team',\n  url: 'https://company.com/support',\n  email: 'api-support@company.com'\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Minimal contact with only email\n```typescript\nconst minimalContact: OasContactData = {\n  oasType: 'contact',\n  email: 'support@api-company.com'\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Contact with name and URL\n```typescript\nconst teamContact: OasContactData = {\n  oasType: 'contact',\n  name: 'Development Team',\n  url: 'https://github.com/company/api-repo'\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration in OpenAPI Info object\n```typescript\nconst apiInfo = {\n  title: 'My API',\n  version: '1.0.0',\n  description: 'A comprehensive API for managing resources',\n  contact: {\n    oasType: 'contact',\n    name: 'Jane Doe',\n    url: 'https://janedoe.dev',\n    email: 'jane@company.com'\n  }\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Empty contact (valid but not recommended)\n```typescript\nconst emptyContact: OasContactData = {\n  oasType: 'contact'\n  // All fields are optional, but at least one should be provided\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type identifier for SKMTC internal processing"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/contact-types.ts",
                  "line": 75,
                  "col": 2,
                  "byteIndex": 2246
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "contact",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "contact"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "jsDoc": {
                  "doc": "The identifying name of the contact person or organization"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/contact-types.ts",
                  "line": 77,
                  "col": 2,
                  "byteIndex": 2335
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "url",
                "jsDoc": {
                  "doc": "The URL pointing to the contact information (website, GitHub, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/contact-types.ts",
                  "line": 79,
                  "col": 2,
                  "byteIndex": 2428
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "email",
                "jsDoc": {
                  "doc": "The email address of the contact person or organization"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/contact-types.ts",
                  "line": 81,
                  "col": 2,
                  "byteIndex": 2508
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasContactData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/contact/contact-types.ts",
        "line": 186,
        "col": 13,
        "byteIndex": 5761
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI contact data objects.\n\nThis schema validates OpenAPI contact information according to the OpenAPI v3\nspecification. All contact fields are optional, allowing for flexible contact\ninformation configurations. The schema ensures proper string formatting for\nname, URL, and email fields while maintaining the required `oasType` identifier.\n\nNote that while all fields are optional according to the OpenAPI specification,\nit's recommended to provide at least one contact method for practical API usage.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating complete contact information\n```typescript\nimport { oasContactData } from '@skmtc/core/oas/contact';\nimport * as v from 'valibot';\n\nconst contact = {\n  oasType: 'contact',\n  name: 'API Support',\n  url: 'https://api.company.com/support',\n  email: 'support@company.com'\n};\n\nconst validated = v.parse(oasContactData, contact);\nconsole.log(validated.name); // 'API Support'\nconsole.log(validated.email); // 'support@company.com'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating partial contact information\n```typescript\nconst partialContact = {\n  oasType: 'contact',\n  email: 'help@api.com'\n  // name and url are optional and omitted\n};\n\nconst result = v.parse(oasContactData, partialContact);\nconsole.log(result.email); // 'help@api.com'\nconsole.log(result.name); // undefined\nconsole.log(result.url); // undefined\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validation error handling\n```typescript\nconst invalidContact = {\n  oasType: 'contact',\n  name: 123, // Invalid: should be string\n  email: 'valid@email.com'\n};\n\ntry {\n  v.parse(oasContactData, invalidContact);\n} catch (error) {\n  console.error('Contact validation failed:', error.message);\n  // Handle validation errors appropriately\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in OpenAPI document processing\n```typescript\nfunction processApiInfo(infoObject: unknown) {\n  // Validate the info object structure\n  const info = parseInfoObject(infoObject);\n\n  // If contact information exists, validate it\n  if (info.contact) {\n    const validatedContact = v.parse(oasContactData, {\n      oasType: 'contact',\n      ...info.contact\n    });\n\n    console.log(`API maintained by: ${validatedContact.name || 'Unknown'}`);\n    console.log(`Support: ${validatedContact.email || 'No email provided'}`);\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with documentation generators\n```typescript\nclass DocumentationGenerator {\n  generateContactSection(contactData: OasContactData): string {\n    const validated = v.parse(oasContactData, contactData);\n\n    let contactSection = '## Contact Information\\n\\n';\n\n    if (validated.name) {\n      contactSection += `**Maintainer:** ${validated.name}\\n\\n`;\n    }\n\n    if (validated.email) {\n      contactSection += `**Email:** [${validated.email}](mailto:${validated.email})\\n\\n`;\n    }\n\n    if (validated.url) {\n      contactSection += `**Website:** [${validated.url}](${validated.url})\\n\\n`;\n    }\n\n    return contactSection;\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasContactData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasContactData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "DiscriminatorFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "propertyName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
                  "line": 2,
                  "col": 2,
                  "byteIndex": 38
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "mapping",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
                  "line": 3,
                  "col": 2,
                  "byteIndex": 61
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasDiscriminator",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
        "line": 6,
        "col": 0,
        "byteIndex": 97
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "DiscriminatorFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "DiscriminatorFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
              "line": 11,
              "col": 2,
              "byteIndex": 235
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "discriminator",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "discriminator"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
              "line": 7,
              "col": 2,
              "byteIndex": 131
            }
          },
          {
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "propertyName",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
              "line": 8,
              "col": 2,
              "byteIndex": 176
            }
          },
          {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "mapping",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/Discriminator.ts",
              "line": 9,
              "col": 2,
              "byteIndex": 199
            }
          }
        ],
        "indexSignatures": [],
        "methods": [],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasDiscriminatorData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/discriminator-types.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 304
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI discriminator objects.\n\nDiscriminators are used with union types (oneOf/anyOf) to provide\nhints about which schema variant to use based on a property value.\nThis enables more efficient type resolution and better tooling support."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type category identifier for discriminator objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/discriminator-types.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 403
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "discriminator",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "discriminator"
                  }
                },
                "typeParams": []
              },
              {
                "name": "propertyName",
                "jsDoc": {
                  "doc": "Name of the property that contains the discriminator value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/discriminator-types.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 498
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "mapping",
                "jsDoc": {
                  "doc": "Optional mapping from property values to schema names"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/discriminator-types.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 584
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasDiscriminatorData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/discriminator/discriminator-types.ts",
        "line": 26,
        "col": 13,
        "byteIndex": 915
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI discriminator data objects.\n\nValidates discriminator objects including the required property name\nand optional value-to-schema mappings. Used to ensure discriminator\nobjects conform to OpenAPI specification requirements."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasDiscriminatorData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasDiscriminatorData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "DocumentFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
        "line": 20,
        "col": 0,
        "byteIndex": 881
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Fields that define the structure of an OpenAPI v3 document.\n\nThis type represents the normalized structure of an OpenAPI document after\nparsing, with operations flattened from the nested paths structure into\na simple array for easier processing."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "openapi",
                "jsDoc": {
                  "doc": "OpenAPI specification version (e.g., '3.0.0', '3.1.0')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 978
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "info",
                "jsDoc": {
                  "doc": "API metadata including title, version, description"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 1056
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasInfo",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasInfo"
                  }
                },
                "typeParams": []
              },
              {
                "name": "servers",
                "jsDoc": {
                  "doc": "Array of server objects providing connectivity information"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 1140
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "OasServer",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasServer"
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "operations",
                "jsDoc": {
                  "doc": "Flattened array of all operations from all paths"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1234
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "OasOperation",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasOperation"
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "components",
                "jsDoc": {
                  "doc": "Container for reusable components (schemas, responses, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1333
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasComponents",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasComponents"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "tags",
                "jsDoc": {
                  "doc": "List of tags used by operations with additional metadata"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1440
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "OasTag",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasTag"
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "security",
                "jsDoc": {
                  "doc": "Default security requirements that apply to all operations"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1538
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "OasSecurityRequirement",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasSecurityRequirement"
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
                  "line": 36,
                  "col": 2,
                  "byteIndex": 1638
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasDocument",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
        "line": 99,
        "col": 0,
        "byteIndex": 3666
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a complete OpenAPI v3 document in the SKMTC OAS processing system.\n\nThe `OasDocument` class is the root object in the OAS hierarchy, containing all\nthe information needed to describe a complete REST API. It provides normalized\naccess to document properties with built-in validation and error handling.\n\n## Key Features\n\n- **Normalized Structure**: Operations are flattened from nested paths for easier processing\n- **Lazy Initialization**: Fields are set after construction during parsing\n- **Type Safety**: All properties are typed and validated on access\n- **Extensibility**: Supports OpenAPI extension fields (x-* properties)\n- **JSON Serialization**: Can be converted back to standard OpenAPI JSON format\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic document access\n```typescript\nimport { OasDocument } from '@skmtc/core';\n\n// Document is typically created during parsing\nconst document = new OasDocument();\ndocument.fields = {\n  openapi: '3.0.0',\n  info: { title: 'My API', version: '1.0.0' },\n  operations: [\n    // ... parsed operations\n  ],\n  components: {\n    schemas: {\n      User: { type: 'object', properties: { id: { type: 'string' } } }\n    }\n  }\n};\n\nconsole.log(document.info.title); // 'My API'\nconsole.log(document.operations.length); // Number of operations\n```\n"
          },
          {
            "kind": "example",
            "doc": "Iterating over operations\n```typescript\n// Process all operations in the document\nfor (const operation of document.operations) {\n  console.log(`${operation.method.toUpperCase()} ${operation.path}`);\n\n  if (operation.operationId) {\n    console.log(`Operation ID: ${operation.operationId}`);\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Working with components\n```typescript\nif (document.components?.schemas) {\n  const userSchema = document.components.schemas.get('User');\n  if (userSchema) {\n    console.log('User schema found:', userSchema);\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasDocument instance.\n\nThe document is typically created with undefined fields and populated\nlater during the parsing process. This allows for lazy initialization\nand proper error handling during document processing.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Optional document fields (usually set later during parsing)\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// Usually created without fields during parsing\nconst document = new OasDocument();\n\n// Fields are set later by the parser\ndocument.fields = parsedDocumentFields;\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": true,
                "tsType": {
                  "repr": "DocumentFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "DocumentFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 124,
              "col": 2,
              "byteIndex": 4456
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Static identifier property for OasDocument"
            },
            "tsType": {
              "repr": "openapi",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "openapi"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 101,
              "col": 2,
              "byteIndex": 3747
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Removes an item from the document based on a stack trail path.\n\nThis method is used internally during document processing to remove\nspecific operations or schema components. The stack trail indicates\nthe path to the item within the document structure.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "stackTrail",
                  "doc": "- Path to the item to remove"
                },
                {
                  "kind": "return",
                  "doc": "The removed item, or undefined if not found\n"
                },
                {
                  "kind": "internal"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// Remove an operation at /users POST\nconst removed = document.removeItem(new StackTrail(['paths', '/users', 'post']));\n\n// Remove a schema component\nconst removedSchema = document.removeItem(new StackTrail(['components', 'schemas', 'User']));\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "removeItem",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "stackTrail",
                  "optional": false,
                  "tsType": {
                    "repr": "StackTrail",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "StackTrail"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasOperation",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasOperation"
                    }
                  },
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 149,
              "col": 2,
              "byteIndex": 5328
            }
          },
          {
            "jsDoc": {
              "doc": "Sets the document fields after parsing.\n\nThis setter is called by the parsing pipeline to populate the document\nwith parsed OpenAPI data. It enables lazy initialization and proper\nerror handling during document processing.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- The parsed document fields\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst document = new OasDocument();\ndocument.fields = {\n  openapi: '3.0.0',\n  info: { title: 'API', version: '1.0' },\n  operations: [],\n  // ... other fields\n};\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "fields",
            "kind": "setter",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "DocumentFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "DocumentFields"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "void",
                "kind": "keyword",
                "keyword": "void"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 198,
              "col": 2,
              "byteIndex": 6734
            }
          },
          {
            "jsDoc": {
              "doc": "OpenAPI specification version"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "openapi",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 203,
              "col": 2,
              "byteIndex": 6843
            }
          },
          {
            "jsDoc": {
              "doc": "API metadata"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "info",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasInfo",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasInfo"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 212,
              "col": 2,
              "byteIndex": 7027
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "servers",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "OasServer",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasServer"
                      }
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 220,
              "col": 2,
              "byteIndex": 7181
            }
          },
          {
            "jsDoc": {
              "doc": "List of all operations for the API"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "operations",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "OasOperation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasOperation"
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 229,
              "col": 2,
              "byteIndex": 7404
            }
          },
          {
            "jsDoc": {
              "doc": "Container object for re-usable schema items within the API"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "components",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasComponents",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasComponents"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 238,
              "col": 2,
              "byteIndex": 7651
            }
          },
          {
            "jsDoc": {
              "doc": "List of tags used by API with additional metadata"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "tags",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "OasTag",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasTag"
                      }
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 247,
              "col": 2,
              "byteIndex": 7900
            }
          },
          {
            "jsDoc": {
              "doc": "List of security requirements for the API"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "security",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "OasSecurityRequirement",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSecurityRequirement"
                      }
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 256,
              "col": 2,
              "byteIndex": 8118
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 265,
              "col": 2,
              "byteIndex": 8353
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the document back to a JSON-serializable OpenAPI object.\n\nThis method serializes the document to a standard OpenAPI v3 format,\nwhich can be used for output, validation, or further processing. The\nresulting object follows the OpenAPI specification structure.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "A JSON-serializable object representing the OpenAPI document\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// Convert document back to standard OpenAPI format\nconst openApiJson = document.toJSON();\n\n// Can be stringified for output\nconst yamlString = JSON.stringify(openApiJson, null, 2);\n\n// Or used with OpenAPI tools\nawait validateOpenApiDocument(openApiJson);\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJSON",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "object",
                "kind": "keyword",
                "keyword": "object"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/Document.ts",
              "line": 294,
              "col": 2,
              "byteIndex": 9298
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasDocumentData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
        "line": 7,
        "col": 0,
        "byteIndex": 350
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 384
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "openapi",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "openapi"
                  }
                },
                "typeParams": []
              },
              {
                "name": "openapi",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 405
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "info",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
                  "line": 10,
                  "col": 2,
                  "byteIndex": 423
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasInfoData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasInfoData"
                  }
                },
                "typeParams": []
              },
              {
                "name": "jsonSchemaDialect",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
                  "line": 11,
                  "col": 2,
                  "byteIndex": 443
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "operations",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 503
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "OasOperationData",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasOperationData"
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "components",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 605
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "OasComponentsData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasComponentsData"
                  }
                },
                "typeParams": []
              },
              {
                "name": "tags",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 659
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "OasTagData",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasTagData"
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasDocumentData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/document/document-types.ts",
        "line": 20,
        "col": 13,
        "byteIndex": 695
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasDocumentData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasDocumentData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ExampleFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
        "line": 8,
        "col": 0,
        "byteIndex": 209
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasExample}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "summary",
                "jsDoc": {
                  "doc": "Short summary of the example"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
                  "line": 10,
                  "col": 2,
                  "byteIndex": 279
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Longer description of the example"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 352
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "value",
                "jsDoc": {
                  "doc": "The example value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 413
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 480
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasExample",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
        "line": 93,
        "col": 0,
        "byteIndex": 2936
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an Example Object in the OpenAPI Specification.\n\nThe `OasExample` class provides sample data for parameters, request bodies,\nresponses, and other components in an OpenAPI document. Examples are crucial\nfor API documentation, testing, and helping developers understand expected\ndata formats and structures.\n\nThis class supports rich example definitions with metadata, making API\ndocumentation more informative and interactive for developers.\n\n## Key Features\n\n- **Sample Data**: Concrete examples of API inputs and outputs\n- **Documentation**: Summary and description for context\n- **Type Flexibility**: Supports any data type as example values\n- **Reference Support**: Can be referenced from multiple locations\n- **Markdown Support**: Rich text descriptions with CommonMark\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Simple string example\n```typescript\nimport { OasExample } from '@skmtc/core';\n\nconst nameExample = new OasExample({\n  summary: 'Typical user name',\n  description: 'A common first and last name combination',\n  value: 'John Doe'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "JSON object example\n```typescript\nconst userExample = new OasExample({\n  summary: 'Complete user profile',\n  description: 'Example user with all profile fields populated',\n  value: {\n    id: 12345,\n    name: 'Jane Smith',\n    email: 'jane.smith@example.com',\n    active: true,\n    createdAt: '2023-01-15T10:30:00Z'\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Array example with multiple items\n```typescript\nconst productsExample = new OasExample({\n  summary: 'Product list sample',\n  description: 'Typical response for product catalog endpoint',\n  value: [\n    { id: 1, name: 'Laptop', price: 999.99, category: 'Electronics' },\n    { id: 2, name: 'Book', price: 19.99, category: 'Education' },\n    { id: 3, name: 'Coffee Mug', price: 12.50, category: 'Home' }\n  ]\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error response example\n```typescript\nconst errorExample = new OasExample({\n  summary: 'Validation error',\n  description: 'Response when request validation fails',\n  value: {\n    error: 'Validation failed',\n    code: 'INVALID_INPUT',\n    details: [\n      { field: 'email', message: 'Invalid email format' },\n      { field: 'age', message: 'Must be between 18 and 120' }\n    ]\n  }\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "ExampleFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ExampleFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 99,
              "col": 2,
              "byteIndex": 3093
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Static identifier property for OasExample"
            },
            "tsType": {
              "repr": "example",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "example"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 95,
              "col": 2,
              "byteIndex": 3015
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Brief summary of example"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "summary",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 104,
              "col": 2,
              "byteIndex": 3197
            }
          },
          {
            "jsDoc": {
              "doc": "Detailed description of the example. May contain CommonMark Markdown"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 109,
              "col": 2,
              "byteIndex": 3350
            }
          },
          {
            "jsDoc": {
              "doc": "Embedded example value"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "value",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "unknown",
                "kind": "keyword",
                "keyword": "unknown"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 114,
              "col": 2,
              "byteIndex": 3465
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 119,
              "col": 2,
              "byteIndex": 3565
            }
          },
          {
            "jsDoc": {
              "doc": "Returns true if object is a reference"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"example\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "example",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "example"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 124,
              "col": 2,
              "byteIndex": 3720
            }
          },
          {
            "jsDoc": {
              "doc": "Returns itself"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasExample",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasExample"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 129,
              "col": 2,
              "byteIndex": 3805
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasExample",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasExample"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 133,
              "col": 2,
              "byteIndex": 3852
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "_options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.ExampleObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.ExampleObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/Example.ts",
              "line": 137,
              "col": 2,
              "byteIndex": 3903
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasExampleData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/example-types.ts",
        "line": 4,
        "col": 0,
        "byteIndex": 87
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/example-types.ts",
                  "line": 5,
                  "col": 2,
                  "byteIndex": 120
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "example",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "example"
                  }
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/example-types.ts",
                  "line": 6,
                  "col": 2,
                  "byteIndex": 141
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/example-types.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 160
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "value",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/example-types.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 183
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasExampleData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/example/example-types.ts",
        "line": 12,
        "col": 13,
        "byteIndex": 243
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasExampleData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasExampleData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "HeaderFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
        "line": 11,
        "col": 0,
        "byteIndex": 379
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasHeader}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A brief description of the header"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 453
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Whether the header is required"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 527
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "jsDoc": {
                  "doc": "Whether the header is deprecated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 601
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "Schema defining the header's data type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
                  "line": 19,
                  "col": 2,
                  "byteIndex": 683
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "jsDoc": {
                  "doc": "Example values for the header"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
                  "line": 21,
                  "col": 2,
                  "byteIndex": 773
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OasExample",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "OasExample"
                                }
                              },
                              {
                                "repr": "OasRef",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "example",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "example"
                                      }
                                    }
                                  ],
                                  "typeName": "OasRef"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "content",
                "jsDoc": {
                  "doc": "Content definitions for complex header values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 899
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "OasMediaType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasMediaType"
                            }
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 1001
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasHeader",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
        "line": 235,
        "col": 0,
        "byteIndex": 7324
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Header Object in the OpenAPI Specification.\n\nThe `OasHeader` class encapsulates the definition of a single HTTP header that\ncan be sent with responses or expected in requests. Headers provide additional\nmetadata about the HTTP message and can include authentication tokens, content\ninformation, pagination data, rate limiting details, and more.\n\nThis class provides comprehensive support for header definitions with typed\nvalues, validation schemas, examples, and documentation.\n\n## Key Features\n\n- **Schema Validation**: Typed header values through schema definitions\n- **Examples**: Multiple example values for documentation and testing\n- **Content Types**: Support for complex header values with media types\n- **Deprecation Support**: Mark headers as deprecated with proper warnings\n- **Required/Optional**: Control whether headers are mandatory\n- **Documentation**: Rich description support for API documentation\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic authentication header\n```typescript\nimport { OasHeader, OasString } from '@skmtc/core';\n\nconst authHeader = new OasHeader({\n  description: 'Bearer token for API authentication',\n  required: true,\n  schema: new OasString({\n    pattern: '^Bearer [A-Za-z0-9+/=]+$',\n    description: 'JWT bearer token'\n  }),\n  examples: {\n    valid: new OasExample({\n      summary: 'Valid bearer token',\n      value: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Pagination headers\n```typescript\nconst totalCountHeader = new OasHeader({\n  description: 'Total number of items available',\n  required: false,\n  schema: new OasInteger({\n    minimum: 0,\n    description: 'Non-negative integer count'\n  }),\n  examples: {\n    empty: new OasExample({ value: 0, description: 'No items' }),\n    normal: new OasExample({ value: 150, description: 'Normal case' }),\n    large: new OasExample({ value: 10000, description: 'Large dataset' })\n  }\n});\n\nconst linkHeader = new OasHeader({\n  description: 'Pagination links (RFC 5988)',\n  required: false,\n  schema: new OasString({\n    description: 'Comma-separated list of link relations'\n  }),\n  examples: {\n    withNext: new OasExample({\n      value: '</api/users?page=2>; rel=\"next\", </api/users?page=10>; rel=\"last\"'\n    }),\n    lastPage: new OasExample({\n      value: '</api/users?page=9>; rel=\"prev\", </api/users?page=1>; rel=\"first\"'\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Content type and encoding headers\n```typescript\nconst contentTypeHeader = new OasHeader({\n  description: 'MIME type of the response content',\n  required: true,\n  schema: new OasString({\n    enum: [\n      'application/json',\n      'application/xml',\n      'text/csv',\n      'application/pdf',\n      'application/octet-stream'\n    ]\n  }),\n  examples: {\n    json: new OasExample({ value: 'application/json' }),\n    xml: new OasExample({ value: 'application/xml' }),\n    csv: new OasExample({ value: 'text/csv' })\n  }\n});\n\nconst contentLengthHeader = new OasHeader({\n  description: 'Size of the response body in bytes',\n  required: false,\n  schema: new OasInteger({\n    minimum: 0,\n    description: 'Content size in bytes'\n  })\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Rate limiting headers\n```typescript\nconst rateLimitHeader = new OasHeader({\n  description: 'Number of requests remaining in the current window',\n  required: false,\n  schema: new OasInteger({\n    minimum: 0,\n    description: 'Remaining request count'\n  }),\n  examples: {\n    available: new OasExample({ value: 95, description: '95 requests remaining' }),\n    depleted: new OasExample({ value: 0, description: 'Rate limit reached' })\n  }\n});\n\nconst rateLimitResetHeader = new OasHeader({\n  description: 'Unix timestamp when the rate limit window resets',\n  required: false,\n  schema: new OasInteger({\n    minimum: 0,\n    description: 'Unix timestamp in seconds'\n  }),\n  examples: {\n    reset: new OasExample({\n      value: 1634567890,\n      description: 'Reset at 2021-10-18 12:31:30 UTC'\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Custom application headers\n```typescript\nconst requestIdHeader = new OasHeader({\n  description: 'Unique identifier for request tracing',\n  required: false,\n  schema: new OasString({\n    format: 'uuid',\n    description: 'UUID v4 request identifier'\n  }),\n  examples: {\n    uuid: new OasExample({\n      value: '123e4567-e89b-12d3-a456-426614174000',\n      description: 'Request tracking ID'\n    })\n  }\n});\n\nconst serverTimingHeader = new OasHeader({\n  description: 'Server-side performance metrics',\n  required: false,\n  schema: new OasString({\n    description: 'Server-Timing header format (RFC 8760)'\n  }),\n  examples: {\n    timing: new OasExample({\n      value: 'db;dur=53, app;dur=47.2',\n      description: 'Database took 53ms, app logic 47.2ms'\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Deprecated header\n```typescript\nconst deprecatedHeader = new OasHeader({\n  description: 'Legacy API version header (deprecated)',\n  required: false,\n  deprecated: true,\n  schema: new OasString({\n    enum: ['v1', 'v2'],\n    description: 'Use Accept or Content-Type header instead'\n  }),\n  examples: {\n    legacy: new OasExample({\n      value: 'v1',\n      description: 'Legacy version (use Accept header instead)'\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in response definitions\n```typescript\nconst successResponse = new OasResponse({\n  description: 'Paginated user list',\n  headers: {\n    'X-Total-Count': totalCountHeader,\n    'Link': linkHeader,\n    'X-Rate-Limit-Remaining': rateLimitHeader,\n    'X-Rate-Limit-Reset': rateLimitResetHeader,\n    'X-Request-ID': requestIdHeader\n  },\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasArray({\n        items: new OasRef({ $ref: '#/components/schemas/User' })\n      })\n    })\n  }\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "HeaderFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "HeaderFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 239,
              "col": 2,
              "byteIndex": 7407
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "header",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "header"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 236,
              "col": 2,
              "byteIndex": 7351
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Brief description of header"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 244,
              "col": 2,
              "byteIndex": 7513
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates if header is mandatory. Default value is `false`"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "required",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 249,
              "col": 2,
              "byteIndex": 7664
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates if header is deprecated and should no longer be used. Default value is false"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "deprecated",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "boolean",
                    "kind": "keyword",
                    "keyword": "boolean"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 254,
              "col": 2,
              "byteIndex": 7838
            }
          },
          {
            "jsDoc": {
              "doc": "Schema for the header"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "schema",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 259,
              "col": 2,
              "byteIndex": 7951
            }
          },
          {
            "jsDoc": {
              "doc": "Examples of the header"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "examples",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasExample",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasExample"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "example",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "example"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 264,
              "col": 2,
              "byteIndex": 8078
            }
          },
          {
            "jsDoc": {
              "doc": "Content of the header"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "content",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "OasMediaType",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasMediaType"
                          }
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 269,
              "col": 2,
              "byteIndex": 8226
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 274,
              "col": 2,
              "byteIndex": 8363
            }
          },
          {
            "jsDoc": {
              "doc": "Returns true if object is a reference"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"header\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "header",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "header"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 279,
              "col": 2,
              "byteIndex": 8518
            }
          },
          {
            "jsDoc": {
              "doc": "Returns itself"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasHeader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasHeader"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 284,
              "col": 2,
              "byteIndex": 8602
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasHeader",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasHeader"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 288,
              "col": 2,
              "byteIndex": 8648
            }
          },
          {
            "jsDoc": {
              "doc": "Returns schema for the header. Either, `schema` property if\ndefinedor value matching `mediaType` from `content` property.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "mediaType",
                  "doc": "- Optional media type to get schema for. Defaults to `application/json`"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "mediaType",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "right": "application/json",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 297,
              "col": 2,
              "byteIndex": 8936
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.HeaderObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.HeaderObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/Header.ts",
              "line": 311,
              "col": 2,
              "byteIndex": 9255
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasHeaderData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
        "line": 20,
        "col": 0,
        "byteIndex": 769
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI header objects in the SKMTC internal representation.\n\nRepresents HTTP headers in OpenAPI specifications, including validation\nrules, examples, and serialization parameters. Headers are used in\nresponses and can include complex schemas and multiple examples."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type identifier for OAS header objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 849
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "header",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "header"
                  }
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Human-readable description of the header"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 919
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Whether the header is required"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 982
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "jsDoc": {
                  "doc": "Whether the header is deprecated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1045
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "allowEmptyValue",
                "jsDoc": {
                  "doc": "Whether empty values are allowed for the header"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1125
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "Schema definition for the header value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1201
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchemaData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaData"
                      }
                    },
                    {
                      "repr": "OasSchemaRefData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaRefData"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "jsDoc": {
                  "doc": "Named examples for the header value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1290
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasExampleData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleData"
                            }
                          },
                          {
                            "repr": "OasExampleRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "content",
                "jsDoc": {
                  "doc": "Media type definitions for complex header content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 36,
                  "col": 2,
                  "byteIndex": 1413
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasMediaTypeData",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasMediaTypeData"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "style",
                "jsDoc": {
                  "doc": "Serialization style (always 'simple' for headers)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 38,
                  "col": 2,
                  "byteIndex": 1517
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "OasHeaderStyle",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasHeaderStyle"
                  }
                },
                "typeParams": []
              },
              {
                "name": "explode",
                "jsDoc": {
                  "doc": "Whether to explode parameter values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
                  "line": 40,
                  "col": 2,
                  "byteIndex": 1587
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasHeaderStyle",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
        "line": 51,
        "col": 0,
        "byteIndex": 1815
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valid serialization styles for OpenAPI headers.\n\nHeaders can only use the 'simple' serialization style according to\nthe OpenAPI specification."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "simple",
          "kind": "literal",
          "literal": {
            "kind": "string",
            "string": "simple"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasHeaderData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/header/header-types.ts",
        "line": 60,
        "col": 13,
        "byteIndex": 2110
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OAS header data structures.\n\nValidates the structure and content of OpenAPI header objects,\nensuring proper types for all fields including nested schemas,\nexamples, and content definitions."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasHeaderData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasHeaderData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "InfoFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
        "line": 7,
        "col": 0,
        "byteIndex": 164
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasInfo}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "The title of the API"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 223
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "version",
                "jsDoc": {
                  "doc": "The version of the OpenAPI document"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
                  "line": 11,
                  "col": 2,
                  "byteIndex": 284
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the API"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 336
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "termsOfService",
                "jsDoc": {
                  "doc": "A URL to the Terms of Service for the API"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 422
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "contact",
                "jsDoc": {
                  "doc": "The contact information for the exposed API"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 513
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasContact",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasContact"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "license",
                "jsDoc": {
                  "doc": "The license information for the exposed API"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
                  "line": 19,
                  "col": 2,
                  "byteIndex": 601
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasLicense",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasLicense"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
                  "line": 21,
                  "col": 2,
                  "byteIndex": 686
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasInfo",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
        "line": 86,
        "col": 0,
        "byteIndex": 2829
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an Info Object in the OpenAPI Specification.\n\nThe `OasInfo` class encapsulates metadata about the API including its title,\nversion, description, and contact information. This information is displayed\nin API documentation and helps developers understand what the API does and\nhow to use it effectively.\n\nThis class provides essential API metadata that appears at the top level\nof OpenAPI documents and drives documentation generation and tooling.\n\n## Key Features\n\n- **API Identification**: Title and version information for API tracking\n- **Documentation**: Rich description support for API overview\n- **Contact Information**: Developer contact details and support resources\n- **Legal Information**: License and terms of service references\n- **Extension Support**: Custom fields for additional metadata\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic API information\n```typescript\nimport { OasInfo } from '@skmtc/core';\n\nconst apiInfo = new OasInfo({\n  title: 'Pet Store API',\n  version: '1.0.0',\n  description: 'A sample API that uses a petstore as an example'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complete API metadata\n```typescript\nconst fullApiInfo = new OasInfo({\n  title: 'E-Commerce Platform API',\n  version: '2.1.0',\n  description: 'Comprehensive e-commerce API for managing products, orders, and customers',\n  termsOfService: 'https://api.example.com/terms',\n  contact: new OasContact({\n    name: 'API Support Team',\n    url: 'https://api.example.com/support',\n    email: 'api-support@example.com'\n  }),\n  license: new OasLicense({\n    name: 'MIT',\n    url: 'https://opensource.org/licenses/MIT'\n  })\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Versioned API with semantic versioning\n```typescript\nconst versionedInfo = new OasInfo({\n  title: 'User Management Service',\n  version: '3.2.1',\n  description: 'RESTful API for user authentication and profile management',\n  contact: new OasContact({\n    name: 'Development Team',\n    email: 'dev@company.com'\n  })\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasInfo instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- API information fields including title, version, description, and contact details"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "InfoFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InfoFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 97,
              "col": 2,
              "byteIndex": 3157
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for this OAS info object"
            },
            "tsType": {
              "repr": "info",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "info"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 88,
              "col": 2,
              "byteIndex": 2904
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Gets the API title.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The title of the API"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 106,
              "col": 2,
              "byteIndex": 3302
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the API description.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Optional detailed description of the API's purpose and functionality"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 115,
              "col": 2,
              "byteIndex": 3493
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the terms of service URL.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Optional URL pointing to the API's terms of service"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "termsOfService",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 124,
              "col": 2,
              "byteIndex": 3696
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the contact information.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Optional contact information for API support and inquiries"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "contact",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasContact",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasContact"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 133,
              "col": 2,
              "byteIndex": 3911
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the license information.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Optional license information governing API usage"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "license",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasLicense",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasLicense"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 142,
              "col": 2,
              "byteIndex": 4106
            }
          },
          {
            "jsDoc": {
              "doc": "Gets the API version.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The version string of the API (e.g., '1.0.0', '2.1.3')"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "version",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 151,
              "col": 2,
              "byteIndex": 4299
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/Info.ts",
              "line": 156,
              "col": 2,
              "byteIndex": 4402
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasInfoData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
        "line": 6,
        "col": 0,
        "byteIndex": 251
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 281
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "info",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "info"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 299
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 315
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "termsOfService",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
                  "line": 10,
                  "col": 2,
                  "byteIndex": 338
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "contact",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
                  "line": 11,
                  "col": 2,
                  "byteIndex": 364
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "OasContactData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasContactData"
                  }
                },
                "typeParams": []
              },
              {
                "name": "license",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 391
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "OasLicenseData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasLicenseData"
                  }
                },
                "typeParams": []
              },
              {
                "name": "version",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 418
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasInfoData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/info/info-types.ts",
        "line": 16,
        "col": 13,
        "byteIndex": 450
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasInfoData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasInfoData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "LicenseFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
                  "line": 2,
                  "col": 2,
                  "byteIndex": 32
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "url",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
                  "line": 3,
                  "col": 2,
                  "byteIndex": 48
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
                  "line": 4,
                  "col": 2,
                  "byteIndex": 63
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasLicense",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
        "line": 7,
        "col": 0,
        "byteIndex": 108
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "LicenseFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "LicenseFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
              "line": 12,
              "col": 2,
              "byteIndex": 275
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "license",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "license"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
              "line": 8,
              "col": 2,
              "byteIndex": 136
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "name",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
              "line": 9,
              "col": 2,
              "byteIndex": 167
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "url",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
              "line": 10,
              "col": 2,
              "byteIndex": 194
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/License.ts",
              "line": 11,
              "col": 2,
              "byteIndex": 220
            }
          }
        ],
        "indexSignatures": [],
        "methods": [],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasLicenseData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/license-types.ts",
        "line": 3,
        "col": 0,
        "byteIndex": 30
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/license-types.ts",
                  "line": 4,
                  "col": 2,
                  "byteIndex": 63
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "license",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "license"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/license-types.ts",
                  "line": 5,
                  "col": 2,
                  "byteIndex": 84
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "url",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/license-types.ts",
                  "line": 6,
                  "col": 2,
                  "byteIndex": 99
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "identifier",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/license-types.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 114
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasLicenseData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/license/license-types.ts",
        "line": 10,
        "col": 13,
        "byteIndex": 150
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasLicenseData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasLicenseData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "MediaTypeFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 320
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasMediaType}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "mediaType",
                "jsDoc": {
                  "doc": "The media type string (e.g., 'application/json', 'text/xml')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 424
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "The schema defining the structure of the content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 502
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "jsDoc": {
                  "doc": "Example values for the media type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 597
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OasExample",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "OasExample"
                                }
                              },
                              {
                                "repr": "OasRef",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "example",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "example"
                                      }
                                    }
                                  ],
                                  "typeName": "OasRef"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 719
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "encoding",
                "jsDoc": {
                  "doc": "Encoding information for multipart or form data"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 820
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasMediaType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
        "line": 100,
        "col": 0,
        "byteIndex": 3206
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Media Type Object in the OpenAPI Specification.\n\nThe `OasMediaType` class encapsulates the definition of content for different\nmedia types in request bodies and responses. It defines the structure, format,\nand validation rules for content using schemas and provides examples for\ndocumentation and testing purposes.\n\nThis class supports various content types including JSON, XML, form data,\nfile uploads, and binary content, making it essential for describing API\nrequest and response payloads.\n\n## Key Features\n\n- **Schema Validation**: Define content structure through OpenAPI schemas\n- **Multiple Examples**: Rich example support for documentation and testing\n- **Encoding Support**: Handle multipart and form data encoding\n- **Content Type Support**: JSON, XML, binary, form data, and more\n- **Reference Integration**: Work seamlessly with schema references\n",
        "tags": [
          {
            "kind": "example",
            "doc": "JSON content type\n```typescript\nimport { OasMediaType, OasObject, OasString } from '@skmtc/core';\n\nconst jsonContent = new OasMediaType({\n  mediaType: 'application/json',\n  schema: new OasObject({\n    properties: {\n      name: new OasString(),\n      email: new OasString({ format: 'email' })\n    }\n  }),\n  examples: {\n    user: new OasExample({\n      summary: 'Sample user',\n      value: { name: 'John Doe', email: 'john@example.com' }\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "File upload with multipart form data\n```typescript\nconst fileUpload = new OasMediaType({\n  mediaType: 'multipart/form-data',\n  schema: new OasObject({\n    properties: {\n      file: new OasString({ format: 'binary' }),\n      description: new OasString()\n    }\n  }),\n  encoding: {\n    file: {\n      contentType: 'image/png, image/jpeg',\n      style: 'form'\n    }\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "XML content with namespace\n```typescript\nconst xmlContent = new OasMediaType({\n  mediaType: 'application/xml',\n  schema: new OasObject({\n    properties: {\n      product: new OasRef({ $ref: '#/components/schemas/Product' })\n    }\n  }),\n  examples: {\n    sample: new OasExample({\n      value: '<product><name>Widget</name><price>19.99</price></product>'\n    })\n  }\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasMediaType instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Media type configuration including content schema, examples, and encoding"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "MediaTypeFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MediaTypeFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 118,
              "col": 2,
              "byteIndex": 4088
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for this OAS media type"
            },
            "tsType": {
              "repr": "mediaType",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "mediaType"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 102,
              "col": 2,
              "byteIndex": 3285
            }
          },
          {
            "jsDoc": {
              "doc": "The media type identifier (e.g., 'application/json', 'text/xml')"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "mediaType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 104,
              "col": 2,
              "byteIndex": 3396
            }
          },
          {
            "jsDoc": {
              "doc": "The schema defining the structure and validation rules for the content"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "schema",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 106,
              "col": 2,
              "byteIndex": 3496
            }
          },
          {
            "jsDoc": {
              "doc": "Example values demonstrating the media type content"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasExample",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExample"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "example",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "example"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "examples",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 108,
              "col": 2,
              "byteIndex": 3608
            }
          },
          {
            "jsDoc": {
              "doc": "Custom extension fields (x-* properties) defined for this media type"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 110,
              "col": 2,
              "byteIndex": 3757
            }
          },
          {
            "jsDoc": {
              "doc": "Encoding information for multipart and form data serialization"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "encoding",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 112,
              "col": 2,
              "byteIndex": 3884
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Converts this OAS media type to an OpenAPI v3 JSON schema representation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Conversion options including reference handling and formatting preferences"
                },
                {
                  "kind": "return",
                  "doc": "OpenAPI v3 media type object with schema and examples"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.MediaTypeObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.MediaTypeObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/MediaType.ts",
              "line": 132,
              "col": 2,
              "byteIndex": 4588
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasMediaTypeData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/mediaType-types.ts",
        "line": 18,
        "col": 0,
        "byteIndex": 572
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI media type objects.\n\nRepresents media type definitions within request/response bodies,\nspecifying the format, schema, and examples for different content types\nlike application/json, multipart/form-data, etc."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type identifier for OAS media type objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/mediaType-types.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 659
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "mediaType",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "mediaType"
                  }
                },
                "typeParams": []
              },
              {
                "name": "mediaType",
                "jsDoc": {
                  "doc": "The media type identifier (e.g., 'application/json', 'text/plain')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/mediaType-types.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 758
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "Schema definition for the media type content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/mediaType-types.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 832
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchemaData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaData"
                      }
                    },
                    {
                      "repr": "OasSchemaRefData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaRefData"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "jsDoc": {
                  "doc": "Named examples for the media type content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/mediaType-types.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 950
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasExampleData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleData"
                            }
                          },
                          {
                            "repr": "OasExampleRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasMediaTypeData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/mediaType/mediaType-types.ts",
        "line": 37,
        "col": 13,
        "byteIndex": 1279
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI media type data.\n\nValidates the structure of media type objects including content type\nidentifiers, schema definitions, and example collections."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasMediaTypeData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasMediaTypeData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "IntegerFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
        "line": 9,
        "col": 0,
        "byteIndex": 274
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasInteger}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the integer value can be null"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the integer schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 11,
                  "col": 2,
                  "byteIndex": 391
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the integer schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 453
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the integer value can be null"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 523
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "typeParams": []
              },
              {
                "name": "format",
                "jsDoc": {
                  "doc": "Integer format specification (int32 or int64)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 600
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "int32",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "int32"
                      }
                    },
                    {
                      "repr": "int64",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "int64"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value for the integer"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 19,
                  "col": 2,
                  "byteIndex": 668
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of allowed enum values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 21,
                  "col": 2,
                  "byteIndex": 789
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "",
                            "kind": "parenthesized",
                            "parenthesized": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                {
                                  "repr": "null",
                                  "kind": "keyword",
                                  "keyword": "null"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 926
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example value for the integer"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 1009
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "multipleOf",
                "jsDoc": {
                  "doc": "Number must be a multiple of this value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 1141
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "jsDoc": {
                  "doc": "Maximum value (inclusive)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 29,
                  "col": 2,
                  "byteIndex": 1198
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMaximum",
                "jsDoc": {
                  "doc": "Whether maximum is exclusive"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 31,
                  "col": 2,
                  "byteIndex": 1255
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "minimum",
                "jsDoc": {
                  "doc": "Minimum value (inclusive)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 33,
                  "col": 2,
                  "byteIndex": 1319
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMinimum",
                "jsDoc": {
                  "doc": "Whether minimum is exclusive"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
                  "line": 35,
                  "col": 2,
                  "byteIndex": 1376
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "OasInteger",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
        "line": 118,
        "col": 0,
        "byteIndex": 3784
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an integer schema in the OpenAPI Specification.\n\n`OasInteger` handles integer type definitions with comprehensive validation\nconstraints including range limits, multiple-of validation, format specifications,\nand enum restrictions. It supports both 32-bit and 64-bit integer formats\nand provides nullable type support.\n\nThis class is used throughout the OAS processing pipeline to represent\ninteger fields in API schemas, including IDs, counts, timestamps, and\nother numeric values that must be whole numbers.\n\n## Key Features\n\n- **Format Support**: int32 and int64 format specifications\n- **Range Validation**: Minimum and maximum value constraints\n- **Multiple Validation**: Ensure values are multiples of specified numbers\n- **Enum Values**: Restricted sets of allowed integer values\n- **Nullable Support**: Type-safe nullable integer handling\n- **JSON Schema**: Conversion to standard JSON Schema format\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the integer value can be null\n"
          },
          {
            "kind": "example",
            "doc": "Basic integer schema\n```typescript\nimport { OasInteger } from '@skmtc/core';\n\nconst ageInteger = new OasInteger({\n  title: 'Age',\n  description: 'Person age in years',\n  minimum: 0,\n  maximum: 150,\n  example: 25\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "ID with int64 format\n```typescript\nconst userIdInteger = new OasInteger({\n  title: 'User ID',\n  description: 'Unique user identifier',\n  format: 'int64',\n  minimum: 1,\n  example: 1234567890123\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Count with multiple-of validation\n```typescript\nconst batchSizeInteger = new OasInteger({\n  title: 'Batch Size',\n  description: 'Number of items to process',\n  minimum: 10,\n  maximum: 1000,\n  multipleOf: 10, // Must be multiple of 10\n  default: 50\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Status code enum\n```typescript\nconst statusCodeInteger = new OasInteger({\n  title: 'HTTP Status Code',\n  description: 'Valid HTTP response status codes',\n  enums: [200, 201, 400, 401, 404, 500],\n  example: 200\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable integer\n```typescript\nconst optionalCountInteger = new OasInteger<true>({\n  title: 'Optional Count',\n  description: 'Count value that can be null',\n  nullable: true,\n  minimum: 0,\n  default: null\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "IntegerFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Nullable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Nullable"
                          }
                        }
                      ],
                      "typeName": "IntegerFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 178,
              "col": 2,
              "byteIndex": 5395
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 123,
              "col": 2,
              "byteIndex": 3985
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'integer' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "integer",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "integer"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 127,
              "col": 2,
              "byteIndex": 4102
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 131,
              "col": 2,
              "byteIndex": 4179
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 135,
              "col": 2,
              "byteIndex": 4254
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether value can be null."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "nullable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 139,
              "col": 2,
              "byteIndex": 4342
            }
          },
          {
            "jsDoc": {
              "doc": "The format of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "int32",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "int32"
                  }
                },
                {
                  "repr": "int64",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "int64"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "format",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 143,
              "col": 2,
              "byteIndex": 4419
            }
          },
          {
            "jsDoc": {
              "doc": "An array of allowed values for the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "enums",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 147,
              "col": 2,
              "byteIndex": 4520
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 149,
              "col": 2,
              "byteIndex": 4646
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 153,
              "col": 2,
              "byteIndex": 4745
            }
          },
          {
            "jsDoc": {
              "doc": "The multiple of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "multipleOf",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 157,
              "col": 2,
              "byteIndex": 4873
            }
          },
          {
            "jsDoc": {
              "doc": "The maximum value of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "maximum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 161,
              "col": 2,
              "byteIndex": 4957
            }
          },
          {
            "jsDoc": {
              "doc": "Whether the maximum value is exclusive."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "exclusiveMaximum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 165,
              "col": 2,
              "byteIndex": 5044
            }
          },
          {
            "jsDoc": {
              "doc": "The minimum value of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "minimum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 169,
              "col": 2,
              "byteIndex": 5135
            }
          },
          {
            "jsDoc": {
              "doc": "Whether the minimum value is exclusive."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "exclusiveMinimum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 173,
              "col": 2,
              "byteIndex": 5222
            }
          },
          {
            "jsDoc": {
              "doc": "The default value of the integer."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "default",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 177,
              "col": 2,
              "byteIndex": 5313
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 194,
              "col": 2,
              "byteIndex": 5954
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasInteger",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasInteger"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 198,
              "col": 2,
              "byteIndex": 6014
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasInteger",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasInteger"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 202,
              "col": 2,
              "byteIndex": 6071
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.NonArraySchemaObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.NonArraySchemaObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/Integer.ts",
              "line": 207,
              "col": 2,
              "byteIndex": 6169
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "default": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "integerSchema",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
        "line": 9,
        "col": 13,
        "byteIndex": 219
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating integer values.\n\nEnsures values are numbers and specifically integers,\nused for integer validation throughout OAS processing."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "number",
                "kind": "keyword",
                "keyword": "number"
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "integerFormat",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
        "line": 17,
        "col": 13,
        "byteIndex": 490
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for valid integer format values.\n\nDefines the size formats for integer types: int32 for 32-bit signed\nintegers and int64 for 64-bit signed integers."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "int32",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "int32"
                    }
                  },
                  {
                    "repr": "int64",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "int64"
                    }
                  }
                ]
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "oasIntegerData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
        "line": 25,
        "col": 13,
        "byteIndex": 815
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI integer data objects.\n\nValidates integer schemas including size formats (int32/int64),\nrange constraints, multiple validation, and enumeration values."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasIntegerData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasIntegerData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasIntegerData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
        "line": 41,
        "col": 0,
        "byteIndex": 1382
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1415
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "integer",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "integer"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 43,
                  "col": 2,
                  "byteIndex": 1433
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1450
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 45,
                  "col": 2,
                  "byteIndex": 1473
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "format",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1492
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "int32",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "int32"
                      }
                    },
                    {
                      "repr": "int64",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "int64"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "enum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 47,
                  "col": 2,
                  "byteIndex": 1521
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 48,
                  "col": 2,
                  "byteIndex": 1539
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "example",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 49,
                  "col": 2,
                  "byteIndex": 1560
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "multipleOf",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 50,
                  "col": 2,
                  "byteIndex": 1579
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 51,
                  "col": 2,
                  "byteIndex": 1601
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMaximum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 52,
                  "col": 2,
                  "byteIndex": 1620
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "minimum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 53,
                  "col": 2,
                  "byteIndex": 1649
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMinimum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/integer-types.ts",
                  "line": 54,
                  "col": 2,
                  "byteIndex": 1668
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toInteger",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/toInteger.ts",
        "line": 17,
        "col": 13,
        "byteIndex": 696
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasInteger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasInteger"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToIntegerArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToIntegerArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toParsedInteger",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/integer/toInteger.ts",
        "line": 54,
        "col": 13,
        "byteIndex": 1667
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasInteger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Nullable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Nullable"
                    }
                  }
                ],
                "typeName": "OasInteger"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "nullable",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "example",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "enums",
                    "value": null
                  },
                  {
                    "kind": "keyValue",
                    "key": "value",
                    "value": {
                      "kind": "identifier",
                      "name": "valueWithoutEnums",
                      "optional": false,
                      "tsType": null
                    }
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToParsedIntegerArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Nullable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Nullable"
                        }
                      }
                    ],
                    "typeName": "ToParsedIntegerArgs"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "Nullable",
                "constraint": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "NumberFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 289
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasNumber}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the number can be null (affects type unions)"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the number schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 404
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the number schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 465
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the number value can be null"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 534
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value for the number (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 629
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 762
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example value for the number (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 879
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "number",
                          "kind": "keyword",
                          "keyword": "number"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of valid enum values for the number (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 1048
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "",
                            "kind": "parenthesized",
                            "parenthesized": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "number",
                                  "kind": "keyword",
                                  "keyword": "number"
                                },
                                {
                                  "repr": "null",
                                  "kind": "keyword",
                                  "keyword": "null"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "number",
                            "kind": "keyword",
                            "keyword": "number"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "format",
                "jsDoc": {
                  "doc": "The format of the number (float or double precision)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 1197
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "float",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "float"
                      }
                    },
                    {
                      "repr": "double",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "double"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "multipleOf",
                "jsDoc": {
                  "doc": "Value must be a multiple of this number"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1276
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "jsDoc": {
                  "doc": "Maximum value allowed (inclusive by default)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1352
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMaximum",
                "jsDoc": {
                  "doc": "Whether the maximum value is exclusive"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1419
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "minimum",
                "jsDoc": {
                  "doc": "Minimum value allowed (inclusive by default)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1502
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMinimum",
                "jsDoc": {
                  "doc": "Whether the minimum value is exclusive"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
                  "line": 36,
                  "col": 2,
                  "byteIndex": 1569
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "OasNumber",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
        "line": 202,
        "col": 0,
        "byteIndex": 6348
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a number schema in the OpenAPI Specification.\n\nThe `OasNumber` class handles floating-point numeric data types in OpenAPI schemas,\nsupporting comprehensive validation constraints including ranges, precision formats,\nand mathematical constraints. This class provides type-safe number handling with\noptional null value support and extensive validation capabilities.\n\n## Key Features\n\n- **Range Validation**: Minimum and maximum constraints with exclusive/inclusive options\n- **Precision Control**: Float and double format support for different precision needs  \n- **Mathematical Constraints**: Multiple-of validation for specific numeric patterns\n- **Type Safety**: Generic nullable type support with proper TypeScript inference\n- **Enum Support**: Constrain numbers to specific allowed values\n- **Null Handling**: Optional null value support for nullable number types\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the number value itself can be null\n"
          },
          {
            "kind": "example",
            "doc": "Basic number schema with range\n```typescript\nimport { OasNumber } from '@skmtc/core';\n\nconst ageSchema = new OasNumber({\n  title: 'Age',\n  description: 'Person age in years',\n  minimum: 0,\n  maximum: 150,\n  example: 25,\n  default: 18\n});\n\n// This represents: number (0 <= value <= 150)\n```\n"
          },
          {
            "kind": "example",
            "doc": "Price with precision and constraints\n```typescript\nconst priceSchema = new OasNumber({\n  title: 'Product Price',\n  description: 'Price in USD with cent precision',\n  format: 'double',\n  minimum: 0,\n  exclusiveMinimum: true, // Must be > 0, not >= 0\n  multipleOf: 0.01, // Must be in cents (e.g., 19.99, 10.50)\n  example: 29.99\n});\n\n// This represents: number > 0, in multiples of 0.01\n```\n"
          },
          {
            "kind": "example",
            "doc": "Percentage with strict bounds\n```typescript\nconst percentageSchema = new OasNumber({\n  title: 'Completion Percentage',\n  description: 'Task completion as a percentage',\n  minimum: 0,\n  maximum: 100,\n  multipleOf: 0.1, // One decimal place precision\n  example: 75.5,\n  default: 0\n});\n\n// This represents: 0 <= value <= 100, in increments of 0.1\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable rating system\n```typescript\nconst ratingSchema = new OasNumber<true>({\n  title: 'User Rating',\n  description: 'Product rating from 1-5 stars, null if not rated',\n  nullable: true,\n  minimum: 1,\n  maximum: 5,\n  multipleOf: 0.5, // Allow half-star ratings\n  enums: [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, null],\n  example: 4.5,\n  default: null\n});\n\n// This represents: (1 | 1.5 | 2 | 2.5 | 3 | 3.5 | 4 | 4.5 | 5) | null\n```\n"
          },
          {
            "kind": "example",
            "doc": "Scientific measurement with high precision\n```typescript\nconst temperatureSchema = new OasNumber({\n  title: 'Temperature',\n  description: 'Temperature in Celsius with high precision',\n  format: 'double',\n  minimum: -273.15, // Absolute zero\n  maximum: 1000,\n  multipleOf: 0.001, // Millikelvin precision\n  example: 23.456\n});\n\n// For scientific applications requiring high precision\n```\n"
          },
          {
            "kind": "example",
            "doc": "Currency with regional constraints\n```typescript\nconst currencySchema = new OasNumber({\n  title: 'Amount',\n  description: 'Transaction amount in major currency units',\n  format: 'double',\n  minimum: 0,\n  maximum: 999999.99,\n  multipleOf: 0.01,\n  example: 1234.56\n});\n\n// Used in financial applications\nconst transaction = new OasObject({\n  properties: {\n    amount: currencySchema,\n    currency: new OasString({ enum: ['USD', 'EUR', 'GBP'] })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Coordinate system\n```typescript\nconst latitudeSchema = new OasNumber({\n  title: 'Latitude',\n  description: 'Geographic latitude coordinate',\n  format: 'double',\n  minimum: -90,\n  maximum: 90,\n  example: 40.7128\n});\n\nconst longitudeSchema = new OasNumber({\n  title: 'Longitude',\n  description: 'Geographic longitude coordinate',\n  format: 'double',\n  minimum: -180,\n  maximum: 180,\n  example: -74.0060\n});\n\n// Used for location data\n```\n"
          },
          {
            "kind": "example",
            "doc": "Probability and statistics\n```typescript\nconst probabilitySchema = new OasNumber({\n  title: 'Probability',\n  description: 'Statistical probability value',\n  minimum: 0,\n  maximum: 1,\n  exclusiveMaximum: false, // Can be exactly 1\n  example: 0.75,\n  default: 0.5\n});\n\nconst confidenceSchema = new OasNumber({\n  title: 'Confidence Level',\n  description: 'Statistical confidence level as percentage',\n  minimum: 0,\n  maximum: 100,\n  enums: [90, 95, 99], // Common confidence levels\n  example: 95\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "NumberFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Nullable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Nullable"
                          }
                        }
                      ],
                      "typeName": "NumberFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 262,
              "col": 2,
              "byteIndex": 7948
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 207,
              "col": 2,
              "byteIndex": 6548
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'number' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "number",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "number"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 211,
              "col": 2,
              "byteIndex": 6664
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 215,
              "col": 2,
              "byteIndex": 6739
            }
          },
          {
            "jsDoc": {
              "doc": "The default value of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "default",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 219,
              "col": 2,
              "byteIndex": 6817
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 223,
              "col": 2,
              "byteIndex": 6945
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether value can be null."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "nullable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 227,
              "col": 2,
              "byteIndex": 7033
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 229,
              "col": 2,
              "byteIndex": 7106
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 233,
              "col": 2,
              "byteIndex": 7204
            }
          },
          {
            "jsDoc": {
              "doc": "An array of allowed values for the number."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "number",
                              "kind": "keyword",
                              "keyword": "number"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "number",
                        "kind": "keyword",
                        "keyword": "number"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "enums",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 237,
              "col": 2,
              "byteIndex": 7346
            }
          },
          {
            "jsDoc": {
              "doc": "The format of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "float",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "float"
                  }
                },
                {
                  "repr": "double",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "double"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "format",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 241,
              "col": 2,
              "byteIndex": 7475
            }
          },
          {
            "jsDoc": {
              "doc": "The multiple of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "multipleOf",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 245,
              "col": 2,
              "byteIndex": 7561
            }
          },
          {
            "jsDoc": {
              "doc": "The maximum value of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "maximum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 249,
              "col": 2,
              "byteIndex": 7644
            }
          },
          {
            "jsDoc": {
              "doc": "Whether the maximum value is exclusive."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "exclusiveMaximum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 253,
              "col": 2,
              "byteIndex": 7731
            }
          },
          {
            "jsDoc": {
              "doc": "The minimum value of the number."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "minimum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 257,
              "col": 2,
              "byteIndex": 7821
            }
          },
          {
            "jsDoc": {
              "doc": "Whether the minimum value is exclusive."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "exclusiveMinimum",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 261,
              "col": 2,
              "byteIndex": 7908
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 278,
              "col": 2,
              "byteIndex": 8506
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasNumber",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasNumber"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 282,
              "col": 2,
              "byteIndex": 8566
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasNumber",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasNumber"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 286,
              "col": 2,
              "byteIndex": 8622
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.NonArraySchemaObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.NonArraySchemaObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/Number.ts",
              "line": 291,
              "col": 2,
              "byteIndex": 8719
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "default": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "numberFormat",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
        "line": 9,
        "col": 13,
        "byteIndex": 242
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for valid number format values.\n\nDefines the precision formats for number types: float for single-precision\nand double for double-precision floating-point numbers."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "float",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "float"
                    }
                  },
                  {
                    "repr": "double",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "double"
                    }
                  }
                ]
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "oasNumberData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
        "line": 17,
        "col": 13,
        "byteIndex": 557
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI number data objects.\n\nValidates number schemas including precision formats, range constraints,\nmultiple validation, and enumeration values."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasNumberData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasNumberData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasNumberData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
        "line": 33,
        "col": 0,
        "byteIndex": 1102
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1134
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "number"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 35,
                  "col": 2,
                  "byteIndex": 1151
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 36,
                  "col": 2,
                  "byteIndex": 1168
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1191
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "format",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 38,
                  "col": 2,
                  "byteIndex": 1210
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "float",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "float"
                      }
                    },
                    {
                      "repr": "double",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "double"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "enum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 39,
                  "col": 2,
                  "byteIndex": 1240
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "number",
                    "kind": "keyword",
                    "keyword": "number"
                  }
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 40,
                  "col": 2,
                  "byteIndex": 1258
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "example",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 41,
                  "col": 2,
                  "byteIndex": 1279
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "multipleOf",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1298
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "maximum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 43,
                  "col": 2,
                  "byteIndex": 1320
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMaximum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1339
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "minimum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 45,
                  "col": 2,
                  "byteIndex": 1368
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "exclusiveMinimum",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/number-types.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1387
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toNumber",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/number/toNumber.ts",
        "line": 78,
        "col": 13,
        "byteIndex": 2512
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Transforms an OpenAPI v3 number schema object into an internal OAS number representation.\n\nThis function processes OpenAPI number schemas by extracting and parsing nullable values,\nexamples, enumerations, and default values. It handles the complete transformation from\nraw OpenAPI JSON to the SKMTC internal number representation with proper validation\nof number formats and constraints.\n\nThe transformation follows a pipeline approach:\n1. Parse nullable flag and extract base value\n2. Parse example values with nullable support\n3. Parse enumeration constraints\n4. Parse default values\n5. Create final OasNumber instance with format validation\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Transformation arguments"
          },
          {
            "kind": "param",
            "name": "args.context",
            "doc": "- Parse context providing utilities and tracing"
          },
          {
            "kind": "param",
            "name": "args.value",
            "doc": "- The OpenAPI v3 number schema object to transform"
          },
          {
            "kind": "return",
            "doc": "Transformed OAS number object with parsed properties\n"
          },
          {
            "kind": "example",
            "doc": "Basic number transformation\n```typescript\nimport { toNumber } from '@skmtc/core';\n\nconst openApiNumber = {\n  type: 'number',\n  format: 'double',\n  minimum: 0,\n  maximum: 100\n};\n\nconst oasNumber = toNumber({\n  context: parseContext,\n  value: openApiNumber\n});\n\nconsole.log(oasNumber.format); // 'double'\nconsole.log(oasNumber.minimum); // 0\n```\n"
          },
          {
            "kind": "example",
            "doc": "Number with nullable and constraints\n```typescript\nconst priceNumber = {\n  type: 'number',\n  format: 'float',\n  nullable: true,\n  minimum: 0.01,\n  maximum: 9999.99,\n  exclusiveMaximum: true,\n  default: null,\n  example: 19.99\n};\n\nconst oasNumber = toNumber({\n  context: parseContext,\n  value: priceNumber\n});\n\nconsole.log(oasNumber.nullable); // true\nconsole.log(oasNumber.exclusiveMaximum); // true\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasNumber",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasNumber"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToNumberArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToNumberArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasObjectFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
        "line": 12,
        "col": 0,
        "byteIndex": 399
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasObject}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the object can be null (affects type unions)"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the object"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 510
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the object"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 564
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "properties",
                "jsDoc": {
                  "doc": "Record mapping property names to their schemas"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 643
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OasSchema",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "OasSchema"
                                }
                              },
                              {
                                "repr": "OasRef",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "schema",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "schema"
                                      }
                                    }
                                  ],
                                  "typeName": "OasRef"
                                }
                              },
                              {
                                "repr": "CustomValue",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "CustomValue"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Array of required property names"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 771
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value for the object (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 878
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Record",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "unknown",
                                "kind": "keyword",
                                "keyword": "unknown"
                              }
                            ],
                            "typeName": "Record"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Record",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "unknown",
                                "kind": "keyword",
                                "keyword": "unknown"
                              }
                            ],
                            "typeName": "Record"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "additionalProperties",
                "jsDoc": {
                  "doc": "Whether additional properties are allowed (true/false/schema)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 1074
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the object value can be null"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1196
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "typeParams": []
              },
              {
                "name": "maxProperties",
                "jsDoc": {
                  "doc": "Maximum number of properties allowed"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1264
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minProperties",
                "jsDoc": {
                  "doc": "Minimum number of properties required"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1336
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of valid enum values for the object"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1412
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "",
                            "kind": "parenthesized",
                            "parenthesized": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "Record",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      },
                                      {
                                        "repr": "unknown",
                                        "kind": "keyword",
                                        "keyword": "unknown"
                                      }
                                    ],
                                    "typeName": "Record"
                                  }
                                },
                                {
                                  "repr": "null",
                                  "kind": "keyword",
                                  "keyword": "null"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Record",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "unknown",
                                  "kind": "keyword",
                                  "keyword": "unknown"
                                }
                              ],
                              "typeName": "Record"
                            }
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 38,
                  "col": 2,
                  "byteIndex": 1591
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example value for the object (null allowed if Nullable is true)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 40,
                  "col": 2,
                  "byteIndex": 1708
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Record",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "unknown",
                                "kind": "keyword",
                                "keyword": "unknown"
                              }
                            ],
                            "typeName": "Record"
                          }
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Record",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "unknown",
                                "kind": "keyword",
                                "keyword": "unknown"
                              }
                            ],
                            "typeName": "Record"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "readOnly",
                "jsDoc": {
                  "doc": "Whether the object is read-only"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1874
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "writeOnly",
                "jsDoc": {
                  "doc": "Whether the object is write-only"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1937
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "jsDoc": {
                  "doc": "Whether the object is deprecated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 48,
                  "col": 2,
                  "byteIndex": 2001
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "AddPropertyArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
        "line": 54,
        "col": 0,
        "byteIndex": 2092
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for the {@link OasObject.addProperty} method."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "jsDoc": {
                  "doc": "The name of the property to add"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 56,
                  "col": 2,
                  "byteIndex": 2167
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "The schema definition for the property"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 58,
                  "col": 2,
                  "byteIndex": 2230
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    },
                    {
                      "repr": "CustomValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "CustomValue"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Whether the property should be required"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
                  "line": 60,
                  "col": 2,
                  "byteIndex": 2344
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasObject",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
        "line": 148,
        "col": 0,
        "byteIndex": 5051
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an object schema in the OpenAPI Specification.\n\n`OasObject` handles both:\n- **Objects**: Types with fixed, named properties (like TypeScript interfaces)\n- **Records**: Types with dynamic keys and consistent value types (like TypeScript Record<string, T>)\n\nThis class provides comprehensive support for object validation constraints,\nproperty management, and JSON Schema conversion. It supports nullable types\nthrough generic type parameters and handles complex property relationships.\n\n## Key Features\n\n- **Property Management**: Add/remove properties with automatic required field handling\n- **Type Safety**: Generic nullable type support with proper TypeScript inference\n- **Validation**: Min/max properties, additional properties, and enum constraints\n- **JSON Schema**: Convert to standard JSON Schema format for validation\n- **Immutability**: All mutations return new instances (functional style)\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the object value itself can be null\n"
          },
          {
            "kind": "example",
            "doc": "Basic object schema\n```typescript\nimport { OasObject } from '@skmtc/core';\n\nconst userObject = new OasObject({\n  title: 'User',\n  description: 'A user in the system',\n  properties: {\n    id: new OasString({ title: 'User ID' }),\n    name: new OasString({ title: 'Full Name' }),\n    email: new OasString({ format: 'email' })\n  },\n  required: ['id', 'name'],\n  additionalProperties: false\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Dynamic property management\n```typescript\n// Start with empty object\nlet schema = OasObject.empty();\n\n// Add properties dynamically\nschema = schema.addProperty({\n  name: 'id',\n  schema: new OasString(),\n  required: true\n});\n\nschema = schema.addProperty({\n  name: 'metadata',\n  schema: new OasObject({ additionalProperties: true }),\n  required: false\n});\n\n// Remove a property\nschema = schema.removeProperty('metadata');\n```\n"
          },
          {
            "kind": "example",
            "doc": "Record-style object (additional properties)\n```typescript\nconst recordObject = new OasObject({\n  title: 'StringMap',\n  description: 'A map of string keys to string values',\n  additionalProperties: new OasString(), // Any string key -> string value\n  minProperties: 1 // At least one property required\n});\n\n// This allows: { [key: string]: string }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable object support\n```typescript\nconst nullableUser = new OasObject<true>({\n  nullable: true,\n  properties: {\n    name: new OasString()\n  },\n  default: null // Can have null default when nullable\n});\n\n// This represents: { name: string } | null\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasObject instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Object configuration fields\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userSchema = new OasObject({\n  title: 'User',\n  properties: {\n    id: new OasString({ title: 'ID' }),\n    name: new OasString({ title: 'Name' })\n  },\n  required: ['id'],\n  additionalProperties: false\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "OasObjectFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Nullable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Nullable"
                          }
                        }
                      ],
                      "typeName": "OasObjectFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 233,
              "col": 2,
              "byteIndex": 7604
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 153,
              "col": 2,
              "byteIndex": 5251
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'object' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "object",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "object"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 157,
              "col": 2,
              "byteIndex": 5367
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the object."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 161,
              "col": 2,
              "byteIndex": 5442
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the object."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 165,
              "col": 2,
              "byteIndex": 5516
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether value can be null."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "nullable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 169,
              "col": 2,
              "byteIndex": 5604
            }
          },
          {
            "jsDoc": {
              "doc": "A record which maps property names of the object to their schemas."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OasSchema",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "OasSchema"
                                }
                              },
                              {
                                "repr": "OasRef",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "schema",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "schema"
                                      }
                                    }
                                  ],
                                  "typeName": "OasRef"
                                }
                              },
                              {
                                "repr": "CustomValue",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "CustomValue"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OasSchema",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "OasSchema"
                                }
                              },
                              {
                                "repr": "OasRef",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "schema",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "schema"
                                      }
                                    }
                                  ],
                                  "typeName": "OasRef"
                                }
                              },
                              {
                                "repr": "CustomValue",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "CustomValue"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "properties",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 173,
              "col": 2,
              "byteIndex": 5721
            }
          },
          {
            "jsDoc": {
              "doc": "An array of required property names."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "required",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 179,
              "col": 2,
              "byteIndex": 5972
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether additional properties are allowed.\n\nThis is equivalent to a Record type in TypeScript."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "additionalProperties",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 185,
              "col": 2,
              "byteIndex": 6136
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 188,
              "col": 2,
              "byteIndex": 6252
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the object."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 192,
              "col": 2,
              "byteIndex": 6350
            }
          },
          {
            "jsDoc": {
              "doc": "The default value of the object."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "unknown",
                            "kind": "keyword",
                            "keyword": "unknown"
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "default",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 198,
              "col": 2,
              "byteIndex": 6524
            }
          },
          {
            "jsDoc": {
              "doc": "Maximum number of properties allowed in the object"
            },
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "maxProperties",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 202,
              "col": 2,
              "byteIndex": 6708
            }
          },
          {
            "jsDoc": {
              "doc": "Minimum number of properties required in the object"
            },
            "tsType": {
              "repr": "number",
              "kind": "keyword",
              "keyword": "number"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "minProperties",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 204,
              "col": 2,
              "byteIndex": 6794
            }
          },
          {
            "jsDoc": {
              "doc": "Whether the object is read-only"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "readOnly",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 206,
              "col": 2,
              "byteIndex": 6860
            }
          },
          {
            "jsDoc": {
              "doc": "Whether the object is write-only"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "writeOnly",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 208,
              "col": 2,
              "byteIndex": 6923
            }
          },
          {
            "jsDoc": {
              "doc": "Whether the object schema is deprecated"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "deprecated",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 210,
              "col": 2,
              "byteIndex": 6994
            }
          },
          {
            "jsDoc": {
              "doc": "Array of valid enum values for the object"
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "Record",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  },
                                  {
                                    "repr": "unknown",
                                    "kind": "keyword",
                                    "keyword": "unknown"
                                  }
                                ],
                                "typeName": "Record"
                              }
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "Record",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "unknown",
                              "kind": "keyword",
                              "keyword": "unknown"
                            }
                          ],
                          "typeName": "Record"
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "enums",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 212,
              "col": 2,
              "byteIndex": 7068
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Creates a new empty OasObject with no properties.\n\nThis factory method creates a non-nullable object with empty properties\nand required arrays, useful as a starting point for dynamic object building.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "A new empty OasObject instance\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// Start with empty object and build up\nlet schema = OasObject.empty();\n\nschema = schema.addProperty({\n  name: 'id',\n  schema: new OasString(),\n  required: true\n});\n\nschema = schema.addProperty({\n  name: 'name',\n  schema: new OasString(),\n  required: true\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "empty",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "false",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": false
                      }
                    }
                  ],
                  "typeName": "OasObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 276,
              "col": 2,
              "byteIndex": 8881
            }
          },
          {
            "jsDoc": {
              "doc": "Adds a new property to the object.\n\nThis method returns a new OasObject instance with the added property,\nfollowing an immutable pattern. If the property is marked as required,\nit will be added to the required array.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Property addition arguments"
                },
                {
                  "kind": "param",
                  "name": "args.name",
                  "doc": "- The name of the property to add"
                },
                {
                  "kind": "param",
                  "name": "args.schema",
                  "doc": "- The schema definition for the property"
                },
                {
                  "kind": "param",
                  "name": "args.required",
                  "doc": "- Whether the property should be required (default: false)"
                },
                {
                  "kind": "return",
                  "doc": "A new OasObject with the added property\n"
                },
                {
                  "kind": "example",
                  "doc": "Adding a simple property\n```typescript\nconst original = OasObject.empty();\nconst withName = original.addProperty({\n  name: 'username',\n  schema: new OasString({ minLength: 3 }),\n  required: true\n});\n\nconsole.log(withName.required); // ['username']\n```\n"
                },
                {
                  "kind": "example",
                  "doc": "Chaining property additions\n```typescript\nconst userSchema = OasObject.empty()\n  .addProperty({\n    name: 'id',\n    schema: new OasInteger(),\n    required: true\n  })\n  .addProperty({\n    name: 'email',\n    schema: new OasString({ format: 'email' }),\n    required: true\n  })\n  .addProperty({\n    name: 'age',\n    schema: new OasInteger({ minimum: 0 }),\n    required: false\n  });\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "addProperty",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "name",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "schema",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "required",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "AddPropertyArgs",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "AddPropertyArgs"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OasObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 329,
              "col": 2,
              "byteIndex": 10397
            }
          },
          {
            "jsDoc": {
              "doc": "Removes a property from the object.\n\nThis method returns a new OasObject instance with the specified property\nremoved. If the property was required, it will also be removed from the\nrequired array. If the property doesn't exist, returns the same instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "name",
                  "doc": "- The name of the property to remove"
                },
                {
                  "kind": "return",
                  "doc": "A new OasObject with the property removed, or the same instance if property doesn't exist\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userSchema = new OasObject({\n  properties: {\n    id: new OasString(),\n    name: new OasString(),\n    email: new OasString(),\n    temporaryField: new OasString()\n  },\n  required: ['id', 'name', 'temporaryField']\n});\n\n// Remove temporary field\nconst cleanedSchema = userSchema.removeProperty('temporaryField');\n\nconsole.log(cleanedSchema.required); // ['id', 'name']\nconsole.log('temporaryField' in cleanedSchema.properties); // false\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "removeProperty",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "OasObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 377,
              "col": 2,
              "byteIndex": 11915
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 395,
              "col": 2,
              "byteIndex": 12390
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 399,
              "col": 2,
              "byteIndex": 12450
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 403,
              "col": 2,
              "byteIndex": 12496
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the OasObject to a standard JSON Schema object.\n\nThis method serializes the object to the JSON Schema format used in\nOpenAPI specifications. It handles property conversion, additional\nproperties rules, and validation constraints.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Conversion options for handling references and context"
                },
                {
                  "kind": "return",
                  "doc": "A JSON Schema representation of the object\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userObject = new OasObject({\n  title: 'User',\n  properties: {\n    id: new OasString(),\n    name: new OasString()\n  },\n  required: ['id'],\n  additionalProperties: false\n});\n\nconst jsonSchema = userObject.toJsonSchema({ refContext: new Map() });\n\nconsole.log(jsonSchema);\n// {\n//   type: 'object',\n//   title: 'User',\n//   properties: {\n//     id: { type: 'string' },\n//     name: { type: 'string' }\n//   },\n//   required: ['id'],\n//   additionalProperties: false\n// }\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.NonArraySchemaObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.NonArraySchemaObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/Object.ts",
              "line": 444,
              "col": 2,
              "byteIndex": 13593
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "default": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "oasObjectData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
        "line": 5,
        "col": 13,
        "byteIndex": 199
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasObjectData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasObjectData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasObjectData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
        "line": 31,
        "col": 0,
        "byteIndex": 1161
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1193
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "object",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "object"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 33,
                  "col": 2,
                  "byteIndex": 1210
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1227
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 35,
                  "col": 2,
                  "byteIndex": 1250
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 36,
                  "col": 2,
                  "byteIndex": 1286
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "maxProperties",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1309
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minProperties",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 38,
                  "col": 2,
                  "byteIndex": 1334
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "properties",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 39,
                  "col": 2,
                  "byteIndex": 1359
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasSchemaData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasSchemaData"
                            }
                          },
                          {
                            "repr": "OasSchemaRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasSchemaRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "required",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 40,
                  "col": 2,
                  "byteIndex": 1423
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "additionalProperties",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 41,
                  "col": 2,
                  "byteIndex": 1445
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "OasSchemaData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaData"
                      }
                    },
                    {
                      "repr": "OasSchemaRefData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaRefData"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "readOnly",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1513
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "writeOnly",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/object-types.ts",
                  "line": 43,
                  "col": 2,
                  "byteIndex": 1534
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toObject",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/object/toObject.ts",
        "line": 17,
        "col": 13,
        "byteIndex": 690
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasObject",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasObject"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToObjectArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToObjectArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OperationFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
        "line": 20,
        "col": 0,
        "byteIndex": 984
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Fields for configuring an OpenAPI operation object.\n\nContains all the properties needed to define a complete OpenAPI operation,\nincluding path information, parameters, request/response specifications,\nsecurity requirements, and metadata."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "path",
                "jsDoc": {
                  "doc": "The API path for this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 1059
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "method",
                "jsDoc": {
                  "doc": "The HTTP method for this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 1118
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Method",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Method"
                  }
                },
                "typeParams": []
              },
              {
                "name": "pathItem",
                "jsDoc": {
                  "doc": "The parent path item containing this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 1191
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasPathItem",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasPathItem"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "operationId",
                "jsDoc": {
                  "doc": "Unique identifier for the operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1272
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "jsDoc": {
                  "doc": "Brief summary of the operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1347
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "tags",
                "jsDoc": {
                  "doc": "Tags for organizing operations in documentation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1435
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description of the operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1512
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "parameters",
                "jsDoc": {
                  "doc": "Parameters accepted by this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 36,
                  "col": 2,
                  "byteIndex": 1594
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasParameter",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasParameter"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "parameter",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "parameter"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "requestBody",
                "jsDoc": {
                  "doc": "Request body specification for this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 38,
                  "col": 2,
                  "byteIndex": 1715
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasRequestBody",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasRequestBody"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "requestBody",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "requestBody"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "responses",
                "jsDoc": {
                  "doc": "Response specifications mapped by status code"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 40,
                  "col": 2,
                  "byteIndex": 1837
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasResponse",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasResponse"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "response",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "response"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "security",
                "jsDoc": {
                  "doc": "Security requirements for this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1949
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "OasSecurityRequirement",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasSecurityRequirement"
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "jsDoc": {
                  "doc": "Whether this operation is deprecated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 2045
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "OpenAPI specification extensions"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 2122
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ToRequestBodyMapArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
        "line": 52,
        "col": 0,
        "byteIndex": 2230
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments passed to request body mapping functions."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "schema",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 53,
                  "col": 2,
                  "byteIndex": 2269
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "requestBody",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
                  "line": 54,
                  "col": 2,
                  "byteIndex": 2308
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasRequestBody",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasRequestBody"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasOperation",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
        "line": 164,
        "col": 0,
        "byteIndex": 6104
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an OpenAPI Operation Object in the SKMTC OAS processing system.\n\nThe `OasOperation` class encapsulates a single API operation (path + method combination)\nwith all its associated metadata, parameters, request/response specifications, and\nsecurity requirements. It provides utilities for extracting common operation data\nlike success responses and request bodies.\n\n## Key Features\n\n- **Path and Method**: Unique combination identifying the operation\n- **Metadata Access**: Operation ID, summary, description, tags, and deprecation status\n- **Parameter Handling**: Query, path, header, and cookie parameters\n- **Request/Response Specs**: Type-safe access to request body and response definitions\n- **Security Context**: Operation-specific security requirements\n- **Success Response Utils**: Helper methods to identify and extract successful responses\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic operation properties\n```typescript\nimport { OasOperation } from '@skmtc/core';\n\n// Typically created during document parsing\nconst getUserOp = new OasOperation({\n  path: '/users/{id}',\n  method: 'get',\n  operationId: 'getUserById',\n  summary: 'Get user by ID',\n  description: 'Retrieves a single user by their unique identifier',\n  parameters: [\n    // Path parameter for user ID\n    { name: 'id', in: 'path', required: true, schema: { type: 'string' } }\n  ],\n  responses: {\n    '200': { description: 'User found', content: { ... } },\n    '404': { description: 'User not found' }\n  }\n});\n\nconsole.log(getUserOp.path);        // '/users/{id}'\nconsole.log(getUserOp.method);      // 'get'\nconsole.log(getUserOp.operationId); // 'getUserById'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Working with success responses\n```typescript\n// Find the primary success response\nconst successResponse = operation.toSuccessResponse();\nif (successResponse) {\n  const resolved = successResponse.resolve();\n  console.log('Success response:', resolved.description);\n}\n\n// Get the HTTP status code for success\nconst successCode = operation.toSuccessResponseCode();\nconsole.log('Success status:', successCode); // '200', '201', 'default', etc.\n```\n"
          },
          {
            "kind": "example",
            "doc": "Extracting request body data\n```typescript\n// Extract request body with custom transformation\nconst requestData = operation.toRequestBody(({ schema, requestBody }) => {\n  return {\n    schema: schema,\n    contentType: 'application/json',\n    required: requestBody.required ?? false,\n    description: requestBody.description\n  };\n});\n\nif (requestData) {\n  console.log('Request schema:', requestData.schema);\n  console.log('Required:', requestData.required);\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Parameter processing\n```typescript\n// Process operation parameters by location\nconst pathParams = operation.parameters?.filter(param => {\n  const resolved = param.resolve();\n  return resolved.in === 'path';\n});\n\nconst queryParams = operation.parameters?.filter(param => {\n  const resolved = param.resolve();\n  return resolved.in === 'query';\n});\n\nconsole.log('Path parameters:', pathParams?.length);\nconsole.log('Query parameters:', queryParams?.length);\n```\n"
          },
          {
            "kind": "example",
            "doc": "Security requirements\n```typescript\nif (operation.security) {\n  console.log('Operation has specific security requirements');\n  for (const requirement of operation.security) {\n    // Process security schemes for this operation\n    Object.keys(requirement.schemes).forEach(scheme => {\n      console.log(`Security scheme: ${scheme}`);\n    });\n  }\n} else {\n  console.log('Operation uses default document security');\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasOperation instance from operation field data.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Operation field data from OpenAPI specification"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "OperationFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OperationFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 200,
              "col": 2,
              "byteIndex": 7530
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for OAS operation objects"
            },
            "tsType": {
              "repr": "operation",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "operation"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 166,
              "col": 2,
              "byteIndex": 6185
            }
          },
          {
            "jsDoc": {
              "doc": "The API path for this operation"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "path",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 169,
              "col": 2,
              "byteIndex": 6264
            }
          },
          {
            "jsDoc": {
              "doc": "The HTTP method for this operation"
            },
            "tsType": {
              "repr": "Method",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Method"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "method",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 171,
              "col": 2,
              "byteIndex": 6323
            }
          },
          {
            "jsDoc": {
              "doc": "The parent path item containing this operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasPathItem",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasPathItem"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "pathItem",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 173,
              "col": 2,
              "byteIndex": 6396
            }
          },
          {
            "jsDoc": {
              "doc": "Unique identifier for the operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "operationId",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 175,
              "col": 2,
              "byteIndex": 6477
            }
          },
          {
            "jsDoc": {
              "doc": "Brief summary of the operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "summary",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 177,
              "col": 2,
              "byteIndex": 6551
            }
          },
          {
            "jsDoc": {
              "doc": "Tags for organizing operations in documentation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "tags",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 179,
              "col": 2,
              "byteIndex": 6638
            }
          },
          {
            "jsDoc": {
              "doc": "Detailed description of the operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 181,
              "col": 2,
              "byteIndex": 6714
            }
          },
          {
            "jsDoc": {
              "doc": "Parameters accepted by this operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "OasParameter",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasParameter"
                          }
                        },
                        {
                          "repr": "OasRef",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "parameter",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "parameter"
                                }
                              }
                            ],
                            "typeName": "OasRef"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "parameters",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 183,
              "col": 2,
              "byteIndex": 6795
            }
          },
          {
            "jsDoc": {
              "doc": "Request body specification for this operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasRequestBody",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasRequestBody"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "requestBody",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "requestBody"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "requestBody",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 185,
              "col": 2,
              "byteIndex": 6915
            }
          },
          {
            "jsDoc": {
              "doc": "Response specifications mapped by status code"
            },
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "OasResponse",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasResponse"
                        }
                      },
                      {
                        "repr": "OasRef",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "response",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "response"
                              }
                            }
                          ],
                          "typeName": "OasRef"
                        }
                      }
                    ]
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "responses",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 187,
              "col": 2,
              "byteIndex": 7036
            }
          },
          {
            "jsDoc": {
              "doc": "Security requirements for this operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "OasSecurityRequirement",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSecurityRequirement"
                    }
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "security",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 189,
              "col": 2,
              "byteIndex": 7148
            }
          },
          {
            "jsDoc": {
              "doc": "Whether this operation is deprecated"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "deprecated",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 191,
              "col": 2,
              "byteIndex": 7243
            }
          },
          {
            "jsDoc": {
              "doc": "OpenAPI specification extensions"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 193,
              "col": 2,
              "byteIndex": 7319
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Returns the successful response definition for this operation.\n\nLooks for the lowest numbered 2xx response code and returns its response definition.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Success response object or undefined if none found"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toSuccessResponse",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasResponse",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasResponse"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "response",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "response"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 223,
              "col": 2,
              "byteIndex": 8311
            }
          },
          {
            "jsDoc": {
              "doc": "Returns the HTTP status code for the primary success response.\n\nFinds the lowest numbered 2xx status code in the responses.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Success status code as string or undefined if none found"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toSuccessResponseCode",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 236,
              "col": 2,
              "byteIndex": 8733
            }
          },
          {
            "jsDoc": {
              "doc": "Maps the request body schema to a custom value using the provided mapping function.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "map",
                  "doc": "- Function to transform the request body schema and metadata"
                },
                {
                  "kind": "param",
                  "name": "mediaType",
                  "doc": "- Media type to extract schema from (default: 'application/json')"
                },
                {
                  "kind": "return",
                  "doc": "Mapped value or undefined if no request body schema found"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toRequestBody",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "map",
                  "optional": false,
                  "tsType": {
                    "repr": "",
                    "kind": "fnOrConstructor",
                    "fnOrConstructor": {
                      "constructor": false,
                      "tsType": {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      },
                      "params": [
                        {
                          "kind": "object",
                          "props": [
                            {
                              "kind": "assign",
                              "key": "schema",
                              "value": null
                            },
                            {
                              "kind": "assign",
                              "key": "requestBody",
                              "value": null
                            }
                          ],
                          "optional": false,
                          "tsType": {
                            "repr": "ToRequestBodyMapArgs",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "ToRequestBodyMapArgs"
                            }
                          }
                        }
                      ],
                      "typeParams": []
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "mediaType",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "right": "application/json",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V"
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 260,
              "col": 2,
              "byteIndex": 9465
            }
          },
          {
            "jsDoc": {
              "doc": "Resolve all parameters and optionally filter by location\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "filter",
                  "doc": "- only include parameters from specified locations"
                },
                {
                  "kind": "return"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toParams",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "filter",
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "OasParameterLocation",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasParameterLocation"
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "OasParameter",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasParameter"
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 276,
              "col": 2,
              "byteIndex": 9945
            }
          },
          {
            "jsDoc": {
              "doc": "Creates an OAS object representation of operation parameters.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "filter",
                  "doc": "- Optional array of parameter locations to include"
                },
                {
                  "kind": "return",
                  "doc": "OAS object with parameter properties"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toParametersObject",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "filter",
                  "optional": true,
                  "tsType": {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "OasParameterLocation",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasParameterLocation"
                      }
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OasObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 290,
              "col": 2,
              "byteIndex": 10389
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the operation to OpenAPI v3 JSON schema format.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Conversion options for nested components"
                },
                {
                  "kind": "return",
                  "doc": "OpenAPI v3 operation object"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.OperationObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.OperationObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 308,
              "col": 2,
              "byteIndex": 10925
            }
          },
          {
            "jsDoc": {
              "doc": "Serializes the operation to a plain JavaScript object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Plain object representation of the operation"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJSON",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "object",
                "kind": "keyword",
                "keyword": "object"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/Operation.ts",
              "line": 330,
              "col": 2,
              "byteIndex": 11705
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasOperationData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
        "line": 157,
        "col": 0,
        "byteIndex": 4522
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI operation objects processed by the SKMTC pipeline.\n\nThis type represents a complete OpenAPI operation (API endpoint) including all\nassociated metadata, parameters, request body, responses, and path information.\nIt serves as the internal representation of OpenAPI operations during the\ncode generation process, combining operation data with its parent path item context.\n\n## Usage in SKMTC Pipeline\n\nThis type is used by:\n- Operation parsers to validate and structure incoming OpenAPI operations\n- Code generators to access operation metadata and generate client code\n- Response processors to understand expected API responses\n- Parameter handlers to generate request validation and typing\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic GET operation\n```typescript\nimport type { OasOperationData } from '@skmtc/core/oas/operation';\n\nconst getUserOperation: OasOperationData = {\n  oasType: 'operation',\n  path: '/users/{id}',\n  method: 'get',\n  operationId: 'getUserById',\n  summary: 'Get user by ID',\n  description: 'Retrieves a specific user by their unique identifier',\n  tags: ['users'],\n  parameters: [\n    {\n      name: 'id',\n      in: 'path',\n      required: true,\n      schema: { type: 'string' }\n    }\n  ],\n  responses: {\n    '200': {\n      description: 'User found',\n      content: {\n        'application/json': {\n          schema: { $ref: '#/components/schemas/User' }\n        }\n      }\n    },\n    '404': {\n      description: 'User not found'\n    }\n  },\n  pathItem: pathItemData\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "POST operation with request body\n```typescript\nconst createUserOperation: OasOperationData = {\n  oasType: 'operation',\n  path: '/users',\n  method: 'post',\n  operationId: 'createUser',\n  summary: 'Create new user',\n  description: 'Creates a new user account',\n  tags: ['users'],\n  requestBody: {\n    description: 'User data',\n    required: true,\n    content: {\n      'application/json': {\n        schema: { $ref: '#/components/schemas/CreateUserRequest' }\n      }\n    }\n  },\n  responses: {\n    '201': {\n      description: 'User created successfully',\n      content: {\n        'application/json': {\n          schema: { $ref: '#/components/schemas/User' }\n        }\n      }\n    },\n    '400': {\n      description: 'Invalid request data'\n    }\n  },\n  pathItem: pathItemData\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Operation with query parameters\n```typescript\nconst listUsersOperation: OasOperationData = {\n  oasType: 'operation',\n  path: '/users',\n  method: 'get',\n  operationId: 'listUsers',\n  summary: 'List users',\n  description: 'Get paginated list of users',\n  tags: ['users'],\n  parameters: [\n    {\n      name: 'page',\n      in: 'query',\n      schema: { type: 'integer', minimum: 1, default: 1 }\n    },\n    {\n      name: 'limit',\n      in: 'query',\n      schema: { type: 'integer', minimum: 1, maximum: 100, default: 20 }\n    },\n    {\n      name: 'status',\n      in: 'query',\n      schema: { type: 'string', enum: ['active', 'inactive'] }\n    }\n  ],\n  responses: {\n    '200': {\n      description: 'List of users',\n      content: {\n        'application/json': {\n          schema: {\n            type: 'object',\n            properties: {\n              users: {\n                type: 'array',\n                items: { $ref: '#/components/schemas/User' }\n              },\n              totalCount: { type: 'integer' },\n              page: { type: 'integer' },\n              limit: { type: 'integer' }\n            }\n          }\n        }\n      }\n    }\n  },\n  pathItem: pathItemData\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type identifier for SKMTC internal processing"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 159,
                  "col": 2,
                  "byteIndex": 4612
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "operation",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "operation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "pathItem",
                "jsDoc": {
                  "doc": "Parent path item containing this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 161,
                  "col": 2,
                  "byteIndex": 4687
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasPathItemData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasPathItemData"
                  }
                },
                "typeParams": []
              },
              {
                "name": "path",
                "jsDoc": {
                  "doc": "The API path template (e.g., '/users/{id}')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 163,
                  "col": 2,
                  "byteIndex": 4768
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "method",
                "jsDoc": {
                  "doc": "HTTP method for this operation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 165,
                  "col": 2,
                  "byteIndex": 4823
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "get",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "get"
                      }
                    },
                    {
                      "repr": "put",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "put"
                      }
                    },
                    {
                      "repr": "post",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "post"
                      }
                    },
                    {
                      "repr": "delete",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "delete"
                      }
                    },
                    {
                      "repr": "options",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "options"
                      }
                    },
                    {
                      "repr": "head",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "head"
                      }
                    },
                    {
                      "repr": "patch",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "patch"
                      }
                    },
                    {
                      "repr": "trace",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "trace"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "operationId",
                "jsDoc": {
                  "doc": "Unique identifier for this operation (used for client method names)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 167,
                  "col": 2,
                  "byteIndex": 4985
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "tags",
                "jsDoc": {
                  "doc": "Tags for grouping operations (used for code organization)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 169,
                  "col": 2,
                  "byteIndex": 5075
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "jsDoc": {
                  "doc": "Brief summary of what the operation does"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 171,
                  "col": 2,
                  "byteIndex": 5143
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description of the operation behavior"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 173,
                  "col": 2,
                  "byteIndex": 5218
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "parameters",
                "jsDoc": {
                  "doc": "List of parameters (path, query, header, cookie)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 177,
                  "col": 2,
                  "byteIndex": 5358
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "OasParameterData",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasParameterData"
                          }
                        },
                        {
                          "repr": "OasParameterRefData",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasParameterRefData"
                          }
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "requestBody",
                "jsDoc": {
                  "doc": "Request body specification for operations that accept data"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 179,
                  "col": 2,
                  "byteIndex": 5484
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasRequestBodyData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasRequestBodyData"
                      }
                    },
                    {
                      "repr": "OasRequestBodyRefData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasRequestBodyRefData"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "responses",
                "jsDoc": {
                  "doc": "Map of status codes to response specifications"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 181,
                  "col": 2,
                  "byteIndex": 5599
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasResponseData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasResponseData"
                            }
                          },
                          {
                            "repr": "OasResponseRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasResponseRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "jsDoc": {
                  "doc": "Whether this operation is deprecated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
                  "line": 184,
                  "col": 2,
                  "byteIndex": 5733
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasOperationData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/operation/operation-types.ts",
        "line": 287,
        "col": 13,
        "byteIndex": 8499
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI operation data objects.\n\nThis comprehensive schema validates OpenAPI operations according to the OpenAPI v3\nspecification, including all standard properties like HTTP methods, parameters,\nrequest bodies, responses, and metadata. It uses lazy evaluation and unions to\nhandle complex nested structures and reference objects.\n\nThe schema ensures that operation data conforms to OpenAPI standards while also\nincluding SKMTC-specific metadata (like `oasType` and `pathItem`) needed for\nthe code generation pipeline.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating a GET operation\n```typescript\nimport { oasOperationData } from '@skmtc/core/oas/operation';\nimport * as v from 'valibot';\n\nconst operation = {\n  oasType: 'operation',\n  path: '/api/users/{id}',\n  method: 'get',\n  operationId: 'getUserById',\n  summary: 'Get user by ID',\n  parameters: [\n    {\n      name: 'id',\n      in: 'path',\n      required: true,\n      schema: { type: 'string' }\n    }\n  ],\n  responses: {\n    '200': {\n      description: 'Success',\n      content: {\n        'application/json': {\n          schema: { $ref: '#/components/schemas/User' }\n        }\n      }\n    }\n  },\n  pathItem: validPathItem\n};\n\nconst validated = v.parse(oasOperationData, operation);\nconsole.log(validated.operationId); // 'getUserById'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating a POST operation with request body\n```typescript\nconst postOperation = {\n  oasType: 'operation',\n  path: '/api/users',\n  method: 'post',\n  operationId: 'createUser',\n  requestBody: {\n    description: 'User data',\n    required: true,\n    content: {\n      'application/json': {\n        schema: { $ref: '#/components/schemas/CreateUserRequest' }\n      }\n    }\n  },\n  responses: {\n    '201': {\n      description: 'User created',\n      content: {\n        'application/json': {\n          schema: { $ref: '#/components/schemas/User' }\n        }\n      }\n    }\n  },\n  pathItem: validPathItem\n};\n\nconst validated = v.parse(oasOperationData, postOperation);\nconsole.log(validated.method); // 'post'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validation error handling\n```typescript\nconst invalidOperation = {\n  oasType: 'operation',\n  path: '/api/users',\n  method: 'invalid', // Invalid HTTP method\n  responses: {} // Missing required responses\n};\n\ntry {\n  v.parse(oasOperationData, invalidOperation);\n} catch (error) {\n  console.error('Validation failed:', error.message);\n  // Handle validation errors\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasOperationData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasOperationData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ParameterFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
        "line": 15,
        "col": 0,
        "byteIndex": 577
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasParameter}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "jsDoc": {
                  "doc": "The name of the parameter"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 646
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "location",
                "jsDoc": {
                  "doc": "The location of the parameter (path, query, header, cookie)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 19,
                  "col": 2,
                  "byteIndex": 730
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasParameterLocation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasParameterLocation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A brief description of the parameter"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 21,
                  "col": 2,
                  "byteIndex": 809
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Determines whether this parameter is mandatory"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 900
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "jsDoc": {
                  "doc": "Specifies that the parameter is deprecated"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 25,
                  "col": 2,
                  "byteIndex": 985
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "allowEmptyValue",
                "jsDoc": {
                  "doc": "Whether to allow empty values for the parameter"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 27,
                  "col": 2,
                  "byteIndex": 1077
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "allowReserved",
                "jsDoc": {
                  "doc": "Whether reserved characters are allowed in the parameter value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 29,
                  "col": 2,
                  "byteIndex": 1189
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "The schema defining the parameter's data type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 31,
                  "col": 2,
                  "byteIndex": 1282
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "jsDoc": {
                  "doc": "Example values for the parameter"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 33,
                  "col": 2,
                  "byteIndex": 1376
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OasExample",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "OasExample"
                                }
                              },
                              {
                                "repr": "OasRef",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "example",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "example"
                                      }
                                    }
                                  ],
                                  "typeName": "OasRef"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "content",
                "jsDoc": {
                  "doc": "Media type definitions for the parameter content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 35,
                  "col": 2,
                  "byteIndex": 1506
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "OasMediaType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasMediaType"
                            }
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "style",
                "jsDoc": {
                  "doc": "The serialization style for the parameter"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1610
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasParameterStyle",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasParameterStyle"
                  }
                },
                "typeParams": []
              },
              {
                "name": "explode",
                "jsDoc": {
                  "doc": "Whether to explode parameter values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 39,
                  "col": 2,
                  "byteIndex": 1682
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
                  "line": 41,
                  "col": 2,
                  "byteIndex": 1751
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasParameter",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
        "line": 188,
        "col": 0,
        "byteIndex": 5883
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Parameter Object in the OpenAPI Specification.\n\nThe `OasParameter` class encapsulates the definition of a single operation parameter,\nincluding its location, data type, validation rules, and serialization behavior.\nParameters can be located in the path, query string, headers, or cookies.\n\nThis class provides comprehensive support for parameter validation, serialization\nstyles, and complex data types through schema definitions or content specifications.\n\n## Key Features\n\n- **Location Support**: Path, query, header, and cookie parameters\n- **Schema Validation**: Comprehensive data type validation through schemas\n- **Serialization Styles**: Various parameter serialization formats\n- **Content Types**: Support for complex parameter content with media types\n- **Examples & Documentation**: Parameter examples and descriptive documentation\n- **Advanced Options**: Empty values, reserved characters, and explode behavior\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic path parameter\n```typescript\nimport { OasParameter, OasString } from '@skmtc/core';\n\nconst userIdParam = new OasParameter({\n  name: 'userId',\n  location: 'path',\n  description: 'Unique identifier for the user',\n  required: true,\n  schema: new OasString({\n    pattern: '^[0-9a-f]{24}$',\n    example: '507f1f77bcf86cd799439011'\n  }),\n  style: 'simple',\n  explode: false\n});\n\n// Used in path: /users/{userId}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Query parameter with validation\n```typescript\nconst pageSizeParam = new OasParameter({\n  name: 'pageSize',\n  location: 'query',\n  description: 'Number of items to return per page',\n  required: false,\n  schema: new OasInteger({\n    minimum: 1,\n    maximum: 100,\n    default: 20\n  }),\n  style: 'form',\n  explode: true,\n  examples: {\n    small: new OasExample({ value: 10 }),\n    medium: new OasExample({ value: 25 }),\n    large: new OasExample({ value: 50 })\n  }\n});\n\n// Used in query: ?pageSize=20\n```\n"
          },
          {
            "kind": "example",
            "doc": "Header parameter\n```typescript\nconst authHeaderParam = new OasParameter({\n  name: 'Authorization',\n  location: 'header',\n  description: 'Bearer token for authentication',\n  required: true,\n  schema: new OasString({\n    pattern: '^Bearer [A-Za-z0-9+/=]+$',\n    example: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...'\n  }),\n  style: 'simple',\n  explode: false\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex parameter with content\n```typescript\nconst filterParam = new OasParameter({\n  name: 'filter',\n  location: 'query',\n  description: 'Complex filter object',\n  required: false,\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          category: new OasString(),\n          priceRange: new OasObject({\n            properties: {\n              min: new OasNumber(),\n              max: new OasNumber()\n            }\n          })\n        }\n      })\n    })\n  },\n  style: 'deepObject',\n  explode: true\n});\n\n// Used as: ?filter[category]=electronics&filter[priceRange][min]=100\n```\n"
          },
          {
            "kind": "example",
            "doc": "Array parameter with explode\n```typescript\nconst tagsParam = new OasParameter({\n  name: 'tags',\n  location: 'query',\n  description: 'Filter by multiple tags',\n  required: false,\n  schema: new OasArray({\n    items: new OasString(),\n    minItems: 1,\n    maxItems: 10\n  }),\n  style: 'form',\n  explode: true // Results in: ?tags=tech&tags=api&tags=rest\n});\n\n// Without explode: ?tags=tech,api,rest\n// With explode: ?tags=tech&tags=api&tags=rest\n```\n"
          },
          {
            "kind": "example",
            "doc": "Cookie parameter\n```typescript\nconst sessionParam = new OasParameter({\n  name: 'sessionId',\n  location: 'cookie',\n  description: 'Session identifier cookie',\n  required: false,\n  schema: new OasString({\n    minLength: 32,\n    maxLength: 128\n  }),\n  style: 'form',\n  explode: false\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasParameter instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Parameter configuration fields including name, location, schema, and serialization options"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "ParameterFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ParameterFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 222,
              "col": 2,
              "byteIndex": 7542
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for OAS parameter objects"
            },
            "tsType": {
              "repr": "parameter",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "parameter"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 190,
              "col": 2,
              "byteIndex": 5964
            }
          },
          {
            "jsDoc": {
              "doc": "The name of the parameter"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "name",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 192,
              "col": 2,
              "byteIndex": 6036
            }
          },
          {
            "jsDoc": {
              "doc": "Where the parameter is located (path, query, header, cookie)"
            },
            "tsType": {
              "repr": "OasParameterLocation",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasParameterLocation"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "location",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 194,
              "col": 2,
              "byteIndex": 6121
            }
          },
          {
            "jsDoc": {
              "doc": "A brief description of the parameter's purpose and usage"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 196,
              "col": 2,
              "byteIndex": 6220
            }
          },
          {
            "jsDoc": {
              "doc": "Determines whether this parameter is mandatory for the operation"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "required",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 198,
              "col": 2,
              "byteIndex": 6329
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates that the parameter is deprecated and should be avoided"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "deprecated",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 200,
              "col": 2,
              "byteIndex": 6436
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to allow empty values for this parameter"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "allowEmptyValue",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 202,
              "col": 2,
              "byteIndex": 6529
            }
          },
          {
            "jsDoc": {
              "doc": "Whether reserved characters are allowed in parameter values"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "allowReserved",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 204,
              "col": 2,
              "byteIndex": 6638
            }
          },
          {
            "jsDoc": {
              "doc": "The schema defining the parameter's data type and validation rules"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "schema",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 206,
              "col": 2,
              "byteIndex": 6752
            }
          },
          {
            "jsDoc": {
              "doc": "Example values demonstrating parameter usage"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasExample",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExample"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "example",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "example"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "examples",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 208,
              "col": 2,
              "byteIndex": 6858
            }
          },
          {
            "jsDoc": {
              "doc": "Media type definitions for complex parameter content"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasMediaType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasMediaType"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "content",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 210,
              "col": 2,
              "byteIndex": 6992
            }
          },
          {
            "jsDoc": {
              "doc": "The serialization style for the parameter (form, simple, etc.)"
            },
            "tsType": {
              "repr": "OasParameterStyle",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasParameterStyle"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "style",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 212,
              "col": 2,
              "byteIndex": 7117
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to explode parameter values into separate key-value pairs"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "explode",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 214,
              "col": 2,
              "byteIndex": 7219
            }
          },
          {
            "jsDoc": {
              "doc": "Custom extension fields (x-* properties) defined for this parameter"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 216,
              "col": 2,
              "byteIndex": 7315
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Determines if this parameter is a reference object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Always false since this is a concrete parameter instance, not a reference"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"parameter\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "parameter",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "parameter"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 245,
              "col": 2,
              "byteIndex": 8309
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this parameter object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The parameter instance itself since it's already a concrete object"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasParameter",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasParameter"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 254,
              "col": 2,
              "byteIndex": 8508
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this parameter object one level.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The parameter instance itself since it's already a concrete object"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasParameter",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasParameter"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 263,
              "col": 2,
              "byteIndex": 8703
            }
          },
          {
            "jsDoc": {
              "doc": "Extracts the schema for this parameter.\n\nReturns the direct schema if available, or extracts schema from content\nfor the specified media type.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "mediaType",
                  "doc": "- Media type to extract schema from when using content definitions"
                },
                {
                  "kind": "return",
                  "doc": "The parameter's schema object"
                },
                {
                  "kind": "throws",
                  "type": null,
                  "doc": "Error if no schema is found for the specified media type"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "mediaType",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "right": "application/json",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 277,
              "col": 2,
              "byteIndex": 9140
            }
          },
          {
            "jsDoc": {
              "doc": "Converts this OAS parameter to an OpenAPI v3 JSON schema representation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Conversion options including reference handling and formatting preferences"
                },
                {
                  "kind": "return",
                  "doc": "OpenAPI v3 parameter object with all properties and validation constraints"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.ParameterObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.ParameterObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/Parameter.ts",
              "line": 297,
              "col": 2,
              "byteIndex": 9733
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasParameterLocation",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
        "line": 13,
        "col": 0,
        "byteIndex": 466
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "query",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "query"
              }
            },
            {
              "repr": "header",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "header"
              }
            },
            {
              "repr": "path",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "path"
              }
            },
            {
              "repr": "cookie",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "cookie"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "oasParameterLocation",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
        "line": 15,
        "col": 13,
        "byteIndex": 554
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasParameterLocation",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasParameterLocation"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasParameterStyle",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
        "line": 22,
        "col": 0,
        "byteIndex": 702
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "matrix",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "matrix"
              }
            },
            {
              "repr": "label",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "label"
              }
            },
            {
              "repr": "form",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "form"
              }
            },
            {
              "repr": "simple",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "simple"
              }
            },
            {
              "repr": "spaceDelimited",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "spaceDelimited"
              }
            },
            {
              "repr": "pipeDelimited",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "pipeDelimited"
              }
            },
            {
              "repr": "deepObject",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "deepObject"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "oasParameterStyle",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
        "line": 31,
        "col": 13,
        "byteIndex": 855
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasParameterStyle",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasParameterStyle"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasParameterData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
        "line": 41,
        "col": 0,
        "byteIndex": 1095
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1130
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "parameter",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "parameter"
                  }
                },
                "typeParams": []
              },
              {
                "name": "allowEmptyValue",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 43,
                  "col": 2,
                  "byteIndex": 1153
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "allowReserved",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1181
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "content",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 45,
                  "col": 2,
                  "byteIndex": 1207
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasMediaTypeData",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasMediaTypeData"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "deprecated",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1252
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 47,
                  "col": 2,
                  "byteIndex": 1275
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "examples",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 48,
                  "col": 2,
                  "byteIndex": 1298
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasExampleData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleData"
                            }
                          },
                          {
                            "repr": "OasExampleRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasExampleRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "explode",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 49,
                  "col": 2,
                  "byteIndex": 1362
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "location",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 50,
                  "col": 2,
                  "byteIndex": 1381
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasParameterLocation",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasParameterLocation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 51,
                  "col": 2,
                  "byteIndex": 1414
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "required",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 52,
                  "col": 2,
                  "byteIndex": 1429
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 53,
                  "col": 2,
                  "byteIndex": 1450
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchemaData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaData"
                      }
                    },
                    {
                      "repr": "OasSchemaRefData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchemaRefData"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "style",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
                  "line": 54,
                  "col": 2,
                  "byteIndex": 1494
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "OasParameterStyle",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasParameterStyle"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasParameterData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/parameter/parameter-types.ts",
        "line": 57,
        "col": 13,
        "byteIndex": 1535
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasParameterData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasParameterData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "PathItemFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
        "line": 7,
        "col": 0,
        "byteIndex": 162
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasPathItem}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "summary",
                "jsDoc": {
                  "doc": "Optional summary for the path item"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 239
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Optional description for the path item"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
                  "line": 11,
                  "col": 2,
                  "byteIndex": 318
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "parameters",
                "jsDoc": {
                  "doc": "Parameters that are applicable for all operations on this path"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 425
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "OasParameter",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "OasParameter"
                              }
                            },
                            {
                              "repr": "OasRef",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "parameter",
                                    "kind": "literal",
                                    "literal": {
                                      "kind": "string",
                                      "string": "parameter"
                                    }
                                  }
                                ],
                                "typeName": "OasRef"
                              }
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 541
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasPathItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
        "line": 103,
        "col": 0,
        "byteIndex": 3305
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Path Item Object in the OpenAPI Specification.\n\nThe `OasPathItem` class describes operations available on a single API path.\nIt serves as a container for HTTP operations (GET, POST, PUT, DELETE, etc.)\nand can define parameters that apply to all operations on the path.\n\nThis class provides path-level configuration and shared parameters that\nreduce duplication across operations on the same endpoint.\n\n## Key Features\n\n- **Operation Container**: Groups HTTP methods for a single path\n- **Shared Parameters**: Path-level parameters for all operations\n- **Documentation**: Summary and description for the path\n- **Extension Support**: Custom fields for additional metadata\n- **Parameter Inheritance**: Parameters shared across all operations\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic path item with shared parameters\n```typescript\nimport { OasPathItem, OasParameter, OasString } from '@skmtc/core';\n\nconst userPathItem = new OasPathItem({\n  summary: 'User operations',\n  description: 'Operations for managing individual users',\n  parameters: [\n    new OasParameter({\n      name: 'userId',\n      in: 'path',\n      required: true,\n      schema: new OasString({ format: 'uuid' }),\n      description: 'Unique identifier for the user'\n    })\n  ]\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Path with common headers\n```typescript\nconst apiPathItem = new OasPathItem({\n  summary: 'API endpoint',\n  description: 'Authenticated endpoint requiring API key',\n  parameters: [\n    new OasParameter({\n      name: 'Authorization',\n      in: 'header',\n      required: true,\n      schema: new OasString({ pattern: '^Bearer .+$' }),\n      description: 'Bearer token for authentication'\n    }),\n    new OasParameter({\n      name: 'Accept-Version',\n      in: 'header',\n      required: false,\n      schema: new OasString({ enum: ['v1', 'v2'] }),\n      description: 'API version preference'\n    })\n  ]\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "RESTful resource path\n```typescript\nconst resourcePathItem = new OasPathItem({\n  summary: 'Product resource',\n  description: 'CRUD operations for product management',\n  parameters: [\n    new OasParameter({\n      name: 'productId',\n      in: 'path',\n      required: true,\n      schema: new OasInteger({ minimum: 1 }),\n      description: 'Product identifier'\n    }),\n    new OasParameter({\n      name: 'include',\n      in: 'query',\n      required: false,\n      schema: new OasString({ enum: ['details', 'reviews', 'images'] }),\n      description: 'Additional data to include in response'\n    })\n  ]\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "PathItemFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "PathItemFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
              "line": 110,
              "col": 2,
              "byteIndex": 3554
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "pathItem",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "pathItem"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
              "line": 104,
              "col": 2,
              "byteIndex": 3334
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "summary",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
              "line": 105,
              "col": 2,
              "byteIndex": 3369
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
              "line": 106,
              "col": 2,
              "byteIndex": 3399
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "OasParameter",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasParameter"
                          }
                        },
                        {
                          "repr": "OasRef",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "parameter",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "parameter"
                                }
                              }
                            ],
                            "typeName": "OasRef"
                          }
                        }
                      ]
                    }
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "parameters",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
              "line": 107,
              "col": 2,
              "byteIndex": 3433
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/PathItem.ts",
              "line": 108,
              "col": 2,
              "byteIndex": 3498
            }
          }
        ],
        "indexSignatures": [],
        "methods": [],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasPathItemData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/pathItem-types.ts",
        "line": 6,
        "col": 0,
        "byteIndex": 261
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/pathItem-types.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 295
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "pathItem",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "pathItem"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/pathItem-types.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 317
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/pathItem-types.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 333
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/pathItem-types.ts",
                  "line": 10,
                  "col": 2,
                  "byteIndex": 352
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "parameters",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/pathItem-types.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 406
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "OasParameterData",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasParameterData"
                          }
                        },
                        {
                          "repr": "OasParameterRefData",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasParameterRefData"
                          }
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasPathItemData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/pathItem/pathItem-types.ts",
        "line": 15,
        "col": 13,
        "byteIndex": 478
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasPathItemData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasPathItemData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "RefFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
        "line": 22,
        "col": 0,
        "byteIndex": 929
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Field data for creating OAS reference objects.\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- The type of component being referenced (e.g., 'schema', 'response')"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "refType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 990
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 1003
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "",
              "kind": "indexedAccess",
              "indexedAccess": {
                "readonly": false,
                "objType": {
                  "repr": "OasRefData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasRefData"
                  }
                },
                "indexType": {
                  "repr": "refType",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "refType"
                  }
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "OasRef",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
        "line": 113,
        "col": 0,
        "byteIndex": 3856
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an OpenAPI reference ($ref) in the SKMTC OAS processing system.\n\nThe `OasRef` class handles OpenAPI JSON Reference Objects that point to reusable\ncomponents within the same document. It provides type-safe reference resolution\nwith support for chained references and circular reference detection.\n\n## Key Features\n\n- **Type Safety**: Generic parameter ensures resolved types match the reference type\n- **Lazy Resolution**: References are resolved on-demand, not during construction\n- **Chain Resolution**: Handles references that point to other references\n- **Circular Detection**: Prevents infinite loops with maximum lookup limits\n- **Type Validation**: Ensures resolved objects match expected reference types\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- The type of component this reference points to\n"
          },
          {
            "kind": "example",
            "doc": "Basic reference resolution\n```typescript\nimport { OasRef } from '@skmtc/core';\n\n// Reference to a schema component\nconst userRef = new OasRef<'schema'>({\n  refType: 'schema',\n  $ref: '#/components/schemas/User'\n}, document);\n\n// Resolve the reference\nconst userSchema = userRef.resolve();\nconsole.log(userSchema.properties); // Access resolved schema properties\n```\n"
          },
          {
            "kind": "example",
            "doc": "Working with different reference types\n```typescript\n// Schema reference\nconst schemaRef = new OasRef<'schema'>({\n  refType: 'schema',\n  $ref: '#/components/schemas/Product'\n}, document);\n\n// Response reference\nconst responseRef = new OasRef<'response'>({\n  refType: 'response',\n  $ref: '#/components/responses/ErrorResponse'\n}, document);\n\n// Parameter reference\nconst paramRef = new OasRef<'parameter'>({\n  refType: 'parameter',\n  $ref: '#/components/parameters/PageSize'\n}, document);\n```\n"
          },
          {
            "kind": "example",
            "doc": "Reference checking and conditional resolution\n```typescript\nfunction processSchemaOrRef(schema: OasSchema | OasRef<'schema'>) {\n  if (schema.isRef()) {\n    // Handle reference\n    const refName = schema.toRefName();\n    console.log(`Processing reference: ${refName}`);\n\n    // Resolve only when needed\n    const resolved = schema.resolve();\n    return processed(resolved);\n  } else {\n    // Handle direct schema\n    return process(schema);\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Chained reference handling\n```typescript\n// References can point to other references\nconst chainedRef = new OasRef<'schema'>({\n  refType: 'schema',\n  $ref: '#/components/schemas/AliasToUser'\n}, document);\n\n// resolve() automatically follows the chain\nconst finalSchema = chainedRef.resolve(); // Follows chain to final schema\n\n// resolveOnce() resolves only one step\nconst oneStep = chainedRef.resolveOnce(); // May still be a reference\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OAS reference instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Reference field data including refType and $ref"
                },
                {
                  "kind": "param",
                  "name": "oasDocument",
                  "doc": "- Document containing the referenced component"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "RefFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "RefFields"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "oasDocument",
                "optional": false,
                "tsType": {
                  "repr": "OasDocument",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasDocument"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 127,
              "col": 2,
              "byteIndex": 4268
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "OAS type identifier"
            },
            "tsType": {
              "repr": "ref",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "ref"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 115,
              "col": 2,
              "byteIndex": 3942
            }
          },
          {
            "jsDoc": {
              "doc": "Type identifier"
            },
            "tsType": {
              "repr": "ref",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "ref"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 117,
              "col": 2,
              "byteIndex": 3992
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Type guard to check if this instance is a reference.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Always true for OasRef instances"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[38;5;12mT\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 137,
              "col": 2,
              "byteIndex": 4522
            }
          },
          {
            "jsDoc": {
              "doc": "Recursively resolves this reference to its final target component.\n\nFollows reference chains until reaching a non-reference component,\nwith protection against infinite loops.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "lookupsPerformed",
                  "doc": "- Internal counter to prevent infinite recursion"
                },
                {
                  "kind": "return",
                  "doc": "The resolved component"
                },
                {
                  "kind": "throws",
                  "type": null,
                  "doc": "Error if maximum lookup depth is exceeded"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "lookupsPerformed",
                    "optional": false,
                    "tsType": {
                      "repr": "number",
                      "kind": "keyword",
                      "keyword": "number"
                    }
                  },
                  "right": "0",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "ResolvedRef",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "ResolvedRef"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 151,
              "col": 2,
              "byteIndex": 4957
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this reference one level, potentially returning another reference.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Either the resolved component or another reference in the chain"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  },
                  {
                    "repr": "ResolvedRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "ResolvedRef"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 166,
              "col": 2,
              "byteIndex": 5413
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toRefName",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "RefName",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RefName"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 204,
              "col": 2,
              "byteIndex": 6637
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "$ref",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 208,
              "col": 2,
              "byteIndex": 6707
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "refType",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "indexedAccess",
                "indexedAccess": {
                  "readonly": false,
                  "objType": {
                    "repr": "OasRefData",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasRefData"
                    }
                  },
                  "indexType": {
                    "repr": "refType",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "refType"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 212,
              "col": 2,
              "byteIndex": 6764
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasDocument",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasDocument",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasDocument"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 216,
              "col": 2,
              "byteIndex": 6842
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "resolve",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OpenAPIV3.ReferenceObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OpenAPIV3.ReferenceObject"
                    }
                  },
                  {
                    "repr": "ResolvedRefJsonType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "ResolvedRefJsonType"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 220,
              "col": 2,
              "byteIndex": 6911
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJSON",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "object",
                "kind": "keyword",
                "keyword": "object"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
              "line": 244,
              "col": 2,
              "byteIndex": 7649
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "",
              "kind": "indexedAccess",
              "indexedAccess": {
                "readonly": false,
                "objType": {
                  "repr": "OasRefData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasRefData"
                  }
                },
                "indexType": {
                  "repr": "refType",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "refType"
                  }
                }
              }
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "ResolvedRefJsonType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
        "line": 264,
        "col": 0,
        "byteIndex": 8252
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type representing the JSON schema result from resolving a reference.\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- The type of component being referenced"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "ReturnType",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "indexedAccess",
                "indexedAccess": {
                  "readonly": false,
                  "objType": {
                    "repr": "ResolvedRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "ResolvedRef"
                    }
                  },
                  "indexType": {
                    "repr": "toJsonSchema",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "toJsonSchema"
                    }
                  }
                }
              }
            ],
            "typeName": "ReturnType"
          }
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "",
              "kind": "indexedAccess",
              "indexedAccess": {
                "readonly": false,
                "objType": {
                  "repr": "OasRefData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasRefData"
                  }
                },
                "indexType": {
                  "repr": "refType",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "refType"
                  }
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "OasComponentType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
        "line": 273,
        "col": 0,
        "byteIndex": 8514
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type of all OAS component types that can be referenced.\n\nIncludes all OpenAPI component types that support $ref resolution."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OasSchema",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasSchema"
              }
            },
            {
              "repr": "OasResponse",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasResponse"
              }
            },
            {
              "repr": "OasParameter",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasParameter"
              }
            },
            {
              "repr": "OasExample",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasExample"
              }
            },
            {
              "repr": "OasRequestBody",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasRequestBody"
              }
            },
            {
              "repr": "OasHeader",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasHeader"
              }
            },
            {
              "repr": "OasSecurityScheme",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasSecurityScheme"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ResolvedRef",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
        "line": 287,
        "col": 0,
        "byteIndex": 8832
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type representing a resolved reference to a specific component type.\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- The type of component being referenced (e.g., 'schema', 'response')"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Extract",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasComponentType",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasComponentType"
                }
              },
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "oasType",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/Ref.ts",
                        "line": 287,
                        "col": 87,
                        "byteIndex": 8919
                      },
                      "params": [],
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              }
            ],
            "typeName": "Extract"
          }
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "",
              "kind": "indexedAccess",
              "indexedAccess": {
                "readonly": false,
                "objType": {
                  "repr": "OasRefData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasRefData"
                  }
                },
                "indexType": {
                  "repr": "refType",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "refType"
                  }
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "OasSchemaRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 285
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI schema reference objects.\n\nRepresents $ref references to schema objects in OpenAPI documents,\nallowing for component reuse and circular reference handling."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type identifier for OAS reference objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 371
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refType",
                "jsDoc": {
                  "doc": "The type of object being referenced"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 433
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "schema",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "schema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "jsDoc": {
                  "doc": "The reference path (e.g., '#/components/schemas/User')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 517
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "jsDoc": {
                  "doc": "Optional summary for the reference"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 576
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Optional description for the reference"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 643
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasSchemaRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 26,
        "col": 13,
        "byteIndex": 744
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating schema reference data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasSchemaRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasSchemaRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasResponseRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 40,
        "col": 0,
        "byteIndex": 1168
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI response reference objects.\n\nRepresents $ref references to response objects in OpenAPI documents,\nenabling response definition reuse across multiple operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type identifier for OAS reference objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 42,
                  "col": 2,
                  "byteIndex": 1256
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refType",
                "jsDoc": {
                  "doc": "The type of object being referenced"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1318
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "response",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "response"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "jsDoc": {
                  "doc": "The reference path (e.g., '#/components/responses/NotFound')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1410
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "jsDoc": {
                  "doc": "Optional summary for the reference"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 48,
                  "col": 2,
                  "byteIndex": 1469
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Optional description for the reference"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 50,
                  "col": 2,
                  "byteIndex": 1536
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasResponseRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 56,
        "col": 13,
        "byteIndex": 1639
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating response reference data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasResponseRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasResponseRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasParameterRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 70,
        "col": 0,
        "byteIndex": 2071
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI parameter reference objects.\n\nRepresents $ref references to parameter objects in OpenAPI documents,\nallowing parameter definitions to be reused across operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type identifier for OAS reference objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 72,
                  "col": 2,
                  "byteIndex": 2160
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refType",
                "jsDoc": {
                  "doc": "The type of object being referenced"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 74,
                  "col": 2,
                  "byteIndex": 2222
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "parameter",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "parameter"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "jsDoc": {
                  "doc": "The reference path (e.g., '#/components/parameters/PageSize')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 76,
                  "col": 2,
                  "byteIndex": 2316
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "jsDoc": {
                  "doc": "Optional summary for the reference"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 78,
                  "col": 2,
                  "byteIndex": 2375
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Optional description for the reference"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 80,
                  "col": 2,
                  "byteIndex": 2442
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasParameterRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 86,
        "col": 13,
        "byteIndex": 2546
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating parameter reference data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasParameterRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasParameterRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasExampleRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 100,
        "col": 0,
        "byteIndex": 2988
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI example reference objects.\n\nRepresents $ref references to example objects in OpenAPI documents,\nenabling example reuse across multiple schema definitions and operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 101,
                  "col": 2,
                  "byteIndex": 3024
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 102,
                  "col": 2,
                  "byteIndex": 3041
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "example",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "example"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 103,
                  "col": 2,
                  "byteIndex": 3062
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 104,
                  "col": 2,
                  "byteIndex": 3077
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 105,
                  "col": 2,
                  "byteIndex": 3096
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasExampleRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 111,
        "col": 13,
        "byteIndex": 3198
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating example reference data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasExampleRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasExampleRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasRequestBodyRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 125,
        "col": 0,
        "byteIndex": 3636
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI request body reference objects.\n\nRepresents $ref references to request body objects in OpenAPI documents,\nallowing request body definitions to be reused across operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 126,
                  "col": 2,
                  "byteIndex": 3676
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 127,
                  "col": 2,
                  "byteIndex": 3693
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "requestBody",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "requestBody"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 128,
                  "col": 2,
                  "byteIndex": 3718
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 129,
                  "col": 2,
                  "byteIndex": 3733
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 130,
                  "col": 2,
                  "byteIndex": 3752
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasRequestBodyRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 136,
        "col": 13,
        "byteIndex": 3859
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating request body reference data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasRequestBodyRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasRequestBodyRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasHeaderRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 149,
        "col": 0,
        "byteIndex": 4296
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI header reference objects.\n\nRepresents $ref references to header objects in OpenAPI documents,\nenabling header definition reuse across operations and responses."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 150,
                  "col": 2,
                  "byteIndex": 4331
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 151,
                  "col": 2,
                  "byteIndex": 4348
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "header",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "header"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 152,
                  "col": 2,
                  "byteIndex": 4368
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "summary",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 153,
                  "col": 2,
                  "byteIndex": 4383
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 154,
                  "col": 2,
                  "byteIndex": 4402
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasHeaderRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 160,
        "col": 13,
        "byteIndex": 4503
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating header reference data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasHeaderRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasHeaderRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasSecuritySchemeRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 174,
        "col": 0,
        "byteIndex": 4947
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI security scheme reference objects.\n\nRepresents $ref references to security scheme objects in OpenAPI documents,\nallowing security scheme definitions to be reused across operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 175,
                  "col": 2,
                  "byteIndex": 4990
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "refType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 176,
                  "col": 2,
                  "byteIndex": 5007
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "securityScheme",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "securityScheme"
                  }
                },
                "typeParams": []
              },
              {
                "name": "$ref",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
                  "line": 177,
                  "col": 2,
                  "byteIndex": 5035
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasSecuritySchemeRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 183,
        "col": 13,
        "byteIndex": 5137
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating security scheme reference data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasSecuritySchemeRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasSecuritySchemeRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 203,
        "col": 0,
        "byteIndex": 5762
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing all possible OpenAPI reference data types.\n\nEncompasses all supported reference types in the OpenAPI specification,\nproviding type-safe handling of references to various component types."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OasSchemaRefData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasSchemaRefData"
              }
            },
            {
              "repr": "OasResponseRefData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasResponseRefData"
              }
            },
            {
              "repr": "OasParameterRefData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasParameterRefData"
              }
            },
            {
              "repr": "OasExampleRefData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasExampleRefData"
              }
            },
            {
              "repr": "OasRequestBodyRefData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasRequestBodyRefData"
              }
            },
            {
              "repr": "OasHeaderRefData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasHeaderRefData"
              }
            },
            {
              "repr": "OasSecuritySchemeRefData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasSecuritySchemeRefData"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "oasRefData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/ref-types.ts",
        "line": 219,
        "col": 13,
        "byteIndex": 6184
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating any OpenAPI reference data.\n\nUnion schema that validates all supported reference types,\nensuring type safety across the entire reference system."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasRefData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasRefData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toRefV31",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/ref/toRefV31.ts",
        "line": 12,
        "col": 13,
        "byteIndex": 342
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasRef",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "T",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "T"
                    }
                  }
                ],
                "typeName": "OasRef"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "ref",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "refType",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToRefV31Args",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "ToRefV31Args"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "T",
                "constraint": {
                  "repr": "",
                  "kind": "indexedAccess",
                  "indexedAccess": {
                    "readonly": false,
                    "objType": {
                      "repr": "OasRefData",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasRefData"
                      }
                    },
                    "indexType": {
                      "repr": "refType",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "refType"
                      }
                    }
                  }
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "RequestBodyFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 328
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasRequestBody}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the request body"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 407
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "content",
                "jsDoc": {
                  "doc": "Request content for different media types"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 493
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasMediaType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasMediaType"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Whether the request body is required"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 579
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 662
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasRequestBody",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
        "line": 278,
        "col": 0,
        "byteIndex": 9096
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Request Body Object in the OpenAPI Specification.\n\nThe `OasRequestBody` class encapsulates the definition of a request body that\ncan be sent with HTTP operations. It supports multiple content types, schema\nvalidation, and can be marked as required or optional. Request bodies are\ncommonly used with POST, PUT, PATCH, and sometimes DELETE operations.\n\nThis class provides comprehensive support for request body definitions with\ntyped content, multiple media type representations, and proper validation.\n\n## Key Features\n\n- **Multiple Content Types**: Support for JSON, XML, form data, binary, and more\n- **Schema Validation**: Typed request bodies through schema definitions\n- **Required/Optional**: Control whether the request body is mandatory\n- **Reference Support**: Can reference reusable request body components\n- **Documentation**: Rich description support for API documentation\n- **Media Type Flexibility**: Different schemas for different content types\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic JSON request body\n```typescript\nimport { OasRequestBody, OasMediaType, OasObject, OasString } from '@skmtc/core';\n\nconst createUserRequest = new OasRequestBody({\n  description: 'User data for creating a new user account',\n  required: true,\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          name: new OasString({\n            description: 'Full name',\n            minLength: 1,\n            maxLength: 100\n          }),\n          email: new OasString({\n            format: 'email',\n            description: 'Email address'\n          }),\n          password: new OasString({\n            minLength: 8,\n            description: 'Account password'\n          })\n        },\n        required: ['name', 'email', 'password']\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Multiple content types\n```typescript\nconst multiFormatRequest = new OasRequestBody({\n  description: 'Product data in multiple formats',\n  required: true,\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasRef({ $ref: '#/components/schemas/Product' })\n    }),\n    'application/xml': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          product: new OasRef({ $ref: '#/components/schemas/Product' })\n        }\n      })\n    }),\n    'application/x-www-form-urlencoded': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          name: new OasString(),\n          price: new OasNumber({ format: 'double' }),\n          category_id: new OasInteger()\n        }\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "File upload request body\n```typescript\nconst fileUploadRequest = new OasRequestBody({\n  description: 'File upload with metadata',\n  required: true,\n  content: {\n    'multipart/form-data': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          file: new OasString({\n            format: 'binary',\n            description: 'The file to upload'\n          }),\n          filename: new OasString({\n            description: 'Original filename'\n          }),\n          description: new OasString({\n            description: 'File description',\n            required: false\n          }),\n          tags: new OasArray({\n            items: new OasString(),\n            description: 'File tags'\n          })\n        },\n        required: ['file', 'filename']\n      })\n    }),\n    'application/octet-stream': new OasMediaType({\n      schema: new OasString({\n        format: 'binary',\n        description: 'Raw binary file content'\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Optional request body for updates\n```typescript\nconst updateUserRequest = new OasRequestBody({\n  description: 'Partial user data for updates (all fields optional)',\n  required: false, // Request body itself is optional\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          name: new OasString({ description: 'Updated name' }),\n          email: new OasString({\n            format: 'email',\n            description: 'Updated email'\n          }),\n          bio: new OasString({ description: 'User biography' }),\n          preferences: new OasObject({\n            properties: {\n              notifications: new OasBoolean(),\n              theme: new OasString({ enum: ['light', 'dark'] })\n            }\n          })\n        }\n        // No required fields - all updates are optional\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex nested data structures\n```typescript\nconst orderRequest = new OasRequestBody({\n  description: 'Complete order with items and shipping',\n  required: true,\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          customer: new OasObject({\n            properties: {\n              id: new OasString(),\n              email: new OasString({ format: 'email' })\n            },\n            required: ['id']\n          }),\n          items: new OasArray({\n            items: new OasObject({\n              properties: {\n                productId: new OasString(),\n                quantity: new OasInteger({ minimum: 1 }),\n                customizations: new OasArray({\n                  items: new OasString()\n                })\n              },\n              required: ['productId', 'quantity']\n            }),\n            minItems: 1\n          }),\n          shipping: new OasObject({\n            properties: {\n              address: new OasRef({ $ref: '#/components/schemas/Address' }),\n              method: new OasString({ enum: ['standard', 'express', 'overnight'] }),\n              instructions: new OasString()\n            },\n            required: ['address', 'method']\n          }),\n          couponCode: new OasString({ description: 'Optional discount code' })\n        },\n        required: ['customer', 'items', 'shipping']\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Form data with validation\n```typescript\nconst registrationForm = new OasRequestBody({\n  description: 'User registration form data',\n  required: true,\n  content: {\n    'application/x-www-form-urlencoded': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          username: new OasString({\n            pattern: '^[a-zA-Z0-9_]{3,20}$',\n            description: 'Alphanumeric username, 3-20 characters'\n          }),\n          email: new OasString({\n            format: 'email',\n            description: 'Valid email address'\n          }),\n          password: new OasString({\n            minLength: 8,\n            description: 'Password, minimum 8 characters'\n          }),\n          confirmPassword: new OasString({\n            description: 'Password confirmation'\n          }),\n          agreeToTerms: new OasBoolean({\n            enum: [true],\n            description: 'Must accept terms of service'\n          })\n        },\n        required: ['username', 'email', 'password', 'confirmPassword', 'agreeToTerms']\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in operation definitions\n```typescript\nconst createProductOperation = new OasOperation({\n  path: '/products',\n  method: 'post',\n  requestBody: createUserRequest,\n  responses: {\n    '201': new OasResponse({\n      description: 'Product created successfully',\n      content: {\n        'application/json': new OasMediaType({\n          schema: new OasRef({ $ref: '#/components/schemas/Product' })\n        })\n      }\n    }),\n    '400': new OasResponse({\n      description: 'Invalid request data',\n      content: {\n        'application/json': new OasMediaType({\n          schema: new OasRef({ $ref: '#/components/schemas/ValidationError' })\n        })\n      }\n    })\n  }\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "RequestBodyFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RequestBodyFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 284,
              "col": 2,
              "byteIndex": 9330
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "requestBody",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "requestBody"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 279,
              "col": 2,
              "byteIndex": 9128
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 280,
              "col": 2,
              "byteIndex": 9169
            }
          },
          {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "OasMediaType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasMediaType"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "content",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 281,
              "col": 2,
              "byteIndex": 9203
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "required",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 282,
              "col": 2,
              "byteIndex": 9243
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 283,
              "col": 2,
              "byteIndex": 9275
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"requestBody\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "requestBody",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "requestBody"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 291,
              "col": 2,
              "byteIndex": 9540
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasRequestBody",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasRequestBody"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 295,
              "col": 2,
              "byteIndex": 9605
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasRequestBody",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasRequestBody"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 299,
              "col": 2,
              "byteIndex": 9656
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "mediaType",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "right": "application/json",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 303,
              "col": 2,
              "byteIndex": 9711
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.RequestBodyObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.RequestBodyObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/RequestBody.ts",
              "line": 307,
              "col": 2,
              "byteIndex": 9856
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasRequestBodyData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/requestBody-types.ts",
        "line": 5,
        "col": 0,
        "byteIndex": 177
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/requestBody-types.ts",
                  "line": 6,
                  "col": 2,
                  "byteIndex": 214
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "requestBody",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "requestBody"
                  }
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/requestBody-types.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 239
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "content",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/requestBody-types.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 262
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasMediaTypeData",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasMediaTypeData"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "required",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/requestBody-types.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 306
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasRequestBodyData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/requestBody/requestBody-types.ts",
        "line": 12,
        "col": 13,
        "byteIndex": 341
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasRequestBodyData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasRequestBodyData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ResponseFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
        "line": 11,
        "col": 0,
        "byteIndex": 378
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasResponse}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the response"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 450
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "headers",
                "jsDoc": {
                  "doc": "Response headers that can be sent"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 528
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "OasHeader",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "OasHeader"
                                }
                              },
                              {
                                "repr": "OasRef",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": [
                                    {
                                      "repr": "header",
                                      "kind": "literal",
                                      "literal": {
                                        "kind": "string",
                                        "string": "header"
                                      }
                                    }
                                  ],
                                  "typeName": "OasRef"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "content",
                "jsDoc": {
                  "doc": "Response content for different media types"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 649
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "OasMediaType",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasMediaType"
                            }
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
                  "line": 19,
                  "col": 2,
                  "byteIndex": 752
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasResponse",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
        "line": 205,
        "col": 0,
        "byteIndex": 6410
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Response Object in the OpenAPI Specification.\n\nThe `OasResponse` class encapsulates the definition of a single HTTP response,\nincluding its description, headers, and content for different media types.\nResponses describe the possible outcomes of API operations and can include\nboth successful and error scenarios.\n\nThis class provides comprehensive support for response definitions with typed\ncontent, custom headers, and multiple media type representations.\n\n## Key Features\n\n- **Content Types**: Support for multiple media types (JSON, XML, HTML, etc.)\n- **Header Definitions**: Custom response headers with validation\n- **Schema Integration**: Typed response bodies through schema definitions\n- **Reference Support**: Can reference reusable response components\n- **Documentation**: Rich description support for API documentation\n- **JSON Schema**: Converts to standard JSON Schema format for validation\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic JSON response\n```typescript\nimport { OasResponse, OasMediaType, OasObject, OasString } from '@skmtc/core';\n\nconst successResponse = new OasResponse({\n  description: 'User retrieved successfully',\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          id: new OasString(),\n          name: new OasString(),\n          email: new OasString({ format: 'email' })\n        }\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Response with custom headers\n```typescript\nconst paginatedResponse = new OasResponse({\n  description: 'Paginated list of items',\n  headers: {\n    'X-Total-Count': new OasHeader({\n      description: 'Total number of items',\n      schema: new OasInteger({ minimum: 0 })\n    }),\n    'X-Page-Number': new OasHeader({\n      description: 'Current page number',\n      schema: new OasInteger({ minimum: 1 })\n    }),\n    'Link': new OasHeader({\n      description: 'Pagination links',\n      schema: new OasString()\n    })\n  },\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasArray({\n        items: new OasRef({ $ref: '#/components/schemas/Item' })\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Multiple content types\n```typescript\nconst multiFormatResponse = new OasResponse({\n  description: 'User data in multiple formats',\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasRef({ $ref: '#/components/schemas/User' })\n    }),\n    'application/xml': new OasMediaType({\n      schema: new OasObject({\n        // XML-specific schema definition\n        properties: {\n          user: new OasRef({ $ref: '#/components/schemas/User' })\n        }\n      })\n    }),\n    'text/csv': new OasMediaType({\n      schema: new OasString({\n        description: 'User data in CSV format'\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error responses\n```typescript\nconst errorResponse = new OasResponse({\n  description: 'Validation error occurred',\n  content: {\n    'application/json': new OasMediaType({\n      schema: new OasObject({\n        properties: {\n          error: new OasString({ description: 'Error message' }),\n          code: new OasString({ description: 'Error code' }),\n          details: new OasArray({\n            items: new OasObject({\n              properties: {\n                field: new OasString(),\n                message: new OasString()\n              }\n            })\n          })\n        },\n        required: ['error', 'code']\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "File download response\n```typescript\nconst fileDownloadResponse = new OasResponse({\n  description: 'File download',\n  headers: {\n    'Content-Disposition': new OasHeader({\n      description: 'Attachment filename',\n      schema: new OasString({ example: 'attachment; filename=\"report.pdf\"' })\n    }),\n    'Content-Length': new OasHeader({\n      description: 'File size in bytes',\n      schema: new OasInteger({ minimum: 0 })\n    })\n  },\n  content: {\n    'application/pdf': new OasMediaType({\n      schema: new OasString({\n        format: 'binary',\n        description: 'PDF file content'\n      })\n    }),\n    'application/octet-stream': new OasMediaType({\n      schema: new OasString({\n        format: 'binary',\n        description: 'Generic binary content'\n      })\n    })\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "No content response\n```typescript\nconst noContentResponse = new OasResponse({\n  description: 'Operation completed successfully, no content returned'\n  // No content or headers - represents HTTP 204 No Content\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in operation definitions\n```typescript\nconst getUserOperation = new OasOperation({\n  path: '/users/{id}',\n  method: 'get',\n  responses: {\n    '200': successResponse,\n    '404': new OasResponse({\n      description: 'User not found',\n      content: {\n        'application/json': new OasMediaType({\n          schema: new OasObject({\n            properties: {\n              error: new OasString({ example: 'User not found' }),\n              code: new OasString({ example: 'USER_NOT_FOUND' })\n            }\n          })\n        })\n      }\n    }),\n    '500': new OasRef({ $ref: '#/components/responses/InternalServerError' })\n  }\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "ResponseFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResponseFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 211,
              "col": 2,
              "byteIndex": 6683
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "response",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "response"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 206,
              "col": 2,
              "byteIndex": 6439
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 207,
              "col": 2,
              "byteIndex": 6474
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasHeader",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasHeader"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "header",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "header"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "headers",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 208,
              "col": 2,
              "byteIndex": 6508
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasMediaType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasMediaType"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "content",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 209,
              "col": 2,
              "byteIndex": 6576
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 210,
              "col": 2,
              "byteIndex": 6628
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"response\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "response",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "response"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 218,
              "col": 2,
              "byteIndex": 6888
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasResponse",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasResponse"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 222,
              "col": 2,
              "byteIndex": 6950
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasResponse",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasResponse"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 226,
              "col": 2,
              "byteIndex": 6998
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "assign",
                  "left": {
                    "kind": "identifier",
                    "name": "mediaType",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  "right": "application/json",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OasSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OasSchema"
                    }
                  },
                  {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 230,
              "col": 2,
              "byteIndex": 7050
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.ResponseObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.ResponseObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/Response.ts",
              "line": 234,
              "col": 2,
              "byteIndex": 7195
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasResponseData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/response-types.ts",
        "line": 6,
        "col": 0,
        "byteIndex": 276
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/response-types.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 310
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "response",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "response"
                  }
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/response-types.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 332
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "headers",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/response-types.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 354
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasHeaderData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasHeaderData"
                            }
                          },
                          {
                            "repr": "OasHeaderRefData",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasHeaderRefData"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "content",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/response-types.ts",
                  "line": 10,
                  "col": 2,
                  "byteIndex": 415
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasMediaTypeData",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasMediaTypeData"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasResponseData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/response/response-types.ts",
        "line": 14,
        "col": 13,
        "byteIndex": 514
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasResponseData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasResponseData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasSchema",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/Schema.ts",
        "line": 111,
        "col": 0,
        "byteIndex": 4374
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing all possible OpenAPI Schema objects in the SKMTC system.\n\n`OasSchema` is the fundamental type for representing any OpenAPI schema definition\nafter it has been parsed and processed by the SKMTC pipeline. It encompasses all\nJSON Schema types supported by OpenAPI 3.x specifications, providing type-safe\naccess to schema properties and validation constraints.\n\nThis union type is used throughout the system for schema processing, type generation,\nand validation. Each variant corresponds to a specific JSON Schema type with its\nown set of properties and validation rules.\n\n## Supported Schema Types\n\n- **{@link OasArray}**: Array schemas with item type definitions and constraints\n- **{@link OasBoolean}**: Boolean schemas with optional default values\n- **{@link OasInteger}**: Integer schemas with numeric constraints and formats\n- **{@link OasNumber}**: Number schemas with numeric constraints and formats\n- **{@link OasObject}**: Object schemas with properties, required fields, and constraints\n- **{@link OasString}**: String schemas with length constraints, patterns, and formats\n- **{@link OasUnknown}**: Schemas with unknown or mixed types\n- **{@link OasUnion}**: Union schemas representing oneOf/anyOf/allOf constructs\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Type checking and processing\n```typescript\nimport type { OasSchema } from '@skmtc/core';\n\nfunction processSchema(schema: OasSchema): string {\n  if (schema.type === 'object') {\n    // TypeScript knows this is OasObject\n    return `Object with ${Object.keys(schema.properties || {}).length} properties`;\n  } else if (schema.type === 'array') {\n    // TypeScript knows this is OasArray\n    return `Array of ${schema.items.type} items`;\n  } else if (schema.type === 'string') {\n    // TypeScript knows this is OasString\n    return `String${schema.format ? ` (${schema.format})` : ''}`;\n  }\n  // Handle other types...\n  return `${schema.type} type`;\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Schema validation and constraints\n```typescript\nfunction validateSchemaConstraints(schema: OasSchema, value: unknown): boolean {\n  switch (schema.type) {\n    case 'string':\n      if (typeof value !== 'string') return false;\n      if (schema.minLength && value.length < schema.minLength) return false;\n      if (schema.maxLength && value.length > schema.maxLength) return false;\n      if (schema.pattern && !new RegExp(schema.pattern).test(value)) return false;\n      return true;\n\n    case 'integer':\n    case 'number':\n      if (typeof value !== 'number') return false;\n      if (schema.minimum && value < schema.minimum) return false;\n      if (schema.maximum && value > schema.maximum) return false;\n      return true;\n\n    case 'array':\n      if (!Array.isArray(value)) return false;\n      if (schema.minItems && value.length < schema.minItems) return false;\n      if (schema.maxItems && value.length > schema.maxItems) return false;\n      return true;\n\n    default:\n      return true;\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Code generation based on schema type\n```typescript\nclass TypeScriptGenerator {\n  generateType(schema: OasSchema): string {\n    switch (schema.type) {\n      case 'object':\n        return this.generateInterface(schema);\n      case 'array':\n        return `Array<${this.generateType(schema.items)}>`;\n      case 'string':\n        if (schema.enums) {\n          return schema.enums.map(e => `'${e}'`).join(' | ');\n        }\n        return 'string';\n      case 'integer':\n      case 'number':\n        return 'number';\n      case 'boolean':\n        return 'boolean';\n      case 'union':\n        return schema.variants.map(v => this.generateType(v)).join(' | ');\n      default:\n        return 'unknown';\n    }\n  }\n}\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OasArray",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasArray"
              }
            },
            {
              "repr": "OasBoolean",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasBoolean"
              }
            },
            {
              "repr": "OasInteger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasInteger"
              }
            },
            {
              "repr": "OasNumber",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasNumber"
              }
            },
            {
              "repr": "OasObject",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasObject"
              }
            },
            {
              "repr": "OasString",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasString"
              }
            },
            {
              "repr": "OasUnknown",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasUnknown"
              }
            },
            {
              "repr": "OasUnion",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasUnion"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ToJsonSchemaOptions",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/Schema.ts",
        "line": 136,
        "col": 0,
        "byteIndex": 4954
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration options for JSON Schema conversion operations.\n\nThese options control how OAS schemas are converted back to JSON Schema format,\nparticularly around reference resolution and schema inlining behavior.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst options: ToJsonSchemaOptions = {\n  resolve: true  // Resolve $ref references during conversion\n};\n\nconst jsonSchema = schema.toJsonSchema(options);\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "resolve",
                "jsDoc": {
                  "doc": "Whether to resolve $ref references during conversion (default: false)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/Schema.ts",
                  "line": 138,
                  "col": 2,
                  "byteIndex": 5071
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasSchemaData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/schema-types.ts",
        "line": 11,
        "col": 0,
        "byteIndex": 658
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OasArrayData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasArrayData"
              }
            },
            {
              "repr": "OasBooleanData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasBooleanData"
              }
            },
            {
              "repr": "OasIntegerData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasIntegerData"
              }
            },
            {
              "repr": "OasNumberData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasNumberData"
              }
            },
            {
              "repr": "OasStringData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasStringData"
              }
            },
            {
              "repr": "OasObjectData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasObjectData"
              }
            },
            {
              "repr": "OasUnionData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasUnionData"
              }
            },
            {
              "repr": "OasUnknownData",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasUnknownData"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "oasSchemaData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/schema-types.ts",
        "line": 21,
        "col": 13,
        "byteIndex": 845
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasSchemaData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasSchemaData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toSchemasV3",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/toSchemasV3.ts",
        "line": 25,
        "col": 13,
        "byteIndex": 1109
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "",
                    "kind": "union",
                    "union": [
                      {
                        "repr": "OasSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasSchema"
                        }
                      },
                      {
                        "repr": "OasRef",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "schema",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "schema"
                              }
                            }
                          ],
                          "typeName": "OasRef"
                        }
                      }
                    ]
                  }
                ],
                "typeName": "Record"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "schemas",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToSchemasV3Args",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToSchemasV3Args"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toOptionalSchemasV3",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/toSchemasV3.ts",
        "line": 62,
        "col": 13,
        "byteIndex": 1992
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "OasSchema",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasSchema"
                            }
                          },
                          {
                            "repr": "OasRef",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "schema",
                                  "kind": "literal",
                                  "literal": {
                                    "kind": "string",
                                    "string": "schema"
                                  }
                                }
                              ],
                              "typeName": "OasRef"
                            }
                          }
                        ]
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "schemas",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToOptionalSchemasV3Args",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToOptionalSchemasV3Args"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toSchemaV3",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/toSchemasV3.ts",
        "line": 78,
        "col": 13,
        "byteIndex": 2344
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                }
              ]
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "schema",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToSchemaV3Args",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToSchemaV3Args"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toOptionalSchemaV3",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/schema/toSchemasV3.ts",
        "line": 287,
        "col": 13,
        "byteIndex": 8263
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasSchema"
                  }
                },
                {
                  "repr": "OasRef",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "schema",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "schema"
                        }
                      }
                    ],
                    "typeName": "OasRef"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "schema",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToOptionalSchemaV3Args",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToOptionalSchemaV3Args"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "SecurityFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securityRequirement/SecurityRequirement.ts",
        "line": 2,
        "col": 0,
        "byteIndex": 47
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "requirement",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securityRequirement/SecurityRequirement.ts",
                  "line": 3,
                  "col": 2,
                  "byteIndex": 80
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasSecurityRequirement",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securityRequirement/SecurityRequirement.ts",
        "line": 6,
        "col": 0,
        "byteIndex": 121
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "SecurityFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SecurityFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securityRequirement/SecurityRequirement.ts",
              "line": 10,
              "col": 2,
              "byteIndex": 259
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "securityRequirement",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "securityRequirement"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securityRequirement/SecurityRequirement.ts",
              "line": 7,
              "col": 2,
              "byteIndex": 161
            }
          },
          {
            "tsType": {
              "repr": "Record",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "",
                    "kind": "array",
                    "array": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  }
                ],
                "typeName": "Record"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "requirement",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securityRequirement/SecurityRequirement.ts",
              "line": 8,
              "col": 2,
              "byteIndex": 218
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OpenAPIV3.SecurityRequirementObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.SecurityRequirementObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securityRequirement/SecurityRequirement.ts",
              "line": 14,
              "col": 2,
              "byteIndex": 346
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "SecuritySchemeFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 4,
        "col": 0,
        "byteIndex": 92
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "HttpSecuritySchemeFields",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "HttpSecuritySchemeFields"
              }
            },
            {
              "repr": "ApiKeySecuritySchemeFields",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ApiKeySecuritySchemeFields"
              }
            },
            {
              "repr": "OAuth2SecuritySchemeFields",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OAuth2SecuritySchemeFields"
              }
            },
            {
              "repr": "OpenIdSecuritySchemeFields",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OpenIdSecuritySchemeFields"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "HttpSecuritySchemeFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 250
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 11,
                  "col": 2,
                  "byteIndex": 293
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "scheme",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 316
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "bearerFormat",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 333
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ApiKeySecuritySchemeFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 16,
        "col": 0,
        "byteIndex": 358
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 17,
                  "col": 2,
                  "byteIndex": 403
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 426
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "in",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 19,
                  "col": 2,
                  "byteIndex": 441
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "header",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "header"
                      }
                    },
                    {
                      "repr": "query",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "query"
                      }
                    },
                    {
                      "repr": "cookie",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "cookie"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OAuth2SecuritySchemeFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 22,
        "col": 0,
        "byteIndex": 478
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 523
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "flows",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 546
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "authorizationCode",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                          "line": 25,
                          "col": 4,
                          "byteIndex": 559
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "authorizationUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 26,
                                  "col": 6,
                                  "byteIndex": 587
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "tokenUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 27,
                                  "col": 6,
                                  "byteIndex": 618
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "refreshUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 28,
                                  "col": 6,
                                  "byteIndex": 641
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "union",
                                  "union": [
                                    {
                                      "repr": "string",
                                      "kind": "keyword",
                                      "keyword": "string"
                                    },
                                    {
                                      "repr": "undefined",
                                      "kind": "keyword",
                                      "keyword": "undefined"
                                    }
                                  ]
                                },
                                "typeParams": []
                              },
                              {
                                "name": "scopes",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 29,
                                  "col": 6,
                                  "byteIndex": 679
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "Record",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      },
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    ],
                                    "typeName": "Record"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "clientCredentials",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                          "line": 31,
                          "col": 4,
                          "byteIndex": 720
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "tokenUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 32,
                                  "col": 6,
                                  "byteIndex": 748
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "refreshUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 33,
                                  "col": 6,
                                  "byteIndex": 771
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "union",
                                  "union": [
                                    {
                                      "repr": "string",
                                      "kind": "keyword",
                                      "keyword": "string"
                                    },
                                    {
                                      "repr": "undefined",
                                      "kind": "keyword",
                                      "keyword": "undefined"
                                    }
                                  ]
                                },
                                "typeParams": []
                              },
                              {
                                "name": "scopes",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 34,
                                  "col": 6,
                                  "byteIndex": 809
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "Record",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      },
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    ],
                                    "typeName": "Record"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "implicit",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                          "line": 36,
                          "col": 4,
                          "byteIndex": 850
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "authorizationUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 37,
                                  "col": 6,
                                  "byteIndex": 869
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "refreshUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 38,
                                  "col": 6,
                                  "byteIndex": 900
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "union",
                                  "union": [
                                    {
                                      "repr": "string",
                                      "kind": "keyword",
                                      "keyword": "string"
                                    },
                                    {
                                      "repr": "undefined",
                                      "kind": "keyword",
                                      "keyword": "undefined"
                                    }
                                  ]
                                },
                                "typeParams": []
                              },
                              {
                                "name": "scopes",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 39,
                                  "col": 6,
                                  "byteIndex": 938
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "Record",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      },
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    ],
                                    "typeName": "Record"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "password",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                          "line": 41,
                          "col": 4,
                          "byteIndex": 979
                        },
                        "params": [],
                        "computed": false,
                        "optional": true,
                        "tsType": {
                          "repr": "",
                          "kind": "typeLiteral",
                          "typeLiteral": {
                            "constructors": [],
                            "methods": [],
                            "properties": [
                              {
                                "name": "tokenUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 42,
                                  "col": 6,
                                  "byteIndex": 998
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                "typeParams": []
                              },
                              {
                                "name": "refreshUrl",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 43,
                                  "col": 6,
                                  "byteIndex": 1021
                                },
                                "params": [],
                                "computed": false,
                                "optional": true,
                                "tsType": {
                                  "repr": "",
                                  "kind": "union",
                                  "union": [
                                    {
                                      "repr": "string",
                                      "kind": "keyword",
                                      "keyword": "string"
                                    },
                                    {
                                      "repr": "undefined",
                                      "kind": "keyword",
                                      "keyword": "undefined"
                                    }
                                  ]
                                },
                                "typeParams": []
                              },
                              {
                                "name": "scopes",
                                "location": {
                                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                                  "line": 44,
                                  "col": 6,
                                  "byteIndex": 1059
                                },
                                "params": [],
                                "computed": false,
                                "optional": false,
                                "tsType": {
                                  "repr": "Record",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      },
                                      {
                                        "repr": "string",
                                        "kind": "keyword",
                                        "keyword": "string"
                                      }
                                    ],
                                    "typeName": "Record"
                                  }
                                },
                                "typeParams": []
                              }
                            ],
                            "callSignatures": [],
                            "indexSignatures": []
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OpenIdSecuritySchemeFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 49,
        "col": 0,
        "byteIndex": 1103
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 50,
                  "col": 2,
                  "byteIndex": 1148
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "openIdConnectUrl",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                  "line": 51,
                  "col": 2,
                  "byteIndex": 1171
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasHttpSecurityScheme",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 54,
        "col": 0,
        "byteIndex": 1199
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "HttpSecuritySchemeFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "HttpSecuritySchemeFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 61,
              "col": 2,
              "byteIndex": 1396
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "securityScheme",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "securityScheme"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 55,
              "col": 2,
              "byteIndex": 1238
            }
          },
          {
            "tsType": {
              "repr": "http",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "http"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 56,
              "col": 2,
              "byteIndex": 1285
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 57,
              "col": 2,
              "byteIndex": 1309
            }
          },
          {
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "scheme",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 58,
              "col": 2,
              "byteIndex": 1343
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "bearerFormat",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 59,
              "col": 2,
              "byteIndex": 1360
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"securityScheme\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "securityScheme",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "securityScheme"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 67,
              "col": 2,
              "byteIndex": 1569
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasHttpSecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasHttpSecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 71,
              "col": 2,
              "byteIndex": 1637
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasHttpSecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasHttpSecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 75,
              "col": 2,
              "byteIndex": 1695
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OpenAPIV3.HttpSecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.HttpSecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 79,
              "col": 2,
              "byteIndex": 1757
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasApiKeySecurityScheme",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 89,
        "col": 0,
        "byteIndex": 1952
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "ApiKeySecuritySchemeFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ApiKeySecuritySchemeFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 96,
              "col": 2,
              "byteIndex": 2160
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "securityScheme",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "securityScheme"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 90,
              "col": 2,
              "byteIndex": 1993
            }
          },
          {
            "tsType": {
              "repr": "apiKey",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "apiKey"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 91,
              "col": 2,
              "byteIndex": 2040
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 92,
              "col": 2,
              "byteIndex": 2068
            }
          },
          {
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "name",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 93,
              "col": 2,
              "byteIndex": 2102
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "query",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "query"
                  }
                },
                {
                  "repr": "header",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "header"
                  }
                },
                {
                  "repr": "cookie",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "cookie"
                  }
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "location",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 94,
              "col": 2,
              "byteIndex": 2117
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"securityScheme\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "securityScheme",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "securityScheme"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 102,
              "col": 2,
              "byteIndex": 2317
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasApiKeySecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasApiKeySecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 106,
              "col": 2,
              "byteIndex": 2385
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasApiKeySecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasApiKeySecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 110,
              "col": 2,
              "byteIndex": 2445
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OpenAPIV3.ApiKeySecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.ApiKeySecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 114,
              "col": 2,
              "byteIndex": 2509
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasOAuth2SecurityScheme",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 123,
        "col": 0,
        "byteIndex": 2653
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "OAuth2SecuritySchemeFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OAuth2SecuritySchemeFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 151,
              "col": 2,
              "byteIndex": 3360
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "securityScheme",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "securityScheme"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 124,
              "col": 2,
              "byteIndex": 2694
            }
          },
          {
            "tsType": {
              "repr": "oauth2",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "oauth2"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 125,
              "col": 2,
              "byteIndex": 2741
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 126,
              "col": 2,
              "byteIndex": 2769
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "authorizationCode",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                      "line": 128,
                      "col": 4,
                      "byteIndex": 2816
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "constructors": [],
                        "methods": [],
                        "properties": [
                          {
                            "name": "authorizationUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 129,
                              "col": 6,
                              "byteIndex": 2844
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            "typeParams": []
                          },
                          {
                            "name": "tokenUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 130,
                              "col": 6,
                              "byteIndex": 2875
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            "typeParams": []
                          },
                          {
                            "name": "refreshUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 131,
                              "col": 6,
                              "byteIndex": 2898
                            },
                            "params": [],
                            "computed": false,
                            "optional": true,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "undefined",
                                  "kind": "keyword",
                                  "keyword": "undefined"
                                }
                              ]
                            },
                            "typeParams": []
                          },
                          {
                            "name": "scopes",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 132,
                              "col": 6,
                              "byteIndex": 2936
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "Record",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  },
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  }
                                ],
                                "typeName": "Record"
                              }
                            },
                            "typeParams": []
                          }
                        ],
                        "callSignatures": [],
                        "indexSignatures": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "clientCredentials",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                      "line": 134,
                      "col": 4,
                      "byteIndex": 2977
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "constructors": [],
                        "methods": [],
                        "properties": [
                          {
                            "name": "tokenUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 135,
                              "col": 6,
                              "byteIndex": 3005
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            "typeParams": []
                          },
                          {
                            "name": "refreshUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 136,
                              "col": 6,
                              "byteIndex": 3028
                            },
                            "params": [],
                            "computed": false,
                            "optional": true,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "undefined",
                                  "kind": "keyword",
                                  "keyword": "undefined"
                                }
                              ]
                            },
                            "typeParams": []
                          },
                          {
                            "name": "scopes",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 137,
                              "col": 6,
                              "byteIndex": 3066
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "Record",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  },
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  }
                                ],
                                "typeName": "Record"
                              }
                            },
                            "typeParams": []
                          }
                        ],
                        "callSignatures": [],
                        "indexSignatures": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "implicit",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                      "line": 139,
                      "col": 4,
                      "byteIndex": 3107
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "constructors": [],
                        "methods": [],
                        "properties": [
                          {
                            "name": "authorizationUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 140,
                              "col": 6,
                              "byteIndex": 3126
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            "typeParams": []
                          },
                          {
                            "name": "refreshUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 141,
                              "col": 6,
                              "byteIndex": 3157
                            },
                            "params": [],
                            "computed": false,
                            "optional": true,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "undefined",
                                  "kind": "keyword",
                                  "keyword": "undefined"
                                }
                              ]
                            },
                            "typeParams": []
                          },
                          {
                            "name": "scopes",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 142,
                              "col": 6,
                              "byteIndex": 3195
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "Record",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  },
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  }
                                ],
                                "typeName": "Record"
                              }
                            },
                            "typeParams": []
                          }
                        ],
                        "callSignatures": [],
                        "indexSignatures": []
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "password",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                      "line": 144,
                      "col": 4,
                      "byteIndex": 3236
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "",
                      "kind": "typeLiteral",
                      "typeLiteral": {
                        "constructors": [],
                        "methods": [],
                        "properties": [
                          {
                            "name": "tokenUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 145,
                              "col": 6,
                              "byteIndex": 3255
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            "typeParams": []
                          },
                          {
                            "name": "refreshUrl",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 146,
                              "col": 6,
                              "byteIndex": 3278
                            },
                            "params": [],
                            "computed": false,
                            "optional": true,
                            "tsType": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "undefined",
                                  "kind": "keyword",
                                  "keyword": "undefined"
                                }
                              ]
                            },
                            "typeParams": []
                          },
                          {
                            "name": "scopes",
                            "location": {
                              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
                              "line": 147,
                              "col": 6,
                              "byteIndex": 3316
                            },
                            "params": [],
                            "computed": false,
                            "optional": false,
                            "tsType": {
                              "repr": "Record",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": [
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  },
                                  {
                                    "repr": "string",
                                    "kind": "keyword",
                                    "keyword": "string"
                                  }
                                ],
                                "typeName": "Record"
                              }
                            },
                            "typeParams": []
                          }
                        ],
                        "callSignatures": [],
                        "indexSignatures": []
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "flows",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 127,
              "col": 2,
              "byteIndex": 2803
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"securityScheme\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "securityScheme",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "securityScheme"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 156,
              "col": 2,
              "byteIndex": 3489
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasOAuth2SecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasOAuth2SecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 160,
              "col": 2,
              "byteIndex": 3557
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasOAuth2SecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasOAuth2SecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 164,
              "col": 2,
              "byteIndex": 3617
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OpenAPIV3.OAuth2SecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.OAuth2SecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 168,
              "col": 2,
              "byteIndex": 3681
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasOpenIdSecurityScheme",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 182,
        "col": 0,
        "byteIndex": 4029
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "OpenIdSecuritySchemeFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OpenIdSecuritySchemeFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 188,
              "col": 2,
              "byteIndex": 4221
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "securityScheme",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "securityScheme"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 183,
              "col": 2,
              "byteIndex": 4070
            }
          },
          {
            "tsType": {
              "repr": "openIdConnect",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "openIdConnect"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 184,
              "col": 2,
              "byteIndex": 4117
            }
          },
          {
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 185,
              "col": 2,
              "byteIndex": 4159
            }
          },
          {
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "openIdConnectUrl",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 186,
              "col": 2,
              "byteIndex": 4193
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"securityScheme\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "securityScheme",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "securityScheme"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 193,
              "col": 2,
              "byteIndex": 4372
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasOpenIdSecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasOpenIdSecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 197,
              "col": 2,
              "byteIndex": 4440
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasOpenIdSecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasOpenIdSecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 201,
              "col": 2,
              "byteIndex": 4500
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OpenAPIV3.OpenIdSecurityScheme",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.OpenIdSecurityScheme"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
              "line": 205,
              "col": 2,
              "byteIndex": 4564
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasSecurityScheme",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/securitySchemes/SecurityScheme.ts",
        "line": 214,
        "col": 0,
        "byteIndex": 4751
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OasHttpSecurityScheme",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasHttpSecurityScheme"
              }
            },
            {
              "repr": "OasApiKeySecurityScheme",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasApiKeySecurityScheme"
              }
            },
            {
              "repr": "OasOAuth2SecurityScheme",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasOAuth2SecurityScheme"
              }
            },
            {
              "repr": "OasOpenIdSecurityScheme",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasOpenIdSecurityScheme"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ServerFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
        "line": 11,
        "col": 0,
        "byteIndex": 388
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasServer}.\n\nDefines the configuration options available when creating server instances,\nincluding URL, description, variables, and extension fields."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 419
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "url",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
                  "line": 13,
                  "col": 2,
                  "byteIndex": 454
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "variables",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 468
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "OasServerVariable",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "OasServerVariable"
                            }
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
                  "line": 15,
                  "col": 2,
                  "byteIndex": 528
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasServer",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
        "line": 53,
        "col": 0,
        "byteIndex": 1637
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a Server Object in the OpenAPI Specification.\n\nThe `OasServer` class encapsulates server connectivity information, including\nthe server URL, optional description, and variable definitions for URL templating.\nServers are used to specify different environments (development, staging, production)\nor different API versions that clients can connect to.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic server\n```typescript\nconst server = new OasServer({\n  url: 'https://api.example.com/v1',\n  description: 'Production API server'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Server with variables\n```typescript\nconst server = new OasServer({\n  url: 'https://{environment}.example.com/{version}',\n  description: 'Configurable API server',\n  variables: {\n    environment: new OasServerVariable({\n      enum: ['api', 'staging', 'dev'],\n      default: 'api',\n      description: 'API environment'\n    }),\n    version: new OasServerVariable({\n      default: 'v1',\n      description: 'API version'\n    })\n  }\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasServer instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- Server configuration including URL, description, and variables"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "ServerFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ServerFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 69,
              "col": 2,
              "byteIndex": 2246
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for this OAS server"
            },
            "tsType": {
              "repr": "server",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "server"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 55,
              "col": 2,
              "byteIndex": 1709
            }
          },
          {
            "jsDoc": {
              "doc": "Human-readable description of the server"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 57,
              "col": 2,
              "byteIndex": 1790
            }
          },
          {
            "jsDoc": {
              "doc": "Server URL with optional variable templating"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "url",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 59,
              "col": 2,
              "byteIndex": 1878
            }
          },
          {
            "jsDoc": {
              "doc": "Variable definitions for URL templating"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "OasServerVariable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "OasServerVariable"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "variables",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 61,
              "col": 2,
              "byteIndex": 1941
            }
          },
          {
            "jsDoc": {
              "doc": "Custom extension fields (x-* properties)"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 63,
              "col": 2,
              "byteIndex": 2050
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Determines if this server is a reference object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Always false since servers are not reference objects in OpenAPI"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 81,
              "col": 2,
              "byteIndex": 2595
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this server object.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The server instance itself since it's already a concrete object"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasServer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasServer"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 90,
              "col": 2,
              "byteIndex": 2768
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this server object one level.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The server instance itself since it's already a concrete object"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasServer",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasServer"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 99,
              "col": 2,
              "byteIndex": 2954
            }
          },
          {
            "jsDoc": {
              "doc": "Converts this OAS server to an OpenAPI v3 JSON schema representation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "_options",
                  "doc": "- Conversion options (currently unused for server objects)"
                },
                {
                  "kind": "return",
                  "doc": "OpenAPI v3 server object with URL, description, and variables"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "_options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.ServerObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.ServerObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/server/Server.ts",
              "line": 109,
              "col": 2,
              "byteIndex": 3253
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "ServerVariableFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 327
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Fields for configuring an OpenAPI server variable object.\n\nRepresents the configuration data needed to create a server variable,\nincluding default values, enumeration constraints, and extensions."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Human-readable description of the server variable"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 425
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value for the server variable"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 507
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of allowed values for the server variable"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 582
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "OpenAPI specification extensions"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 655
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasServerVariable",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
        "line": 40,
        "col": 0,
        "byteIndex": 1260
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents an OpenAPI server variable object.\n\nServer variables provide parameterization for server URLs,\nallowing dynamic server configuration with default values\nand enumeration constraints.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic server variable\n```typescript\nconst serverVar = new OasServerVariable({\n  default: 'api',\n  description: 'API version subdomain',\n  enums: ['api', 'api-staging', 'api-dev']\n});\n\nconsole.log(serverVar.default); // 'api'\nconsole.log(serverVar.enums);   // ['api', 'api-staging', 'api-dev']\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "ServerVariableFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ServerVariableFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 51,
              "col": 2,
              "byteIndex": 1742
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for OAS server variable objects"
            },
            "tsType": {
              "repr": "serverVariable",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "serverVariable"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 42,
              "col": 2,
              "byteIndex": 1352
            }
          },
          {
            "jsDoc": {
              "doc": "Human-readable description of the server variable"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 44,
              "col": 2,
              "byteIndex": 1458
            }
          },
          {
            "jsDoc": {
              "doc": "Default value for the server variable"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "default",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 46,
              "col": 2,
              "byteIndex": 1539
            }
          },
          {
            "jsDoc": {
              "doc": "Array of allowed values for the server variable"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "enums",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 48,
              "col": 2,
              "byteIndex": 1614
            }
          },
          {
            "jsDoc": {
              "doc": "OpenAPI specification extensions"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 50,
              "col": 2,
              "byteIndex": 1687
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 58,
              "col": 2,
              "byteIndex": 1949
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasServerVariable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasServerVariable"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 62,
              "col": 2,
              "byteIndex": 1992
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasServerVariable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasServerVariable"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 66,
              "col": 2,
              "byteIndex": 2046
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "_options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.ServerVariableObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.ServerVariableObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/serverVariable/ServerVariable.ts",
              "line": 70,
              "col": 2,
              "byteIndex": 2104
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "StringFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 273
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasString}.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the string value can be null"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the string schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 388
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the string schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 449
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "format",
                "jsDoc": {
                  "doc": "String format (e.g., 'email', 'date-time', 'uri')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 531
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value for the string"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 587
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "pattern",
                "jsDoc": {
                  "doc": "Regular expression pattern for validation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 721
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of allowed enum values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 778
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "",
                            "kind": "parenthesized",
                            "parenthesized": {
                              "repr": "",
                              "kind": "union",
                              "union": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "null",
                                  "kind": "keyword",
                                  "keyword": "null"
                                }
                              ]
                            }
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "maxLength",
                "jsDoc": {
                  "doc": "Maximum length constraint"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 900
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minLength",
                "jsDoc": {
                  "doc": "Minimum length constraint"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 956
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the string value can be null"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1023
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 1095
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example value for the string"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1177
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "conditional",
                  "conditionalType": {
                    "checkType": {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    },
                    "extendsType": {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "boolean",
                        "boolean": true
                      }
                    },
                    "trueType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "null",
                          "kind": "keyword",
                          "keyword": "null"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    },
                    "falseType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ]
      }
    },
    {
      "name": "OasString",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
        "line": 109,
        "col": 0,
        "byteIndex": 3488
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a string schema in the OpenAPI Specification.\n\n`OasString` handles string type definitions with comprehensive validation\nconstraints including format validation, length limits, pattern matching,\nand enum restrictions. It supports nullable types and provides JSON Schema\nconversion for validation purposes.\n\nThis class is used throughout the OAS processing pipeline to represent\nstring fields in API schemas, parameters, and request/response bodies.\n\n## Key Features\n\n- **Format Validation**: Support for standard formats (email, date-time, uri, etc.)\n- **Length Constraints**: Minimum and maximum length validation\n- **Pattern Matching**: Regular expression validation\n- **Enum Values**: Restricted sets of allowed values\n- **Nullable Support**: Type-safe nullable string handling\n- **JSON Schema**: Conversion to standard JSON Schema format\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Whether the string value can be null\n"
          },
          {
            "kind": "example",
            "doc": "Basic string schema\n```typescript\nimport { OasString } from '@skmtc/core';\n\nconst basicString = new OasString({\n  title: 'User Name',\n  description: 'The full name of the user',\n  minLength: 1,\n  maxLength: 100\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Email format validation\n```typescript\nconst emailString = new OasString({\n  title: 'Email Address',\n  description: 'Valid email address',\n  format: 'email',\n  example: 'user@example.com'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Enum with allowed values\n```typescript\nconst statusString = new OasString({\n  title: 'Status',\n  description: 'Current status of the item',\n  enums: ['pending', 'approved', 'rejected'],\n  default: 'pending'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Pattern validation\n```typescript\nconst phoneString = new OasString({\n  title: 'Phone Number',\n  description: 'US phone number format',\n  pattern: '^\\\\+?1?[2-9]\\\\d{2}[2-9]\\\\d{2}\\\\d{4}$',\n  example: '+15551234567'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable string\n```typescript\nconst nullableString = new OasString<true>({\n  title: 'Optional Note',\n  description: 'Optional note that can be null',\n  nullable: true,\n  default: null\n});\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new OasString instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "fields",
                  "doc": "- String schema configuration fields\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userIdString = new OasString({\n  title: 'User ID',\n  description: 'Unique identifier for user',\n  format: 'uuid',\n  example: '123e4567-e89b-12d3-a456-426614174000'\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "StringFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Nullable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Nullable"
                          }
                        }
                      ],
                      "typeName": "StringFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 175,
              "col": 2,
              "byteIndex": 5242
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 114,
              "col": 2,
              "byteIndex": 3688
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'string' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "string",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "string"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 118,
              "col": 2,
              "byteIndex": 3804
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 122,
              "col": 2,
              "byteIndex": 3879
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 126,
              "col": 2,
              "byteIndex": 3953
            }
          },
          {
            "jsDoc": {
              "doc": "The format of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "format",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 130,
              "col": 2,
              "byteIndex": 4030
            }
          },
          {
            "jsDoc": {
              "doc": "An array of allowed values for the string."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "enums",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 134,
              "col": 2,
              "byteIndex": 4119
            }
          },
          {
            "jsDoc": {
              "doc": "The maximum length of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "maxLength",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 138,
              "col": 2,
              "byteIndex": 4256
            }
          },
          {
            "jsDoc": {
              "doc": "The minimum length of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "minLength",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 142,
              "col": 2,
              "byteIndex": 4339
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether value can be null."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "nullable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 146,
              "col": 2,
              "byteIndex": 4425
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 148,
              "col": 2,
              "byteIndex": 4498
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 150,
              "col": 2,
              "byteIndex": 4588
            }
          },
          {
            "jsDoc": {
              "doc": "The pattern of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "pattern",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 154,
              "col": 2,
              "byteIndex": 4714
            }
          },
          {
            "jsDoc": {
              "doc": "The default value of the string."
            },
            "tsType": {
              "repr": "",
              "kind": "conditional",
              "conditionalType": {
                "checkType": {
                  "repr": "Nullable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Nullable"
                  }
                },
                "extendsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "trueType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "falseType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "default",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 158,
              "col": 2,
              "byteIndex": 4794
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 189,
              "col": 2,
              "byteIndex": 5698
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasString",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasString"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 193,
              "col": 2,
              "byteIndex": 5758
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasString",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Nullable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Nullable"
                      }
                    }
                  ],
                  "typeName": "OasString"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 197,
              "col": 2,
              "byteIndex": 5814
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": true,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.NonArraySchemaObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.NonArraySchemaObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/String.ts",
              "line": 202,
              "col": 2,
              "byteIndex": 5911
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "Nullable",
            "constraint": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "default": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "StringFormat",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
        "line": 41,
        "col": 0,
        "byteIndex": 1322
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type for OpenAPI string format specifiers.\n\nRepresents the standard string formats defined in the OpenAPI v3 specification,\nproviding semantic meaning for string validation and processing. These formats\nare used by generators to produce appropriate validation rules, UI components,\nand type annotations in target languages.\n\n## Format Categories\n\n**Date/Time Formats:**\n- `date-time`: Full RFC3339 date-time (e.g., \"2018-03-20T09:12:28Z\")\n- `time`: RFC3339 time only (e.g., \"09:12:28\")\n- `date`: RFC3339 full-date (e.g., \"2018-03-20\")\n- `duration`: RFC3339 duration (e.g., \"P3Y6M4DT12H30M5S\")\n\n**Network Formats:**\n- `email`: RFC5322 email address\n- `hostname`: RFC1123 hostname\n- `ipv4`: IPv4 address\n- `ipv6`: IPv6 address\n- `uri`: RFC3986 URI\n- `uuid`: RFC4122 UUID\n\n**Encoding/Pattern Formats:**\n- `regex`: Regular expression pattern\n- `password`: Password field hint for UI components\n- `byte`: Base64 encoded data\n- `binary`: Binary data\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Using string formats in schema definitions\n```typescript\nimport type { StringFormat } from '@skmtc/core/oas/string';\n\nconst emailFormat: StringFormat = 'email';\nconst timestampFormat: StringFormat = 'date-time';\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "date-time",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "date-time"
              }
            },
            {
              "repr": "time",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "time"
              }
            },
            {
              "repr": "date",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "date"
              }
            },
            {
              "repr": "duration",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "duration"
              }
            },
            {
              "repr": "email",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "email"
              }
            },
            {
              "repr": "hostname",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "hostname"
              }
            },
            {
              "repr": "ipv4",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "ipv4"
              }
            },
            {
              "repr": "ipv6",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "ipv6"
              }
            },
            {
              "repr": "uuid",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "uuid"
              }
            },
            {
              "repr": "uri",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "uri"
              }
            },
            {
              "repr": "regex",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "regex"
              }
            },
            {
              "repr": "password",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "password"
              }
            },
            {
              "repr": "byte",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "byte"
              }
            },
            {
              "repr": "binary",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "binary"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "stringFormat",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
        "line": 89,
        "col": 13,
        "byteIndex": 2887
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot enum schema for valid OpenAPI string format values.\n\nThis schema validates that string format values conform to the OpenAPI v3\nspecification's standard format identifiers. It includes date/time formats,\nnetwork address formats, and encoding formats that provide semantic meaning\nfor string validation and UI generation.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating string formats\n```typescript\nimport { stringFormat } from '@skmtc/core/oas/string';\nimport * as v from 'valibot';\n\nconst validFormat = v.parse(stringFormat, 'email'); // 'email'\nconst invalidFormat = v.parse(stringFormat, 'invalid'); // Throws ValiError\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using in schema validation\n```typescript\nconst schema = {\n  type: 'string',\n  format: 'email',\n  description: 'User email address'\n};\n\n// Validate the format field\nif (schema.format) {\n  const validatedFormat = v.parse(stringFormat, schema.format);\n  console.log(`Valid format: ${validatedFormat}`);\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "StringFormat",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "StringFormat"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "oasStringData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
        "line": 158,
        "col": 13,
        "byteIndex": 4734
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI string data objects.\n\nThis comprehensive schema validates OpenAPI string schemas according to the\nOpenAPI v3 specification, including all standard properties like length\nconstraints, pattern validation, format specifiers, enumeration values,\nand metadata fields. Used throughout the SKMTC pipeline for runtime\nvalidation of string schema definitions.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating a basic string schema\n```typescript\nimport { oasStringData } from '@skmtc/core/oas/string';\nimport * as v from 'valibot';\n\nconst schema = {\n  type: 'string',\n  description: 'User name',\n  minLength: 1,\n  maxLength: 100,\n  pattern: '^[a-zA-Z\\\\s]+$'\n};\n\nconst validated = v.parse(oasStringData, schema);\nconsole.log(validated.minLength); // 1\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating formatted strings\n```typescript\nconst emailSchema = {\n  type: 'string',\n  format: 'email',\n  title: 'Email Address',\n  example: 'user@example.com'\n};\n\nconst result = v.parse(oasStringData, emailSchema);\nconsole.log(result.format); // 'email'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating enumerated strings\n```typescript\nconst statusSchema = {\n  type: 'string',\n  enum: ['pending', 'approved', 'rejected'],\n  default: 'pending',\n  description: 'Application status'\n};\n\nconst validated = v.parse(oasStringData, statusSchema);\nconsole.log(validated.enum); // ['pending', 'approved', 'rejected']\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasStringData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasStringData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasStringData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
        "line": 250,
        "col": 0,
        "byteIndex": 7431
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI string schema objects.\n\nRepresents the complete structure of OpenAPI string schemas as processed by the\nSKMTC pipeline. This type includes all standard OpenAPI string schema properties\nincluding validation constraints (length, pattern), format specifiers, enumeration\nvalues, and metadata fields. It's used throughout the string processing pipeline\nfor type-safe handling of string schema definitions.\n\n## Usage in SKMTC Pipeline\n\nThis type is used by:\n- Schema parsers to validate incoming string schema data\n- String processors to transform OpenAPI schemas into OAS objects\n- Code generators to access string constraints and generate validation code\n- UI generators to create appropriate form controls based on formats and constraints\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic string schema\n```typescript\nimport type { OasStringData } from '@skmtc/core/oas/string';\n\nconst nameSchema: OasStringData = {\n  type: 'string',\n  title: 'Full Name',\n  description: 'User full name',\n  minLength: 1,\n  maxLength: 200,\n  example: 'John Doe'\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Email string with format\n```typescript\nconst emailSchema: OasStringData = {\n  type: 'string',\n  format: 'email',\n  title: 'Email Address',\n  description: 'User email for notifications',\n  example: 'john.doe@example.com'\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Enumerated string values\n```typescript\nconst roleSchema: OasStringData = {\n  type: 'string',\n  title: 'User Role',\n  description: 'User access level',\n  enum: ['admin', 'moderator', 'user', 'guest'],\n  default: 'user'\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Pattern-constrained string\n```typescript\nconst phoneSchema: OasStringData = {\n  type: 'string',\n  title: 'Phone Number',\n  description: 'US phone number',\n  pattern: '^\\\\+?1?[2-9]\\\\d{9}$',\n  example: '+1234567890',\n  minLength: 10,\n  maxLength: 15\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable string with constraints\n```typescript\nconst commentSchema: OasStringData = {\n  type: 'string',\n  title: 'Comment',\n  description: 'Optional user comment',\n  maxLength: 500,\n  nullable: true,\n  default: null\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "Human-readable title for the string schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 252,
                  "col": 2,
                  "byteIndex": 7515
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description explaining the string's purpose and usage"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 254,
                  "col": 2,
                  "byteIndex": 7604
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value used when no explicit value is provided"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 256,
                  "col": 2,
                  "byteIndex": 7690
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Type identifier (always 'string')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 258,
                  "col": 2,
                  "byteIndex": 7752
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "maxLength",
                "jsDoc": {
                  "doc": "Maximum allowed length in characters"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 260,
                  "col": 2,
                  "byteIndex": 7815
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "minLength",
                "jsDoc": {
                  "doc": "Minimum required length in characters"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 262,
                  "col": 2,
                  "byteIndex": 7883
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "pattern",
                "jsDoc": {
                  "doc": "Regular expression pattern for validation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 264,
                  "col": 2,
                  "byteIndex": 7955
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "enum",
                "jsDoc": {
                  "doc": "Array of valid enumeration values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 266,
                  "col": 2,
                  "byteIndex": 8017
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "format",
                "jsDoc": {
                  "doc": "Format specifier (email, date-time, uuid, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 268,
                  "col": 2,
                  "byteIndex": 8092
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether null values are allowed in addition to string values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 270,
                  "col": 2,
                  "byteIndex": 8180
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example value for documentation and testing"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/string-types.ts",
                  "line": 272,
                  "col": 2,
                  "byteIndex": 8254
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toString",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/toString.ts",
        "line": 80,
        "col": 13,
        "byteIndex": 2772
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Transforms an OpenAPI v3 string schema object into an internal OAS string representation.\n\nThis function processes OpenAPI string schemas by extracting and parsing nullable values,\nexamples, enumerations, and default values. It handles the complete transformation from\nraw OpenAPI JSON to the SKMTC internal string representation with proper validation\nof string formats and constraints.\n\nThe transformation follows a pipeline approach:\n1. Parse nullable flag and extract base value\n2. Parse example values with nullable support  \n3. Parse enumeration constraints\n4. Parse default values\n5. Create final OasString instance with format validation\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Transformation arguments"
          },
          {
            "kind": "param",
            "name": "args.context",
            "doc": "- Parse context providing utilities and tracing"
          },
          {
            "kind": "param",
            "name": "args.value",
            "doc": "- The OpenAPI v3 string schema object to transform"
          },
          {
            "kind": "return",
            "doc": "Transformed OAS string object with parsed properties\n"
          },
          {
            "kind": "example",
            "doc": "Basic string transformation\n```typescript\nimport { toString } from '@skmtc/core';\n\nconst openApiString = {\n  type: 'string',\n  format: 'email',\n  maxLength: 255,\n  pattern: '^[\\\\w.-]+@[\\\\w.-]+\\\\.[a-zA-Z]{2,}$'\n};\n\nconst oasString = toString({\n  context: parseContext,\n  value: openApiString\n});\n\nconsole.log(oasString.format); // 'email'\nconsole.log(oasString.maxLength); // 255\n```\n"
          },
          {
            "kind": "example",
            "doc": "String with nullable and enums\n```typescript\nconst statusString = {\n  type: 'string',\n  nullable: true,\n  enum: ['active', 'inactive', 'pending', null],\n  default: 'active',\n  example: 'pending'\n};\n\nconst oasString = toString({\n  context: parseContext,\n  value: statusString\n});\n\nconsole.log(oasString.nullable); // true\nconsole.log(oasString.enums); // ['active', 'inactive', 'pending', null]\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasString",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasString"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToStringArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToStringArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toParsedString",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/string/toString.ts",
        "line": 186,
        "col": 13,
        "byteIndex": 6235
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates an OAS string instance from pre-parsed string schema components.\n\nThis function is the final step in the string transformation pipeline, taking\nalready-parsed nullable, example, enum, and default values and combining them\nwith the remaining string properties to create the complete OasString instance.\n\nThe function handles format validation against known OpenAPI string formats,\nlength constraints parsing, pattern validation, and specification extension\nprocessing. It logs warnings for unrecognized formats while still preserving\nthem in the output.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Nullable",
            "doc": "- Boolean type indicating if the string can be null"
          },
          {
            "kind": "param",
            "name": "args",
            "doc": "- Pre-parsed string components"
          },
          {
            "kind": "param",
            "name": "args.context",
            "doc": "- Parse context for tracing and issue logging"
          },
          {
            "kind": "param",
            "name": "args.nullable",
            "doc": "- Parsed nullable flag"
          },
          {
            "kind": "param",
            "name": "args.example",
            "doc": "- Parsed example value (type-safe with nullable)"
          },
          {
            "kind": "param",
            "name": "args.enums",
            "doc": "- Parsed enumeration constraints (type-safe with nullable)"
          },
          {
            "kind": "param",
            "name": "args.defaultValue",
            "doc": "- Parsed default value (type-safe with nullable)"
          },
          {
            "kind": "param",
            "name": "args.value",
            "doc": "- OpenAPI string object without parsed fields"
          },
          {
            "kind": "return",
            "doc": "Complete OAS string instance with all properties and validation\n"
          },
          {
            "kind": "example",
            "doc": "Date-time string with validation\n```typescript\nconst dateTimeString = toParsedString({\n  context: parseContext,\n  nullable: false,\n  example: '2023-12-25T10:00:00Z',\n  enums: undefined,\n  defaultValue: undefined,\n  value: {\n    type: 'string',\n    format: 'date-time',\n    title: 'Event Date',\n    description: 'When the event occurs'\n  }\n});\n\nconsole.log(dateTimeString.format); // 'date-time'\n```\n"
          },
          {
            "kind": "example",
            "doc": "String with custom format (generates warning)\n```typescript\nconst customFormatString = toParsedString({\n  context: parseContext,\n  nullable: false,\n  example: 'ABC123',\n  enums: undefined,\n  defaultValue: undefined,\n  value: {\n    type: 'string',\n    format: 'custom-id', // Unknown format, will log warning\n    pattern: '^[A-Z]{3}[0-9]{3}$'\n  }\n});\n\n// Logs: \"Unexpected format: custom-id\"\nconsole.log(customFormatString.format); // 'custom-id' (still preserved)\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasString",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "Nullable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Nullable"
                    }
                  }
                ],
                "typeName": "OasString"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "nullable",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "example",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "enums",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "defaultValue",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToParsedStringArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Nullable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Nullable"
                        }
                      }
                    ],
                    "typeName": "ToParsedStringArgs"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "Nullable",
                "constraint": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "TagFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
        "line": 1,
        "col": 0,
        "byteIndex": 0
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
                  "line": 2,
                  "col": 2,
                  "byteIndex": 28
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
                  "line": 3,
                  "col": 2,
                  "byteIndex": 43
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
                  "line": 4,
                  "col": 2,
                  "byteIndex": 77
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasTag",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
        "line": 7,
        "col": 0,
        "byteIndex": 122
      },
      "declarationKind": "export",
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "TagFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TagFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
              "line": 11,
              "col": 2,
              "byteIndex": 193
            }
          }
        ],
        "properties": [
          {
            "tsType": {
              "repr": "tag",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "tag"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
              "line": 8,
              "col": 2,
              "byteIndex": 146
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "name",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
              "line": 15,
              "col": 2,
              "byteIndex": 259
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
              "line": 19,
              "col": 2,
              "byteIndex": 316
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "kind": "getter",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "Record",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "string",
                          "kind": "keyword",
                          "keyword": "string"
                        },
                        {
                          "repr": "unknown",
                          "kind": "keyword",
                          "keyword": "unknown"
                        }
                      ],
                      "typeName": "Record"
                    }
                  },
                  {
                    "repr": "undefined",
                    "kind": "keyword",
                    "keyword": "undefined"
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/Tag.ts",
              "line": 24,
              "col": 2,
              "byteIndex": 439
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasTagData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/tag-types.ts",
        "line": 4,
        "col": 0,
        "byteIndex": 87
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/tag-types.ts",
                  "line": 5,
                  "col": 2,
                  "byteIndex": 116
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "tag",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "tag"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/tag-types.ts",
                  "line": 6,
                  "col": 2,
                  "byteIndex": 133
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/tag-types.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 148
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasTagData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/tag/tag-types.ts",
        "line": 10,
        "col": 13,
        "byteIndex": 185
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasTagData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasTagData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "UnionFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
        "line": 10,
        "col": 0,
        "byteIndex": 334
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasUnion}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the union type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 12,
                  "col": 2,
                  "byteIndex": 407
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of the union type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 14,
                  "col": 2,
                  "byteIndex": 465
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the union value can be null"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 16,
                  "col": 2,
                  "byteIndex": 533
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "discriminator",
                "jsDoc": {
                  "doc": "Discriminator object for creating tagged unions"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 611
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "OasDiscriminator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasDiscriminator"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "jsDoc": {
                  "doc": "Example value for the union"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 683
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value for the union"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 740
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "members",
                "jsDoc": {
                  "doc": "Array of schemas that make up the union members"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 817
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        {
                          "repr": "OasRef",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "schema",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "schema"
                                }
                              }
                            ],
                            "typeName": "OasRef"
                          }
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "jsDoc": {
                  "doc": "Custom extension fields (x-* properties)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 911
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasUnion",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
        "line": 141,
        "col": 0,
        "byteIndex": 4511
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a union type schema in the OpenAPI Specification.\n\n`OasUnion` handles both OpenAPI `oneOf` and `anyOf` constructs by mapping them\nto TypeScript union types. While OpenAPI distinguishes between these concepts,\nin TypeScript they both represent union types (A | B | C), making the distinction\nless meaningful for code generation.\n\nThis class supports both simple unions and discriminated (tagged) unions through\nthe discriminator property, which enables more precise type narrowing in generated code.\n\n## Key Features\n\n- **Union Types**: Represents multiple possible schema types as a single union\n- **Tagged Unions**: Supports discriminator properties for type narrowing\n- **Reference Resolution**: Handles references to other schemas within union members\n- **Nullable Support**: Can represent nullable union types (A | B | null)\n- **JSON Schema**: Converts to standard JSON Schema format for validation\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic union type\n```typescript\nimport { OasUnion, OasString, OasInteger } from '@skmtc/core';\n\nconst stringOrNumber = new OasUnion({\n  title: 'StringOrNumber',\n  description: 'A value that can be either a string or number',\n  members: [\n    new OasString({ title: 'String Value' }),\n    new OasInteger({ title: 'Integer Value' })\n  ]\n});\n\n// This represents: string | number\n```\n"
          },
          {
            "kind": "example",
            "doc": "Discriminated union (tagged union)\n```typescript\nconst shape = new OasUnion({\n  title: 'Shape',\n  description: 'Different types of geometric shapes',\n  discriminator: new OasDiscriminator({\n    propertyName: 'type',\n    mapping: {\n      'circle': '#/components/schemas/Circle',\n      'square': '#/components/schemas/Square'\n    }\n  }),\n  members: [\n    new OasRef({ $ref: '#/components/schemas/Circle' }),\n    new OasRef({ $ref: '#/components/schemas/Square' })\n  ]\n});\n\n// This creates a tagged union that can be narrowed by the 'type' property\n```\n"
          },
          {
            "kind": "example",
            "doc": "Nullable union\n```typescript\nconst nullableStatus = new OasUnion({\n  title: 'NullableStatus',\n  nullable: true,\n  members: [\n    new OasString({ enum: ['active', 'inactive'] }),\n    new OasString({ enum: ['pending', 'suspended'] })\n  ],\n  default: null\n});\n\n// This represents: ('active' | 'inactive' | 'pending' | 'suspended') | null\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex nested union\n```typescript\nconst apiResponse = new OasUnion({\n  title: 'ApiResponse',\n  description: 'Response from API endpoint',\n  members: [\n    new OasObject({\n      title: 'SuccessResponse',\n      properties: {\n        success: new OasBoolean({ default: true }),\n        data: new OasObject({ additionalProperties: true })\n      }\n    }),\n    new OasObject({\n      title: 'ErrorResponse',\n      properties: {\n        error: new OasString(),\n        code: new OasInteger()\n      }\n    })\n  ]\n});\n\n// This represents: { success: boolean; data: Record<string, any> } | { error: string; code: number }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using with references\n```typescript\nconst userOrAdmin = new OasUnion({\n  title: 'UserOrAdmin',\n  description: 'Either a regular user or an admin user',\n  members: [\n    new OasRef({ $ref: '#/components/schemas/User' }),\n    new OasRef({ $ref: '#/components/schemas/Admin' })\n  ]\n});\n\n// References will be resolved during processing\n// This represents: User | Admin\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "fields",
                "optional": false,
                "tsType": {
                  "repr": "UnionFields",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "UnionFields"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 183,
              "col": 2,
              "byteIndex": 5544
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 146,
              "col": 2,
              "byteIndex": 4650
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'union' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "union",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "union"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 150,
              "col": 2,
              "byteIndex": 4765
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the union."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 154,
              "col": 2,
              "byteIndex": 4838
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the union."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 158,
              "col": 2,
              "byteIndex": 4911
            }
          },
          {
            "jsDoc": {
              "doc": "Indicates whether value can be null."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "nullable",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 162,
              "col": 2,
              "byteIndex": 4999
            }
          },
          {
            "jsDoc": {
              "doc": "Discriminator object used to tag member types and make the union a tagged union."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "OasDiscriminator",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasDiscriminator"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "discriminator",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 166,
              "col": 2,
              "byteIndex": 5129
            }
          },
          {
            "jsDoc": {
              "doc": "Array of schemas or references to schemas that are part of the union."
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "",
                "kind": "parenthesized",
                "parenthesized": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OasSchema",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OasSchema"
                      }
                    },
                    {
                      "repr": "OasRef",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "schema",
                            "kind": "literal",
                            "literal": {
                              "kind": "string",
                              "string": "schema"
                            }
                          }
                        ],
                        "typeName": "OasRef"
                      }
                    }
                  ]
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "members",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 170,
              "col": 2,
              "byteIndex": 5262
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 173,
              "col": 2,
              "byteIndex": 5347
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the union type."
            },
            "tsType": {
              "repr": "unknown",
              "kind": "keyword",
              "keyword": "unknown"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 177,
              "col": 2,
              "byteIndex": 5449
            }
          },
          {
            "jsDoc": {
              "doc": "The default value of the union type."
            },
            "tsType": {
              "repr": "unknown",
              "kind": "keyword",
              "keyword": "unknown"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "default",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 181,
              "col": 2,
              "byteIndex": 5523
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 194,
              "col": 2,
              "byteIndex": 5892
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasUnion",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasUnion"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 198,
              "col": 2,
              "byteIndex": 5952
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasUnion",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasUnion"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 202,
              "col": 2,
              "byteIndex": 5997
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "options",
                  "optional": false,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "OpenAPIV3.NonArraySchemaObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OpenAPIV3.NonArraySchemaObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/Union.ts",
              "line": 206,
              "col": 2,
              "byteIndex": 6046
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "OasUnionData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
        "line": 16,
        "col": 0,
        "byteIndex": 546
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI union schema objects.\n\nRepresents union types (oneOf/anyOf) that allow values to match\none or more of several possible schemas. Includes support for\ndiscriminator properties for efficient type resolution."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type category identifier for schema objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
                  "line": 18,
                  "col": 2,
                  "byteIndex": 630
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "schema",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "schema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Type identifier (always 'union')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
                  "line": 20,
                  "col": 2,
                  "byteIndex": 692
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "union",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "union"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "jsDoc": {
                  "doc": "Human-readable title for the union"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 752
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description of the union's purpose"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 822
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "members",
                "jsDoc": {
                  "doc": "Array of schemas that comprise the union"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 895
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "OasSchemaData",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchemaData"
                          }
                        },
                        {
                          "repr": "OasSchemaRefData",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchemaRefData"
                          }
                        }
                      ]
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "discriminator",
                "jsDoc": {
                  "doc": "Optional discriminator for efficient type resolution"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 1005
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "OasDiscriminatorData",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OasDiscriminatorData"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "oasUnionData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/union-types.ts",
        "line": 38,
        "col": 13,
        "byteIndex": 1311
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI union data objects.\n\nValidates union schemas including member schema arrays and optional\ndiscriminator properties. Uses lazy evaluation to handle recursive\nschema references in union members."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasUnionData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasUnionData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toUnion",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/union/toUnion.ts",
        "line": 17,
        "col": 13,
        "byteIndex": 672
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasUnion",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasUnion"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "members",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "parentType",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToUnionArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToUnionArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "UnknownFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
        "line": 5,
        "col": 0,
        "byteIndex": 155
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
                  "line": 6,
                  "col": 2,
                  "byteIndex": 187
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
                  "line": 7,
                  "col": 2,
                  "byteIndex": 204
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "extensionFields",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 227
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "example",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
                  "line": 9,
                  "col": 2,
                  "byteIndex": 271
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasUnknown",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
        "line": 19,
        "col": 0,
        "byteIndex": 557
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Object representing an unknown type in the OpenAPI Specification.\n\nJSON schema treats a definition without any type information as 'any'.\nSince this is not useful in an API context, we use OasUnknown to\nrepresent types that are not specified."
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "UnknownFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "UnknownFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 43,
              "col": 2,
              "byteIndex": 1180
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 24,
              "col": 2,
              "byteIndex": 698
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'unknown' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "unknown",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "unknown"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 28,
              "col": 2,
              "byteIndex": 815
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the unknown type."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 32,
              "col": 2,
              "byteIndex": 897
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the unknown type."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 36,
              "col": 2,
              "byteIndex": 977
            }
          },
          {
            "jsDoc": {
              "doc": "Specification Extension fields"
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "unknown",
                        "kind": "keyword",
                        "keyword": "unknown"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "extensionFields",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 39,
              "col": 2,
              "byteIndex": 1052
            }
          },
          {
            "jsDoc": {
              "doc": "An example of the unknown type."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "example",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 41,
              "col": 2,
              "byteIndex": 1148
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 50,
              "col": 2,
              "byteIndex": 1385
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasUnknown",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasUnknown"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 54,
              "col": 2,
              "byteIndex": 1445
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasUnknown",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasUnknown"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 58,
              "col": 2,
              "byteIndex": 1492
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toJsonSchema",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "_options",
                  "optional": true,
                  "tsType": {
                    "repr": "ToJsonSchemaOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ToJsonSchemaOptions"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "",
                "kind": "union",
                "union": [
                  {
                    "repr": "OpenAPIV3.NonArraySchemaObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OpenAPIV3.NonArraySchemaObject"
                    }
                  },
                  {
                    "repr": "OpenAPIV3.ArraySchemaObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OpenAPIV3.ArraySchemaObject"
                    }
                  }
                ]
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/Unknown.ts",
              "line": 62,
              "col": 2,
              "byteIndex": 1543
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "oasUnknownData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/unknown-types.ts",
        "line": 9,
        "col": 13,
        "byteIndex": 250
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating OpenAPI unknown data objects.\n\nValidates unknown/unspecified schemas used as fallbacks when\nschema types cannot be determined or for flexible data handling."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OasUnknownData",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasUnknownData"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OasUnknownData",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/unknown-types.ts",
        "line": 24,
        "col": 0,
        "byteIndex": 732
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Data type for OpenAPI unknown schema objects.\n\nRepresents schemas with unspecified or flexible types, used as\nfallbacks when schema types cannot be determined or when maximum\nflexibility is required in the API specification."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "oasType",
                "jsDoc": {
                  "doc": "Type category identifier for schema objects"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/unknown-types.ts",
                  "line": 26,
                  "col": 2,
                  "byteIndex": 818
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "schema",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "schema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "title",
                "jsDoc": {
                  "doc": "Human-readable title for the unknown schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/unknown-types.ts",
                  "line": 28,
                  "col": 2,
                  "byteIndex": 891
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Detailed description of the schema's purpose"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/unknown-types.ts",
                  "line": 30,
                  "col": 2,
                  "byteIndex": 962
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "default",
                "jsDoc": {
                  "doc": "Default value of any type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/unknown-types.ts",
                  "line": 32,
                  "col": 2,
                  "byteIndex": 1020
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                },
                "typeParams": []
              },
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Type identifier (always 'unknown')"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/unknown-types.ts",
                  "line": 34,
                  "col": 2,
                  "byteIndex": 1084
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "unknown"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "toUnknown",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/unknown/toUnknown.ts",
        "line": 12,
        "col": 13,
        "byteIndex": 356
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OasUnknown",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasUnknown"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToUnknownArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToUnknownArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "VoidFields",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
        "line": 6,
        "col": 0,
        "byteIndex": 96
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Constructor fields for {@link OasVoid}."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "jsDoc": {
                  "doc": "A short summary of the void schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
                  "line": 8,
                  "col": 2,
                  "byteIndex": 169
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "A description of what the void represents"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
                  "line": 10,
                  "col": 2,
                  "byteIndex": 237
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OasVoid",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
        "line": 140,
        "col": 0,
        "byteIndex": 4127
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a void (empty) schema in the OpenAPI Specification.\n\nThe `OasVoid` class represents the absence of a value or content, commonly used\nin scenarios where operations don't return any content (like HTTP 204 No Content\nresponses), optional properties that might not be present, or fallback cases\nin schema processing where no specific type is defined.\n\nThis class serves as a type-safe representation of \"nothing\" in the OpenAPI\ntype system, enabling proper handling of void responses and empty schemas\nthroughout the SKMTC pipeline.\n\n## Key Features\n\n- **Empty Content Representation**: Models operations that return no content\n- **Type Safety**: Provides a concrete type for void/empty scenarios  \n- **Schema Processing**: Handles missing or undefined schema definitions\n- **Factory Pattern**: Convenient `empty()` static method for common usage\n- **Pipeline Integration**: Works seamlessly with the SKMTC processing pipeline\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic void schema for empty responses\n```typescript\nimport { OasVoid } from '@skmtc/core';\n\nconst emptyResponse = new OasVoid({\n  title: 'No Content',\n  description: 'Operation completed successfully with no response body'\n});\n\n// Used for HTTP 204 No Content responses\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using the empty factory method\n```typescript\nconst voidSchema = OasVoid.empty();\n\n// Equivalent to new OasVoid({})\n// Commonly used as a fallback or placeholder\n```\n"
          },
          {
            "kind": "example",
            "doc": "In operation responses\n```typescript\nconst deleteOperation = new OasOperation({\n  path: '/users/{id}',\n  method: 'delete',\n  responses: {\n    '204': new OasResponse({\n      description: 'User deleted successfully',\n      content: {\n        // No content for successful deletion\n      }\n    }),\n    '404': new OasResponse({\n      description: 'User not found'\n    })\n  }\n});\n\n// The void response indicates successful deletion with no return value\n```\n"
          },
          {
            "kind": "example",
            "doc": "As a schema fallback\n```typescript\nfunction processSchema(schema: OasSchema | undefined): OasSchema {\n  if (!schema) {\n    return OasVoid.empty(); // Fallback for missing schemas\n  }\n  return schema;\n}\n\n// Ensures type safety even when schemas are missing\n```\n"
          },
          {
            "kind": "example",
            "doc": "In optional object properties\n```typescript\nconst userProfile = new OasObject({\n  properties: {\n    name: new OasString({ description: 'User name' }),\n    avatar: new OasString({\n      description: 'Avatar URL',\n      nullable: true\n    }),\n    // Some properties might be processed as void if not defined\n    metadata: processOptionalSchema(rawSchema.metadata) // might return OasVoid\n  }\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "HTTP operations with void responses\n```typescript\n// Common HTTP operations that return void/empty content:\n\n// DELETE - Resource removal\nconst deleteResponse = new OasVoid({\n  title: 'Deletion Successful',\n  description: 'Resource was successfully deleted'\n});\n\n// PUT - Update with no response body\nconst updateResponse = new OasVoid({\n  title: 'Update Successful',\n  description: 'Resource was successfully updated'\n});\n\n// POST - Action with no return value\nconst actionResponse = new OasVoid({\n  title: 'Action Completed',\n  description: 'Action was successfully performed'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "In code generation\n```typescript\nclass TypeScriptGenerator extends ModelBase {\n  generateType(schema: OasSchema): string {\n    if (schema.type === 'void') {\n      return 'void'; // TypeScript void type\n    }\n    // Handle other types...\n    return 'unknown';\n  }\n}\n\n// Generates:\n// async function deleteUser(id: string): Promise<void>\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "assign",
                "left": {
                  "kind": "identifier",
                  "name": "fields",
                  "optional": false,
                  "tsType": {
                    "repr": "VoidFields",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "VoidFields"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 159,
              "col": 2,
              "byteIndex": 4559
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Object is part the 'schema' set which is used\nto define data types in an OpenAPI document."
            },
            "tsType": {
              "repr": "schema",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "schema"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "oasType",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 145,
              "col": 2,
              "byteIndex": 4265
            }
          },
          {
            "jsDoc": {
              "doc": "Constant value 'void' useful for type narrowing and tagged unions."
            },
            "tsType": {
              "repr": "void",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "void"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 149,
              "col": 2,
              "byteIndex": 4379
            }
          },
          {
            "jsDoc": {
              "doc": "A short summary of the value."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "title",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 153,
              "col": 2,
              "byteIndex": 4451
            }
          },
          {
            "jsDoc": {
              "doc": "A description of the value."
            },
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "description",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 157,
              "col": 2,
              "byteIndex": 4524
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "empty",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasVoid",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasVoid"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 164,
              "col": 2,
              "byteIndex": 4677
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 168,
              "col": 2,
              "byteIndex": 4735
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasVoid",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasVoid"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 172,
              "col": 2,
              "byteIndex": 4795
            }
          },
          {
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "OasVoid",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OasVoid"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/oas/void/Void.ts",
              "line": 176,
              "col": 2,
              "byteIndex": 4839
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "toArtifacts",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/run/toArtifacts.ts",
        "line": 134,
        "col": 13,
        "byteIndex": 4296
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Transforms an OpenAPI v3 document into generated code artifacts and metadata.\n\nThis is the primary function for the SKMTC transformation pipeline. It orchestrates\nthe three-phase process of parsing OpenAPI documents, generating code artifacts,\nand rendering them to formatted files.\n\nThe function creates a {@link CoreContext} instance and executes the full pipeline:\n1. **Parse**: Converts the OpenAPI document into internal OAS objects\n2. **Generate**: Transforms OAS objects using the provided generator configuration\n3. **Render**: Formats and prepares the final code artifacts\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Configuration for the transformation process"
          },
          {
            "kind": "return",
            "doc": "A promise resolving to the generated artifacts and manifest\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { toArtifacts } from '@skmtc/core';\n\nconst result = await toArtifacts({\n  traceId: 'my-api-generation',\n  spanId: 'user-service',\n  documentObject: myOpenApiDoc,\n  settings: {\n    basePath: './src/generated',\n    skip: {\n      models: ['InternalModel', 'DebugInfo'],\n      operations: {\n        '/internal/**': ['get', 'post']\n      }\n    }\n  },\n  toGeneratorConfigMap: () => ({\n    models: modelGenerator,\n    operations: operationGenerator\n  }),\n  startAt: Date.now(),\n  silent: false\n});\n\n// Access generated files\nObject.entries(result.artifacts).forEach(([path, content]) => {\n  console.log(`Generated: ${path}`);\n  await Deno.writeTextFile(path, content);\n});\n\n// Access generation metadata\nconsole.log(`Generated ${Object.keys(result.manifest.files).length} files`);\nconsole.log(`Generation took ${result.manifest.endAt - result.manifest.startAt}ms`);\n```\n"
          },
          {
            "kind": "example",
            "doc": "With Prettier formatting\n```typescript\nconst result = await toArtifacts({\n  traceId: 'formatted-generation',\n  spanId: 'api-client',\n  documentObject: openApiDoc,\n  settings: clientSettings,\n  prettier: {\n    semi: true,\n    singleQuote: true,\n    trailingComma: 'es5'\n  },\n  toGeneratorConfigMap: () => generatorMap,\n  startAt: Date.now(),\n  silent: true\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "Error handling\n```typescript\ntry {\n  const result = await toArtifacts(transformArgs);\n\n  // Check for generation errors in the results\n  const hasErrors = Object.values(result.manifest.results)\n    .some(result => result === 'error');\n\n  if (hasErrors) {\n    console.warn('Generation completed with errors');\n  }\n} catch (error) {\n  console.error('Transformation failed:', error);\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "typeLiteral",
                    "typeLiteral": {
                      "constructors": [],
                      "methods": [],
                      "properties": [
                        {
                          "name": "artifacts",
                          "location": {
                            "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/run/toArtifacts.ts",
                            "line": 144,
                            "col": 29,
                            "byteIndex": 4467
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "Record",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": [
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                },
                                {
                                  "repr": "string",
                                  "kind": "keyword",
                                  "keyword": "string"
                                }
                              ],
                              "typeName": "Record"
                            }
                          },
                          "typeParams": []
                        },
                        {
                          "name": "manifest",
                          "location": {
                            "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/run/toArtifacts.ts",
                            "line": 144,
                            "col": 64,
                            "byteIndex": 4502
                          },
                          "params": [],
                          "computed": false,
                          "optional": false,
                          "tsType": {
                            "repr": "ManifestContent",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "ManifestContent"
                            }
                          },
                          "typeParams": []
                        }
                      ],
                      "callSignatures": [],
                      "indexSignatures": []
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "traceId",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "spanId",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "documentObject",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "settings",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "prettier",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "toGeneratorConfigMap",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "logsPath",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "startAt",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "silent",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "TransformArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TransformArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "stringToSchema",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/run/toV3JsonDocument.ts",
        "line": 111,
        "col": 13,
        "byteIndex": 3544
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Parses a string into an OpenAPI document object.\n\nAutomatically detects whether the input string is JSON or YAML format based on\nthe content, then parses it into an OpenAPI document object. Supports all\nOpenAPI versions (2.0, 3.0.x, 3.1.x).\n",
        "tags": [
          {
            "kind": "param",
            "name": "schema",
            "doc": "- The OpenAPI document as a JSON or YAML string"
          },
          {
            "kind": "return",
            "doc": "Parsed OpenAPI document object\n"
          },
          {
            "kind": "example",
            "doc": "Parsing JSON OpenAPI document\n```typescript\nconst jsonSchema = `{\n  \"openapi\": \"3.0.0\",\n  \"info\": { \"title\": \"My API\", \"version\": \"1.0.0\" },\n  \"paths\": {}\n}`;\nconst document = stringToSchema(jsonSchema);\nconsole.log(document.info.title); // \"My API\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Parsing YAML OpenAPI document\n```typescript\nconst yamlSchema = `\nopenapi: 3.0.0\ninfo:\n  title: My API\n  version: 1.0.0\npaths: {}\n`;\nconst document = stringToSchema(yamlSchema);\nconsole.log(document.info.title); // \"My API\"\n```\n"
          },
          {
            "kind": "throws",
            "type": "SyntaxError",
            "doc": "If the JSON is malformed"
          },
          {
            "kind": "throws",
            "type": "Error",
            "doc": "If the YAML is malformed"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "AnyOasDocument",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "AnyOasDocument"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "schema",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toV3Document",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/run/toV3JsonDocument.ts",
        "line": 166,
        "col": 13,
        "byteIndex": 5210
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Converts any OpenAPI document version to OpenAPI 3.0 format.\n\nSKMTC processes all documents using OpenAPI 3.0 as the internal format.\nThis function handles version detection and conversion from:\n- OpenAPI 3.0.x (returned as-is)\n- OpenAPI 3.1.x (downgraded to 3.0 with allOf transformations)\n- Swagger 2.0 (upgraded to OpenAPI 3.0)\n",
        "tags": [
          {
            "kind": "param",
            "name": "schema",
            "doc": "- The OpenAPI document to convert"
          },
          {
            "kind": "return",
            "doc": "Promise resolving to an OpenAPI 3.0 document\n"
          },
          {
            "kind": "example",
            "doc": "Converting OpenAPI 3.1 to 3.0\n```typescript\nconst openapi31Doc = {\n  openapi: \"3.1.0\",\n  info: { title: \"My API\", version: \"1.0.0\" },\n  paths: {}\n};\nconst v3Doc = await toV3Document(openapi31Doc);\nconsole.log(v3Doc.openapi); // \"3.0.3\" (converted)\n```\n"
          },
          {
            "kind": "example",
            "doc": "Converting Swagger 2.0 to OpenAPI 3.0\n```typescript\nconst swagger2Doc = {\n  swagger: \"2.0\",\n  info: { title: \"My API\", version: \"1.0.0\" },\n  paths: {}\n};\nconst v3Doc = await toV3Document(swagger2Doc);\nconsole.log(v3Doc.openapi); // \"3.0.0\" (converted)\n```\n"
          },
          {
            "kind": "example",
            "doc": "OpenAPI 3.0 passthrough\n```typescript\nconst openapi30Doc = {\n  openapi: \"3.0.2\",\n  info: { title: \"My API\", version: \"1.0.0\" },\n  paths: {}\n};\nconst v3Doc = await toV3Document(openapi30Doc);\nconsole.log(v3Doc === openapi30Doc); // true (same object)\n```\n"
          },
          {
            "kind": "throws",
            "type": "Error",
            "doc": "If the document version is not recognized or supported"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "Promise",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "OpenAPIV3.Document",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "OpenAPIV3.Document"
                    }
                  }
                ],
                "typeName": "Promise"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "schema",
                "optional": false,
                "tsType": {
                  "repr": "AnyOasDocument",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "AnyOasDocument"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "CustomValue",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
        "line": 31,
        "col": 0,
        "byteIndex": 964
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a custom value in the SKMTC generation pipeline.\n\nCustomValue allows generators to create arbitrary content that doesn't fit\nstandard schema types. Used for injecting custom code, templates, or specialized\ncontent during the generation process.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Creating custom content\n```typescript\nconst customValue = new CustomValue({\n  context: generateContext,\n  value: 'const customCode = \"generated\";',\n  generatorKey: 'my-generator'\n});\n\nconsole.log(customValue.toString()); // \"const customCode = \"generated\";\"\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new CustomValue instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Creation arguments including context, value, and optional generator key"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "value",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generatorKey",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CreateArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CreateArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
              "line": 42,
              "col": 2,
              "byteIndex": 1328
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Type identifier for this custom value"
            },
            "tsType": {
              "repr": "custom",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "custom"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "type",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
              "line": 33,
              "col": 2,
              "byteIndex": 1060
            }
          },
          {
            "jsDoc": {
              "doc": "The underlying value content that can be converted to string"
            },
            "tsType": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "value",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
              "line": 35,
              "col": 2,
              "byteIndex": 1157
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Determines if this custom value is a reference.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Always false since custom values are concrete content, not references"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "isRef",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "this is \u001b[0m\u001b[38;5;12mOasRef\u001b[0m<\u001b[0m\u001b[32m\"schema\"\u001b[0m>",
                "kind": "typePredicate",
                "typePredicate": {
                  "asserts": false,
                  "param": {
                    "type": "this"
                  },
                  "type": {
                    "repr": "OasRef",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "schema",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "schema"
                          }
                        }
                      ],
                      "typeName": "OasRef"
                    }
                  }
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
              "line": 53,
              "col": 2,
              "byteIndex": 1611
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this custom value.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The custom value itself since it's already resolved"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolve",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "CustomValue",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CustomValue"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
              "line": 62,
              "col": 2,
              "byteIndex": 1788
            }
          },
          {
            "jsDoc": {
              "doc": "Resolves this custom value one level.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The custom value itself since it's already resolved"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "resolveOnce",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "CustomValue",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "CustomValue"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
              "line": 71,
              "col": 2,
              "byteIndex": 1963
            }
          },
          {
            "jsDoc": {
              "doc": "Converts the custom value to its string representation.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "String representation of the underlying value"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "isOverride": true,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
              "line": 80,
              "col": 2,
              "byteIndex": 2154
            }
          }
        ],
        "extends": "ContentBase",
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "isCustomValue",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/CustomValue.ts",
        "line": 98,
        "col": 13,
        "byteIndex": 2578
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type guard function to check if a value is a CustomValue instance.\n",
        "tags": [
          {
            "kind": "param",
            "name": "value",
            "doc": "- Value to check"
          },
          {
            "kind": "return",
            "doc": "True if the value is a CustomValue, false otherwise\n"
          },
          {
            "kind": "example",
            "doc": "Type checking\n```typescript\nif (isCustomValue(someValue)) {\n  console.log(someValue.value); // TypeScript knows it's a CustomValue\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "value is \u001b[0m\u001b[38;5;12mCustomValue\u001b[0m",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "identifier",
                  "name": "value"
                },
                "type": {
                  "repr": "CustomValue",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CustomValue"
                  }
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "rootDenoJson",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
        "line": 9,
        "col": 13,
        "byteIndex": 244
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for root-level deno.json configuration files.\n\nValidates workspace-level deno.json files that manage multiple packages\nand define workspace-wide imports and exports."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "RootDenoJson",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "RootDenoJson"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "RootDenoJson",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
        "line": 21,
        "col": 0,
        "byteIndex": 665
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type definition for root-level deno.json configuration.\n\nRepresents the structure of workspace-level deno.json files that coordinate\nmultiple packages within a Deno workspace."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "imports",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
                  "line": 22,
                  "col": 2,
                  "byteIndex": 696
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "exports",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
                  "line": 23,
                  "col": 2,
                  "byteIndex": 731
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "workspace",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
                  "line": 24,
                  "col": 2,
                  "byteIndex": 766
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "packageDenoJson",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
        "line": 33,
        "col": 13,
        "byteIndex": 1013
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for package-level deno.json configuration files.\n\nValidates individual package deno.json files that define package-specific\nmetadata, dependencies, and export configurations."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "PackageDenoJson",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PackageDenoJson"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "PackageDenoJson",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
        "line": 46,
        "col": 0,
        "byteIndex": 1472
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type definition for package-level deno.json configuration.\n\nRepresents the structure of individual package deno.json files with\nrequired name/version fields and optional import/export configurations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
                  "line": 47,
                  "col": 2,
                  "byteIndex": 1506
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "version",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
                  "line": 48,
                  "col": 2,
                  "byteIndex": 1521
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "imports",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
                  "line": 49,
                  "col": 2,
                  "byteIndex": 1539
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "exports",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/DenoJson.ts",
                  "line": 50,
                  "col": 2,
                  "byteIndex": 1574
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          }
                        ],
                        "typeName": "Record"
                      }
                    },
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "EnrichmentRequest",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/EnrichmentRequest.ts",
        "line": 66,
        "col": 0,
        "byteIndex": 2472
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a request for enrichment data during code generation.\n\nEnrichment requests allow generators to specify what additional metadata\nthey need for generating enhanced code artifacts. The request includes\na schema for validation and the content that needs enrichment.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- The type of enrichment data being requested"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "prompt",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/EnrichmentRequest.ts",
                  "line": 67,
                  "col": 2,
                  "byteIndex": 2536
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "enrichmentSchema",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/EnrichmentRequest.ts",
                  "line": 68,
                  "col": 2,
                  "byteIndex": 2553
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "v.BaseSchema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      },
                      {
                        "repr": "EnrichmentType",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "EnrichmentType"
                        }
                      },
                      {
                        "repr": "v.BaseIssue",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "unknown",
                              "kind": "keyword",
                              "keyword": "unknown"
                            }
                          ],
                          "typeName": "v.BaseIssue"
                        }
                      }
                    ],
                    "typeName": "v.BaseSchema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "content",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/EnrichmentRequest.ts",
                  "line": 69,
                  "col": 2,
                  "byteIndex": 2640
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "formFieldItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 69,
        "col": 13,
        "byteIndex": 2175
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for form field items.\n\nValidates individual form field configurations including input components,\nlabels, placeholders, and data access paths."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "FormFieldItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FormFieldItem"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "FormFieldItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 83,
        "col": 0,
        "byteIndex": 2573
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for a single form field.\n\nDefines how a form field should be rendered, including its input component,\nlabel text, data binding path, and optional placeholder text."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 84,
                  "col": 2,
                  "byteIndex": 2605
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "accessorPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 85,
                  "col": 2,
                  "byteIndex": 2618
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "input",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 86,
                  "col": 2,
                  "byteIndex": 2643
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ModuleExport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ModuleExport"
                  }
                },
                "typeParams": []
              },
              {
                "name": "label",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 87,
                  "col": 2,
                  "byteIndex": 2665
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "placeholder",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 88,
                  "col": 2,
                  "byteIndex": 2681
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "formItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 97,
        "col": 13,
        "byteIndex": 2893
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for form configurations.\n\nValidates complete form definitions including title, description,\nfield configurations, and submit button labels."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "FormItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "FormItem"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "FormItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 110,
        "col": 0,
        "byteIndex": 3267
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for a complete form.\n\nRepresents a form with optional title, description, field definitions,\nand customizable submit button label."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 111,
                  "col": 2,
                  "byteIndex": 3294
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 112,
                  "col": 2,
                  "byteIndex": 3311
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "fields",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 113,
                  "col": 2,
                  "byteIndex": 3334
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "FormFieldItem",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "FormFieldItem"
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "submitLabel",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 114,
                  "col": 2,
                  "byteIndex": 3361
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "tableColumnItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 123,
        "col": 13,
        "byteIndex": 3559
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for table column items.\n\nValidates table column configurations including formatter components,\nlabels, and data access paths."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "TableColumnItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TableColumnItem"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "TableColumnItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 136,
        "col": 0,
        "byteIndex": 3910
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for a single table column.\n\nDefines how a table column should be rendered, including its formatter\ncomponent, display label, and data binding path."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 137,
                  "col": 2,
                  "byteIndex": 3944
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "accessorPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 138,
                  "col": 2,
                  "byteIndex": 3957
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "formatter",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 139,
                  "col": 2,
                  "byteIndex": 3982
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ModuleExport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ModuleExport"
                  }
                },
                "typeParams": []
              },
              {
                "name": "label",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 140,
                  "col": 2,
                  "byteIndex": 4008
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "tableItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 149,
        "col": 13,
        "byteIndex": 4194
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for table configurations.\n\nValidates complete table definitions including title, description,\nand column configurations."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "TableItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "TableItem"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "TableItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 160,
        "col": 0,
        "byteIndex": 4500
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for a complete table.\n\nRepresents a table with optional title, description, and column definitions."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "title",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 161,
                  "col": 2,
                  "byteIndex": 4528
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 162,
                  "col": 2,
                  "byteIndex": 4545
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "columns",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 163,
                  "col": 2,
                  "byteIndex": 4568
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "TableColumnItem",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TableColumnItem"
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "inputItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 172,
        "col": 13,
        "byteIndex": 4760
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for input items.\n\nValidates input component configurations including formatter components\nand data access paths."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "InputItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "InputItem"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "InputItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 184,
        "col": 0,
        "byteIndex": 5059
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for a single input component.\n\nDefines how an input should be rendered, including its formatter\ncomponent and data binding path."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "id",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 185,
                  "col": 2,
                  "byteIndex": 5087
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "accessorPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 186,
                  "col": 2,
                  "byteIndex": 5100
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "formatter",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 187,
                  "col": 2,
                  "byteIndex": 5125
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ModuleExport",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ModuleExport"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "operationEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 196,
        "col": 13,
        "byteIndex": 5369
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for operation-level enrichments.\n\nValidates enrichment configurations that can be applied to OpenAPI operations,\nincluding table, form, and input component definitions."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "OperationEnrichments",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OperationEnrichments"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OperationEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 208,
        "col": 0,
        "byteIndex": 5759
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Enrichment configurations for a single OpenAPI operation.\n\nContains optional table, form, and input configurations that can enhance\nhow an operation is presented and interacted with in generated UIs."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "table",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 209,
                  "col": 2,
                  "byteIndex": 5798
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "TableItem",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TableItem"
                  }
                },
                "typeParams": []
              },
              {
                "name": "form",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 210,
                  "col": 2,
                  "byteIndex": 5818
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "FormItem",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FormItem"
                  }
                },
                "typeParams": []
              },
              {
                "name": "input",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
                  "line": 211,
                  "col": 2,
                  "byteIndex": 5836
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "InputItem",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "InputItem"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "methodEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 219,
        "col": 13,
        "byteIndex": 6020
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for HTTP method-level enrichments.\n\nMaps HTTP methods (GET, POST, etc.) to their operation enrichment configurations."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "MethodEnrichments",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "MethodEnrichments"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "MethodEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 226,
        "col": 0,
        "byteIndex": 6270
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "HTTP method to operation enrichments mapping.\n\nAssociates HTTP methods with their corresponding operation enrichment configurations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "OperationEnrichments",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "OperationEnrichments"
                }
              }
            ],
            "typeName": "Record"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "pathEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 233,
        "col": 13,
        "byteIndex": 6476
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for API path-level enrichments.\n\nMaps API paths to their method enrichment configurations."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "PathEnrichments",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PathEnrichments"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "PathEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 240,
        "col": 0,
        "byteIndex": 6707
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "API path to method enrichments mapping.\n\nAssociates API paths with their corresponding method enrichment configurations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "MethodEnrichments",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "MethodEnrichments"
                }
              }
            ],
            "typeName": "Record"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "generatorEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 248,
        "col": 13,
        "byteIndex": 6964
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for generator-level enrichments.\n\nMaps generator IDs to their path enrichment configurations,\ncreating a complete hierarchy of enrichment data."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "GeneratorEnrichments",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "GeneratorEnrichments"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "GeneratorEnrichments",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Enrichments.ts",
        "line": 256,
        "col": 0,
        "byteIndex": 7282
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Generator ID to path enrichments mapping.\n\nTop-level enrichment structure that organizes enrichment data by generator,\nthen by path, then by HTTP method, providing complete enrichment hierarchies."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "PathEnrichments",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PathEnrichments"
                }
              }
            ],
            "typeName": "Record"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "GenerationType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratedValue.ts",
        "line": 16,
        "col": 0,
        "byteIndex": 587
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "'force' - will generate content even it is not selected.\nUse this option when generating code via a dependency.\nFor example, when you are generating a form and it needs\nan accompanying API client as well. You should use 'force'\nwhen generating the API client to ensure it is generated\nevent the API client itself is not selected.\n\n'regular' - will generate content only if it is selected."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "force",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "force"
              }
            },
            {
              "repr": "regular",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "regular"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "GeneratedValue",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratedValue.ts",
        "line": 25,
        "col": 0,
        "byteIndex": 906
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a value that can be generated by the SKMTC pipeline.\n\nCombines the Stringable interface with optional generator key metadata,\nallowing generated content to be associated with specific generators for\ntracking and organization purposes."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "intersection",
          "intersection": [
            {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "generatorKey",
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratedValue.ts",
                      "line": 26,
                      "col": 2,
                      "byteIndex": 952
                    },
                    "params": [],
                    "computed": false,
                    "optional": true,
                    "tsType": {
                      "repr": "GeneratorKey",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "GeneratorKey"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "GeneratedDefinition",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratedValue.ts",
        "line": 39,
        "col": 0,
        "byteIndex": 1393
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Conditional type for generated definitions based on generation type.\n\nWhen generation type is 'force', always returns a Definition.\nWhen generation type is 'regular', returns Definition or undefined\nbased on whether the content is selected for generation.\n",
        "tags": [
          {
            "kind": "template",
            "name": "V",
            "doc": "- The generated value type extending GeneratedValue"
          },
          {
            "kind": "template",
            "name": "T",
            "doc": "- The generation type ('force' or 'regular')"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "conditional",
          "conditionalType": {
            "checkType": {
              "repr": "T",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "T"
              }
            },
            "extendsType": {
              "repr": "force",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "force"
              }
            },
            "trueType": {
              "repr": "Definition",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "V",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "V"
                    }
                  }
                ],
                "typeName": "Definition"
              }
            },
            "falseType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "Definition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      }
                    ],
                    "typeName": "Definition"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            }
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "GeneratedValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratedValue"
              }
            }
          },
          {
            "name": "T",
            "constraint": {
              "repr": "GenerationType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerationType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "NakedOperationGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 75,
        "col": 0,
        "byteIndex": 2770
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Template literal type for operation generator keys before branding.\nFormat: `generatorId|path|method` (e.g., 'api-client|/users|get')"
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "${\u001b[0m\u001b[36mstring\u001b[0m}|${\u001b[0m\u001b[36mstring\u001b[0m}|${\u001b[0m\u001b[38;5;12mMethod\u001b[0m}",
          "kind": "literal",
          "literal": {
            "kind": "template",
            "tsTypes": [
              {
                "repr": "",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ""
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "|",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "|"
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "|",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "|"
                }
              },
              {
                "repr": "Method",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Method"
                }
              },
              {
                "repr": "",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ""
                }
              }
            ]
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "NakedModelGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 81,
        "col": 0,
        "byteIndex": 2985
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Template literal type for model generator keys before branding.\nFormat: `generatorId|refName` (e.g., 'typescript-models|User')"
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "${\u001b[0m\u001b[36mstring\u001b[0m}|${\u001b[0m\u001b[36mstring\u001b[0m}",
          "kind": "literal",
          "literal": {
            "kind": "template",
            "tsTypes": [
              {
                "repr": "",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ""
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "|",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "|"
                }
              },
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ""
                }
              }
            ]
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "OperationGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 90,
        "col": 0,
        "byteIndex": 3288
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Branded type for operation generator keys.\n\nOperation generator keys uniquely identify generators that process\nOpenAPI operations (HTTP methods on API paths). The key encodes\nthe generator ID, API path, and HTTP method."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Brand",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "NakedOperationGeneratorKey",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "NakedOperationGeneratorKey"
                }
              },
              {
                "repr": "OperationGeneratorKey",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "OperationGeneratorKey"
                }
              }
            ],
            "typeName": "Brand"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ModelGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 102,
        "col": 0,
        "byteIndex": 3603
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Branded type for model generator keys.\n\nModel generator keys uniquely identify generators that process\nOpenAPI schema models. The key encodes the generator ID and\nthe schema reference name."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Brand",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "NakedModelGeneratorKey",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "NakedModelGeneratorKey"
                }
              },
              {
                "repr": "ModelGeneratorKey",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "ModelGeneratorKey"
                }
              }
            ],
            "typeName": "Brand"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "GeneratorOnlyKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 114,
        "col": 0,
        "byteIndex": 3935
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Branded type for generator-only keys.\n\nGenerator-only keys identify generators that don't process specific\noperations or models, but generate global artifacts like configuration\nfiles, base classes, or utility modules."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Brand",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "GeneratorOnlyKey",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "GeneratorOnlyKey"
                }
              }
            ],
            "typeName": "Brand"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "GeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 144,
        "col": 0,
        "byteIndex": 4749
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type of all possible generator key types.\n\nGenerator keys serve as unique identifiers for different types of\ncode generators in the SKMTC system. They enable tracking, caching,\nand dependency management between generated artifacts.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\n// Operation generator key\nconst opKey: GeneratorKey = toOperationGeneratorKey({\n  generatorId: 'api-client',\n  path: '/users/{id}',\n  method: 'get'\n});\n\n// Model generator key\nconst modelKey: GeneratorKey = toModelGeneratorKey({\n  generatorId: 'typescript-types',\n  refName: 'User'\n});\n\n// Generator-only key\nconst globalKey: GeneratorKey = toGeneratorOnlyKey({\n  generatorId: 'api-config'\n});\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OperationGeneratorKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OperationGeneratorKey"
              }
            },
            {
              "repr": "ModelGeneratorKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ModelGeneratorKey"
              }
            },
            {
              "repr": "GeneratorOnlyKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratorOnlyKey"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "toOperationGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 205,
        "col": 13,
        "byteIndex": 6383
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates an operation generator key from generator ID and operation details.\n\nOperation generator keys uniquely identify generators processing specific\nAPI operations. The key format is: `generatorId|path|method`\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Operation generator key arguments"
          },
          {
            "kind": "return",
            "doc": "A branded OperationGeneratorKey\n"
          },
          {
            "kind": "example",
            "doc": "With explicit path and method\n```typescript\nconst key = toOperationGeneratorKey({\n  generatorId: 'api-client',\n  path: '/users/{id}',\n  method: 'get'\n});\n// Result: 'api-client|/users/{id}|get' (branded)\n```\n"
          },
          {
            "kind": "example",
            "doc": "With OasOperation object\n```typescript\nconst operation = new OasOperation({\n  path: '/posts',\n  method: 'post',\n  // ... other operation details\n});\n\nconst key = toOperationGeneratorKey({\n  generatorId: 'rest-client',\n  operation\n});\n// Result: 'rest-client|/posts|post' (branded)\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "OperationGeneratorKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OperationGeneratorKey"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "generatorId",
                    "value": null
                  },
                  {
                    "kind": "rest",
                    "arg": {
                      "kind": "identifier",
                      "name": "rest",
                      "optional": false,
                      "tsType": null
                    }
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToOperationGeneratorKeyArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToOperationGeneratorKeyArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toModelGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 250,
        "col": 13,
        "byteIndex": 7635
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a model generator key from generator ID and schema reference name.\n\nModel generator keys uniquely identify generators processing specific\nOpenAPI schema models. The key format is: `generatorId|refName`\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Model generator key arguments"
          },
          {
            "kind": "return",
            "doc": "A branded ModelGeneratorKey\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst key = toModelGeneratorKey({\n  generatorId: 'typescript-interfaces',\n  refName: 'User'\n});\n// Result: 'typescript-interfaces|User' (branded)\n\nconst validationKey = toModelGeneratorKey({\n  generatorId: 'zod-schemas',\n  refName: 'CreateUserRequest'\n});\n// Result: 'zod-schemas|CreateUserRequest' (branded)\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "ModelGeneratorKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ModelGeneratorKey"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "generatorId",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "refName",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToModelGeneratorKeyArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToModelGeneratorKeyArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toGeneratorOnlyKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 290,
        "col": 13,
        "byteIndex": 8659
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Creates a generator-only key for global/utility generators.\n\nGenerator-only keys identify generators that produce artifacts not tied\nto specific operations or models, such as configuration files, base classes,\nutilities, or documentation.\n",
        "tags": [
          {
            "kind": "param",
            "name": "args",
            "doc": "- Generator-only key arguments"
          },
          {
            "kind": "return",
            "doc": "A branded GeneratorOnlyKey\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst configKey = toGeneratorOnlyKey({\n  generatorId: 'api-config'\n});\n// Result: 'api-config' (branded)\n\nconst utilsKey = toGeneratorOnlyKey({\n  generatorId: 'common-utilities'\n});\n// Result: 'common-utilities' (branded)\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "GeneratorOnlyKey",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratorOnlyKey"
              }
            },
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "generatorId",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ToGeneratorOnlyKeyArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ToGeneratorOnlyKeyArgs"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 318,
        "col": 13,
        "byteIndex": 9384
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type guard to check if a value is a valid GeneratorKey.\n\nThis function validates that the argument is one of the three\ngenerator key types: operation, model, or generator-only.\n",
        "tags": [
          {
            "kind": "param",
            "name": "arg",
            "doc": "- Value to check"
          },
          {
            "kind": "return",
            "doc": "True if the value is a valid GeneratorKey\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst key = 'api-client|/users|get';\n\nif (isGeneratorKey(key)) {\n  // key is now typed as GeneratorKey\n  const generatorId = toGeneratorId(key);\n  console.log(generatorId); // 'api-client'\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "arg is \u001b[0m\u001b[38;5;12mGeneratorKey\u001b[0m",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "identifier",
                  "name": "arg"
                },
                "type": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "arg",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isOperationGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 350,
        "col": 13,
        "byteIndex": 10331
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type guard to check if a value is a valid OperationGeneratorKey.\n\nValidates that the argument is a string with the correct format:\n`generatorId|path|method` where each part is non-empty and method\nis a valid HTTP method.\n",
        "tags": [
          {
            "kind": "param",
            "name": "arg",
            "doc": "- Value to check"
          },
          {
            "kind": "return",
            "doc": "True if the value is a valid OperationGeneratorKey\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst key = 'api-client|/users/{id}|get';\n\nif (isOperationGeneratorKey(key)) {\n  // key is now typed as OperationGeneratorKey\n  const obj = fromGeneratorKey(key);\n  console.log(obj.type);        // 'operation'\n  console.log(obj.generatorId); // 'api-client'\n  console.log(obj.path);        // '/users/{id}'\n  console.log(obj.method);      // 'get'\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "arg is \u001b[0m\u001b[38;5;12mOperationGeneratorKey\u001b[0m",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "identifier",
                  "name": "arg"
                },
                "type": {
                  "repr": "OperationGeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "OperationGeneratorKey"
                  }
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "arg",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isModelGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 402,
        "col": 13,
        "byteIndex": 11493
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type guard to check if a value is a valid ModelGeneratorKey.\n\nValidates that the argument is a string with the correct format:\n`generatorId|refName` where both parts are non-empty strings.\n",
        "tags": [
          {
            "kind": "param",
            "name": "arg",
            "doc": "- Value to check"
          },
          {
            "kind": "return",
            "doc": "True if the value is a valid ModelGeneratorKey\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst key = 'zod-schemas|User';\n\nif (isModelGeneratorKey(key)) {\n  // key is now typed as ModelGeneratorKey\n  const obj = fromGeneratorKey(key);\n  console.log(obj.type);        // 'model'\n  console.log(obj.generatorId); // 'zod-schemas'\n  console.log(obj.refName);     // 'User'\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "arg is \u001b[0m\u001b[38;5;12mModelGeneratorKey\u001b[0m",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "identifier",
                  "name": "arg"
                },
                "type": {
                  "repr": "ModelGeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ModelGeneratorKey"
                  }
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "arg",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isGeneratorOnlyKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 447,
        "col": 13,
        "byteIndex": 12545
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type guard to check if a value is a valid GeneratorOnlyKey.\n\nValidates that the argument is a non-empty string. Generator-only keys\nare simple strings containing just the generator ID.\n",
        "tags": [
          {
            "kind": "param",
            "name": "arg",
            "doc": "- Value to check"
          },
          {
            "kind": "return",
            "doc": "True if the value is a valid GeneratorOnlyKey\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst key = 'api-config';\n\nif (isGeneratorOnlyKey(key)) {\n  // key is now typed as GeneratorOnlyKey\n  const obj = fromGeneratorKey(key);\n  console.log(obj.type);        // 'generator-only'\n  console.log(obj.generatorId); // 'api-config'\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "arg is \u001b[0m\u001b[38;5;12mGeneratorOnlyKey\u001b[0m",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "identifier",
                  "name": "arg"
                },
                "type": {
                  "repr": "GeneratorOnlyKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorOnlyKey"
                  }
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "arg",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toGeneratorId",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 487,
        "col": 13,
        "byteIndex": 13693
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Extracts the generator ID from any type of GeneratorKey.\n\nThis utility function parses the generator key to extract just the\ngenerator identifier, regardless of the key type. For operation and\nmodel keys, it extracts the first part before the pipe. For generator-only\nkeys, it returns the entire key since it's just the generator ID.\n",
        "tags": [
          {
            "kind": "param",
            "name": "generatorKey",
            "doc": "- Any type of generator key"
          },
          {
            "kind": "return",
            "doc": "The generator ID string\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst opKey = toOperationGeneratorKey({\n  generatorId: 'api-client',\n  path: '/users',\n  method: 'get'\n});\nconsole.log(toGeneratorId(opKey)); // 'api-client'\n\nconst modelKey = toModelGeneratorKey({\n  generatorId: 'typescript-types',\n  refName: 'User'\n});\nconsole.log(toGeneratorId(modelKey)); // 'typescript-types'\n\nconst globalKey = toGeneratorOnlyKey({\n  generatorId: 'utilities'\n});\nconsole.log(toGeneratorId(globalKey)); // 'utilities'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "generatorKey",
                "optional": false,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "GeneratorKeyObject",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 506,
        "col": 0,
        "byteIndex": 14229
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Object representation of a parsed GeneratorKey.\n\nThis discriminated union type represents the parsed components of any\ngenerator key, making it easier to work with key data in a structured way.\nThe `type` field discriminates between the three key types."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "type",
                    "jsDoc": {
                      "doc": "Discriminator for operation generator keys"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 509,
                      "col": 6,
                      "byteIndex": 14330
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "operation",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "operation"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "generatorId",
                    "jsDoc": {
                      "doc": "Generator identifier"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 511,
                      "col": 6,
                      "byteIndex": 14388
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "path",
                    "jsDoc": {
                      "doc": "API path"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 513,
                      "col": 6,
                      "byteIndex": 14436
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "method",
                    "jsDoc": {
                      "doc": "HTTP method"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 515,
                      "col": 6,
                      "byteIndex": 14480
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "Method",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Method"
                      }
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "type",
                    "jsDoc": {
                      "doc": "Discriminator for model generator keys"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 519,
                      "col": 6,
                      "byteIndex": 14565
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "model",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "model"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "generatorId",
                    "jsDoc": {
                      "doc": "Generator identifier"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 521,
                      "col": 6,
                      "byteIndex": 14619
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  },
                  {
                    "name": "refName",
                    "jsDoc": {
                      "doc": "Schema reference name"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 523,
                      "col": 6,
                      "byteIndex": 14680
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            },
            {
              "repr": "",
              "kind": "typeLiteral",
              "typeLiteral": {
                "constructors": [],
                "methods": [],
                "properties": [
                  {
                    "name": "type",
                    "jsDoc": {
                      "doc": "Discriminator for generator-only keys"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 527,
                      "col": 6,
                      "byteIndex": 14765
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "generator-only",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "generator-only"
                      }
                    },
                    "typeParams": []
                  },
                  {
                    "name": "generatorId",
                    "jsDoc": {
                      "doc": "Generator identifier"
                    },
                    "location": {
                      "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
                      "line": 529,
                      "col": 6,
                      "byteIndex": 14828
                    },
                    "params": [],
                    "computed": false,
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    "typeParams": []
                  }
                ],
                "callSignatures": [],
                "indexSignatures": []
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "fromGeneratorKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorKeys.ts",
        "line": 575,
        "col": 13,
        "byteIndex": 16221
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Parses a GeneratorKey into its structured object representation.\n\nThis function decomposes any generator key into a structured object\nwith discriminated union types, making it easier to work with the\nkey components in a type-safe manner.\n",
        "tags": [
          {
            "kind": "param",
            "name": "generatorKey",
            "doc": "- Any type of generator key to parse"
          },
          {
            "kind": "return",
            "doc": "Parsed generator key object with discriminated type\n"
          },
          {
            "kind": "example",
            "doc": "Operation key parsing\n```typescript\nconst opKey = 'api-client|/users/{id}|get' as OperationGeneratorKey;\nconst parsed = fromGeneratorKey(opKey);\n\nif (parsed.type === 'operation') {\n  console.log(parsed.generatorId); // 'api-client'\n  console.log(parsed.path);        // '/users/{id}'\n  console.log(parsed.method);      // 'get'\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Model key parsing\n```typescript\nconst modelKey = 'zod-schemas|User' as ModelGeneratorKey;\nconst parsed = fromGeneratorKey(modelKey);\n\nif (parsed.type === 'model') {\n  console.log(parsed.generatorId); // 'zod-schemas'\n  console.log(parsed.refName);     // 'User'\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Generator-only key parsing\n```typescript\nconst globalKey = 'utilities' as GeneratorOnlyKey;\nconst parsed = fromGeneratorKey(globalKey);\n\nif (parsed.type === 'generator-only') {\n  console.log(parsed.generatorId); // 'utilities'\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "GeneratorKeyObject",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GeneratorKeyObject"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "generatorKey",
                "optional": false,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "GeneratorConfig",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorType.ts",
        "line": 39,
        "col": 0,
        "byteIndex": 1193
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing all possible generator configurations.\n\nGenerator configurations define how different types of generators should\nprocess OpenAPI documents. This includes both operation generators (which\nprocess API endpoints) and model generators (which process data schemas).\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional type for custom enrichment data\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nimport { GeneratorConfig } from '@skmtc/core';\n\n// Operation generator configuration\nconst apiClientConfig: GeneratorConfig = {\n  type: 'operation',\n  generatorId: 'api-client',\n  settings: {\n    exportPath: './src/api/client.ts',\n    enrichment: customEnrichments\n  },\n  toGenerator: (args) => new ApiClientGenerator(args)\n};\n\n// Model generator configuration\nconst typescriptModels: GeneratorConfig = {\n  type: 'model',\n  generatorId: 'typescript-models',\n  settings: {\n    exportPath: './src/types/models.ts'\n  },\n  toGenerator: (args) => new TypeScriptModelGenerator(args)\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OperationConfig",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "OperationConfig"
              }
            },
            {
              "repr": "ModelConfig",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "ModelConfig"
              }
            }
          ]
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "GeneratorsMap",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorType.ts",
        "line": 65,
        "col": 0,
        "byteIndex": 2056
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type-safe mapping of generator configurations.\n\nThis type preserves the structure and types of generator configurations\nwithin a map, ensuring that each generator maintains its specific\nconfiguration type and enrichment data.\n",
        "tags": [
          {
            "kind": "template",
            "name": "G",
            "doc": "- The generator configuration type"
          },
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- The enrichment type for the generators\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\ntype MyGenerators = {\n  'api-client': OperationConfig<ApiEnrichment>;\n  'typescript-models': ModelConfig<ModelEnrichment>;\n  'validation': ModelConfig<ValidationEnrichment>;\n};\n\ntype MyGeneratorsMap = GeneratorsMap<MyGenerators, undefined>;\n// Preserves the exact structure and types of MyGenerators\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "mapped",
          "mappedType": {
            "typeParam": {
              "name": "K",
              "constraint": {
                "repr": "",
                "kind": "typeOperator",
                "typeOperator": {
                  "operator": "keyof",
                  "tsType": {
                    "repr": "G",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "G"
                    }
                  }
                }
              }
            },
            "tsType": {
              "repr": "",
              "kind": "indexedAccess",
              "indexedAccess": {
                "readonly": false,
                "objType": {
                  "repr": "G",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "G"
                  }
                },
                "indexType": {
                  "repr": "K",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "K"
                  }
                }
              }
            }
          }
        },
        "typeParams": [
          {
            "name": "G",
            "constraint": {
              "repr": "GeneratorConfig",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "EnrichmentType",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "EnrichmentType"
                    }
                  }
                ],
                "typeName": "GeneratorConfig"
              }
            }
          },
          {
            "name": "EnrichmentType"
          }
        ]
      }
    },
    {
      "name": "GeneratorsMapContainer",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/GeneratorType.ts",
        "line": 131,
        "col": 0,
        "byteIndex": 3947
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Container type for a complete generators map with optional enrichment.\n\nThis type represents a complete mapping of generators that can process\nan OpenAPI document. It's used as the main configuration structure\npassed to the SKMTC processing pipeline.\n",
        "tags": [
          {
            "kind": "template",
            "name": "EnrichmentType",
            "doc": "- Optional type for custom enrichment data across all generators\n"
          },
          {
            "kind": "example",
            "doc": "Basic generators map\n```typescript\nimport { GeneratorsMapContainer } from '@skmtc/core';\n\nconst generators: GeneratorsMapContainer = {\n  'api-client': {\n    type: 'operation',\n    generatorId: 'api-client',\n    settings: { exportPath: './src/api.ts' },\n    toGenerator: (args) => new ApiClientGenerator(args)\n  },\n  'typescript-models': {\n    type: 'model',\n    generatorId: 'typescript-models',\n    settings: { exportPath: './src/models.ts' },\n    toGenerator: (args) => new TypeScriptModels(args)\n  }\n};\n\n// Use with toArtifacts\nconst result = await toArtifacts({\n  documentObject: openApiDoc,\n  settings: clientSettings,\n  toGeneratorConfigMap: () => generators,\n  traceId: 'generation',\n  spanId: 'main',\n  startAt: Date.now()\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "With enrichments\n```typescript\ntype MyEnrichments = {\n  customValidation: boolean;\n  generateComments: boolean;\n};\n\nconst enrichedGenerators: GeneratorsMapContainer<MyEnrichments> = {\n  'enhanced-models': {\n    type: 'model',\n    generatorId: 'enhanced-models',\n    settings: {\n      exportPath: './src/enhanced.ts',\n      enrichment: {\n        customValidation: true,\n        generateComments: true\n      }\n    },\n    toGenerator: (args) => new EnhancedModelGenerator(args)\n  }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "GeneratorsMap",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "GeneratorConfig",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "EnrichmentType",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "EnrichmentType"
                      }
                    }
                  ],
                  "typeName": "GeneratorConfig"
                }
              },
              {
                "repr": "EnrichmentType",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "EnrichmentType"
                }
              }
            ],
            "typeName": "GeneratorsMap"
          }
        },
        "typeParams": [
          {
            "name": "EnrichmentType",
            "default": {
              "repr": "undefined",
              "kind": "keyword",
              "keyword": "undefined"
            }
          }
        ]
      }
    },
    {
      "name": "Logger",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Logger.ts",
        "line": 9,
        "col": 0,
        "byteIndex": 237
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Logger type alias for SKMTC operations.\n\nRe-exports the @std/log Logger type to maintain public API compatibility\nwhile providing type-safe logging throughout the SKMTC pipeline."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "log.Logger",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": null,
            "typeName": "log.Logger"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ManifestEntry",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
        "line": 78,
        "col": 0,
        "byteIndex": 2480
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "lines",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 79,
                  "col": 2,
                  "byteIndex": 2512
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "characters",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 80,
                  "col": 2,
                  "byteIndex": 2528
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 81,
                  "col": 2,
                  "byteIndex": 2549
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "manifestEntry",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
        "line": 84,
        "col": 13,
        "byteIndex": 2589
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ManifestEntry",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ManifestEntry"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "PreviewItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
        "line": 90,
        "col": 0,
        "byteIndex": 2729
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 91,
                  "col": 2,
                  "byteIndex": 2759
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "exportPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 92,
                  "col": 2,
                  "byteIndex": 2774
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "previewItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
        "line": 95,
        "col": 13,
        "byteIndex": 2809
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "PreviewItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PreviewItem"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ManifestContent",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
        "line": 100,
        "col": 0,
        "byteIndex": 2913
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "deploymentId",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 101,
                  "col": 2,
                  "byteIndex": 2947
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "traceId",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 102,
                  "col": 2,
                  "byteIndex": 2970
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "spanId",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 103,
                  "col": 2,
                  "byteIndex": 2988
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "region",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 104,
                  "col": 2,
                  "byteIndex": 3005
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "files",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 105,
                  "col": 2,
                  "byteIndex": 3023
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "ManifestEntry",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "ManifestEntry"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "previews",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 106,
                  "col": 2,
                  "byteIndex": 3062
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "Record",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "Preview",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Preview"
                              }
                            }
                          ],
                          "typeName": "Record"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "mappings",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 107,
                  "col": 2,
                  "byteIndex": 3114
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "Record",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "Mapping",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "Mapping"
                              }
                            }
                          ],
                          "typeName": "Record"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "results",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 108,
                  "col": 2,
                  "byteIndex": 3167
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ResultsItem",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResultsItem"
                  }
                },
                "typeParams": []
              },
              {
                "name": "startAt",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 109,
                  "col": 2,
                  "byteIndex": 3190
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "endAt",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
                  "line": 110,
                  "col": 2,
                  "byteIndex": 3208
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "manifestContent",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Manifest.ts",
        "line": 113,
        "col": 13,
        "byteIndex": 3238
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ManifestContent",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ManifestContent"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "methodValues",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Method.ts",
        "line": 78,
        "col": 13,
        "byteIndex": 2552
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Array of all valid HTTP methods supported by OpenAPI v3.\n\nThis constant array includes all HTTP methods that can be used\nin OpenAPI path operations, as defined by the OpenAPI specification.\nAll methods are in lowercase to match OpenAPI conventions."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "array",
          "array": {
            "repr": "",
            "kind": "union",
            "union": [
              {
                "repr": "get",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "get"
                }
              },
              {
                "repr": "put",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "put"
                }
              },
              {
                "repr": "post",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "post"
                }
              },
              {
                "repr": "delete",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "delete"
                }
              },
              {
                "repr": "options",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "options"
                }
              },
              {
                "repr": "head",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "head"
                }
              },
              {
                "repr": "patch",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "patch"
                }
              },
              {
                "repr": "trace",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "trace"
                }
              }
            ]
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "methodValuesNoTrace",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Method.ts",
        "line": 95,
        "col": 13,
        "byteIndex": 2891
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Array of HTTP methods excluding TRACE.\n\nThis is a filtered version of {@link methodValues} that excludes the TRACE method,\nwhich is sometimes excluded from API operations for security reasons."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "array",
          "array": {
            "repr": "string",
            "kind": "keyword",
            "keyword": "string"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "method",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Method.ts",
        "line": 120,
        "col": 13,
        "byteIndex": 3571
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating HTTP method strings.\n\nThis union schema validates that a string value is one of the valid\nHTTP methods supported by OpenAPI. Used throughout the codebase for\nruntime validation of method values.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nimport * as v from 'valibot';\nimport { method } from '@skmtc/core';\n\n// Valid method\nconst result1 = v.parse(method, 'get'); // 'get'\n\n// Invalid method throws ValiError\ntry {\n  v.parse(method, 'invalid');\n} catch (error) {\n  console.log('Invalid method');\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.UnionSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "tuple",
                "tuple": [
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "get",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "get"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  },
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "post",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "post"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  },
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "put",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "put"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  },
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "patch",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "patch"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  },
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "delete",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "delete"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  },
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "head",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "head"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  },
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "options",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "options"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  },
                  {
                    "repr": "v.LiteralSchema",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "trace",
                          "kind": "literal",
                          "literal": {
                            "kind": "string",
                            "string": "trace"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ],
                      "typeName": "v.LiteralSchema"
                    }
                  }
                ]
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ],
            "typeName": "v.UnionSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "Method",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Method.ts",
        "line": 168,
        "col": 0,
        "byteIndex": 4848
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "TypeScript type representing valid HTTP methods.\n\nThis union type includes all HTTP methods supported by OpenAPI v3 operations.\nIt's used throughout the codebase for type safety when working with API methods.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nimport { Method } from '@skmtc/core';\n\nfunction processOperation(method: Method, path: string) {\n  switch (method) {\n    case 'get':\n      return handleGet(path);\n    case 'post':\n      return handlePost(path);\n    // ... handle other methods\n    default:\n      // TypeScript ensures exhaustive checking\n      const _exhaustive: never = method;\n      throw new Error(`Unhandled method: ${method}`);\n  }\n}\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "get",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "get"
              }
            },
            {
              "repr": "put",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "put"
              }
            },
            {
              "repr": "post",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "post"
              }
            },
            {
              "repr": "delete",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "delete"
              }
            },
            {
              "repr": "options",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "options"
              }
            },
            {
              "repr": "head",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "head"
              }
            },
            {
              "repr": "patch",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "patch"
              }
            },
            {
              "repr": "trace",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "trace"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "methods",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Method.ts",
        "line": 193,
        "col": 13,
        "byteIndex": 5604
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating arrays of HTTP methods.\n\nThis schema validates that an array contains only valid HTTP method strings.\nUseful for validating configuration objects that specify multiple methods.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nimport * as v from 'valibot';\nimport { methods } from '@skmtc/core';\n\n// Valid methods array\nconst validMethods = v.parse(methods, ['get', 'post', 'put']); // ['get', 'post', 'put']\n\n// Invalid methods array throws ValiError\ntry {\n  v.parse(methods, ['get', 'invalid', 'post']);\n} catch (error) {\n  console.log('Invalid methods in array');\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.ArraySchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "method",
                "kind": "typeQuery",
                "typeQuery": "method"
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ],
            "typeName": "v.ArraySchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "isMethod",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Method.ts",
        "line": 222,
        "col": 13,
        "byteIndex": 6509
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type guard to check if a value is a valid HTTP Method.\n\nThis function uses the Valibot schema to safely determine if an unknown\nvalue is a valid HTTP method string. It's particularly useful when parsing\nuser input or external data.\n",
        "tags": [
          {
            "kind": "param",
            "name": "arg",
            "doc": "- Value to check"
          },
          {
            "kind": "return",
            "doc": "True if the value is a valid Method\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nimport { isMethod } from '@skmtc/core';\n\nfunction handleRequest(methodStr: unknown, path: string) {\n  if (isMethod(methodStr)) {\n    // methodStr is now typed as Method\n    console.log(`Processing ${methodStr.toUpperCase()} ${path}`);\n  } else {\n    throw new Error(`Invalid HTTP method: ${methodStr}`);\n  }\n}\n\nhandleRequest('get', '/users');    // Works\nhandleRequest('invalid', '/users'); // Throws error\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "arg is \u001b[0m\u001b[38;5;12mMethod\u001b[0m",
              "kind": "typePredicate",
              "typePredicate": {
                "asserts": false,
                "param": {
                  "type": "identifier",
                  "name": "arg"
                },
                "type": {
                  "repr": "Method",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Method"
                  }
                }
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "arg",
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "keyword",
                  "keyword": "unknown"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "Modifiers",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Modifiers.ts",
        "line": 66,
        "col": 0,
        "byteIndex": 1743
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type modifiers used throughout the SKMTC type system.\n\n`Modifiers` represent additional metadata and constraints that can be\napplied to type system values. These modifiers affect how types are\ngenerated and used in the target language output.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { Modifiers } from '@skmtc/core';\n\nconst stringModifiers: Modifiers = {\n  required: true,\n  nullable: false,\n  description: 'User email address'\n};\n\nconst optionalModifiers: Modifiers = {\n  required: false,\n  nullable: true,\n  description: 'Optional user profile image URL'\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "In type system values\n```typescript\nconst emailField: TypeSystemString = {\n  type: 'string',\n  format: 'email',\n  enums: undefined,\n  modifiers: {\n    required: true,\n    nullable: false,\n    description: 'Valid email address for account registration'\n  }\n};\n\nconst optionalNote: TypeSystemString = {\n  type: 'string',\n  format: undefined,\n  enums: undefined,\n  modifiers: {\n    required: false,\n    nullable: true,\n    description: 'Optional user note or comment'\n  }\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "TypeScript generation\n```typescript\nfunction generateTypeScript(type: TypeSystemValue): string {\n  const baseType = generateBaseType(type);\n  const optional = !type.modifiers.required ? '?' : '';\n  const nullable = type.modifiers.nullable ? ' | null' : '';\n\n  return `${baseType}${nullable}${optional}`;\n}\n\n// Required non-null string: 'string'\n// Optional non-null string: 'string?'\n// Required nullable string: 'string | null'\n// Optional nullable string: 'string | null?'\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Whether the field is required (affects optional markers in generated types)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Modifiers.ts",
                  "line": 68,
                  "col": 2,
                  "byteIndex": 1856
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "description",
                "jsDoc": {
                  "doc": "Human-readable description of the field (used in documentation)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Modifiers.ts",
                  "line": 70,
                  "col": 2,
                  "byteIndex": 1950
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "nullable",
                "jsDoc": {
                  "doc": "Whether the field can be null (affects null union types)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Modifiers.ts",
                  "line": 72,
                  "col": 2,
                  "byteIndex": 2039
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "moduleExport",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/ModuleExport.ts",
        "line": 39,
        "col": 13,
        "byteIndex": 1220
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating module export configuration objects.\n\nThis schema validates module export structures used throughout the SKMTC\ncode generation pipeline. Module exports define how generated code modules\nare exposed and imported, specifying both the export name and the file path\nwhere the export can be found.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Validating a basic module export\n```typescript\nimport { moduleExport } from '@skmtc/core/types';\nimport * as v from 'valibot';\n\nconst config = {\n  exportName: 'UserApi',\n  exportPath: './generated/UserApi.ts'\n};\n\nconst validated = v.parse(moduleExport, config);\nconsole.log(validated.exportName); // 'UserApi'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Validating multiple exports\n```typescript\nconst exports = [\n  { exportName: 'createUser', exportPath: './api/users.ts' },\n  { exportName: 'updateUser', exportPath: './api/users.ts' },\n  { exportName: 'UserModel', exportPath: './models/User.ts' }\n];\n\nexports.forEach(exp => {\n  const validated = v.parse(moduleExport, exp);\n  console.log(`Export: ${validated.exportName} from ${validated.exportPath}`);\n});\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ModuleExport",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ModuleExport"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ModuleExport",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/ModuleExport.ts",
        "line": 136,
        "col": 0,
        "byteIndex": 4015
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration object for module exports in the SKMTC pipeline.\n\nThis type defines the structure for describing how generated code modules\nshould be exported and made available for import. It's used throughout\nthe SKMTC system for organizing generated code, managing dependencies,\nand creating proper import/export relationships between generated files.\n\n## Usage in SKMTC Pipeline\n\nThis type is used by:\n- Code generators to define export configurations\n- File processors to organize generated modules\n- Import managers to resolve module dependencies\n- Build systems to understand code structure\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic module export definition\n```typescript\nimport type { ModuleExport } from '@skmtc/core/types';\n\nconst apiExport: ModuleExport = {\n  exportName: 'UserApiClient',\n  exportPath: './generated/api/UserApiClient.ts'\n};\n\nconsole.log(`Import ${apiExport.exportName} from '${apiExport.exportPath}'`);\n// Import UserApiClient from './generated/api/UserApiClient.ts'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Function export configuration\n```typescript\nconst functionExport: ModuleExport = {\n  exportName: 'validateUserData',\n  exportPath: './generated/validators/userValidation.ts'\n};\n\n// Used to generate: export { validateUserData } from './generated/validators/userValidation.ts'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Type export configuration\n```typescript\nconst typeExport: ModuleExport = {\n  exportName: 'UserType',\n  exportPath: './generated/types/User.ts'\n};\n\n// Used to generate: export type { UserType } from './generated/types/User.ts'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Multiple exports from same file\n```typescript\nconst userModuleExports: ModuleExport[] = [\n  {\n    exportName: 'User',\n    exportPath: './generated/models/User.ts'\n  },\n  {\n    exportName: 'UserValidator',\n    exportPath: './generated/models/User.ts'\n  },\n  {\n    exportName: 'createUser',\n    exportPath: './generated/models/User.ts'\n  }\n];\n\n// All exports reference the same file but different symbols\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with build systems\n```typescript\nclass ModuleRegistry {\n  private exports: ModuleExport[] = [];\n\n  addExport(moduleExport: ModuleExport) {\n    this.exports.push(moduleExport);\n  }\n\n  generateIndexFile(): string {\n    return this.exports\n      .map(exp => `export { ${exp.exportName} } from '${exp.exportPath}';`)\n      .join('\\n');\n  }\n}\n\nconst registry = new ModuleRegistry();\nregistry.addExport({\n  exportName: 'ApiClient',\n  exportPath: './api/client.ts'\n});\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "exportName",
                "jsDoc": {
                  "doc": "The name of the symbol being exported (function, class, type, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/ModuleExport.ts",
                  "line": 138,
                  "col": 2,
                  "byteIndex": 4123
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "exportPath",
                "jsDoc": {
                  "doc": "The file path where the export can be found"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/ModuleExport.ts",
                  "line": 140,
                  "col": 2,
                  "byteIndex": 4197
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "PrettierConfigType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
        "line": 78,
        "col": 0,
        "byteIndex": 2392
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "printWidth",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 79,
                  "col": 2,
                  "byteIndex": 2429
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "tabWidth",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 80,
                  "col": 2,
                  "byteIndex": 2451
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "useTabs",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 81,
                  "col": 2,
                  "byteIndex": 2471
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "semi",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 82,
                  "col": 2,
                  "byteIndex": 2491
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "singleQuote",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 83,
                  "col": 2,
                  "byteIndex": 2508
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "quoteProps",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 84,
                  "col": 2,
                  "byteIndex": 2532
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "as-needed",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "as-needed"
                      }
                    },
                    {
                      "repr": "consistent",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "consistent"
                      }
                    },
                    {
                      "repr": "preserve",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "preserve"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "jsxSingleQuote",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 85,
                  "col": 2,
                  "byteIndex": 2587
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "trailingComma",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 86,
                  "col": 2,
                  "byteIndex": 2614
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "none",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "none"
                      }
                    },
                    {
                      "repr": "es5",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "es5"
                      }
                    },
                    {
                      "repr": "all",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "all"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "bracketSameLine",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 87,
                  "col": 2,
                  "byteIndex": 2655
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "bracketSpacing",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 88,
                  "col": 2,
                  "byteIndex": 2683
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "jsxBracketSameLine",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 89,
                  "col": 2,
                  "byteIndex": 2710
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "arrowParens",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 90,
                  "col": 2,
                  "byteIndex": 2741
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "avoid",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "avoid"
                      }
                    },
                    {
                      "repr": "always",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "always"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "rangeStart",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 91,
                  "col": 2,
                  "byteIndex": 2776
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "rangeEnd",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 92,
                  "col": 2,
                  "byteIndex": 2798
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                },
                "typeParams": []
              },
              {
                "name": "requirePragma",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 93,
                  "col": 2,
                  "byteIndex": 2818
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "insertPragma",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 94,
                  "col": 2,
                  "byteIndex": 2844
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "proseWrap",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 95,
                  "col": 2,
                  "byteIndex": 2869
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "always",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "always"
                      }
                    },
                    {
                      "repr": "never",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "never"
                      }
                    },
                    {
                      "repr": "preserve",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "preserve"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "htmlWhitespaceSensitivity",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 96,
                  "col": 2,
                  "byteIndex": 2915
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "css",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "css"
                      }
                    },
                    {
                      "repr": "strict",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "strict"
                      }
                    },
                    {
                      "repr": "ignore",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "ignore"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "vueIndentScriptAndStyle",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 97,
                  "col": 2,
                  "byteIndex": 2973
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              },
              {
                "name": "endOfLine",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 98,
                  "col": 2,
                  "byteIndex": 3009
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "auto",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "auto"
                      }
                    },
                    {
                      "repr": "lf",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "lf"
                      }
                    },
                    {
                      "repr": "crlf",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "crlf"
                      }
                    },
                    {
                      "repr": "cr",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "cr"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "embeddedLanguageFormatting",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 99,
                  "col": 2,
                  "byteIndex": 3053
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "auto",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "auto"
                      }
                    },
                    {
                      "repr": "off",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "off"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "singleAttributePerLine",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
                  "line": 100,
                  "col": 2,
                  "byteIndex": 3099
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "prettierConfigType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/PrettierConfig.ts",
        "line": 103,
        "col": 13,
        "byteIndex": 3148
      },
      "declarationKind": "export",
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "PrettierConfigType",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PrettierConfigType"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "OperationSource",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 80,
        "col": 0,
        "byteIndex": 2481
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 81,
                  "col": 2,
                  "byteIndex": 2515
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "operation",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "operation"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorId",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 82,
                  "col": 2,
                  "byteIndex": 2535
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "operationPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 83,
                  "col": 2,
                  "byteIndex": 2557
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "operationMethod",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 84,
                  "col": 2,
                  "byteIndex": 2581
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Method",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Method"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ModelSource",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 87,
        "col": 0,
        "byteIndex": 2608
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 88,
                  "col": 2,
                  "byteIndex": 2638
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "model",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "model"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorId",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 89,
                  "col": 2,
                  "byteIndex": 2654
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "refName",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 90,
                  "col": 2,
                  "byteIndex": 2676
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "PreviewGroup",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 93,
        "col": 0,
        "byteIndex": 2695
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "forms",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "forms"
              }
            },
            {
              "repr": "tables",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "tables"
              }
            },
            {
              "repr": "inputs",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "inputs"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "PreviewModule",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 95,
        "col": 0,
        "byteIndex": 2753
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 96,
                  "col": 2,
                  "byteIndex": 2785
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "exportPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 97,
                  "col": 2,
                  "byteIndex": 2800
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "group",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 98,
                  "col": 2,
                  "byteIndex": 2821
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "PreviewGroup",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PreviewGroup"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "MappingModule",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 101,
        "col": 0,
        "byteIndex": 2844
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 102,
                  "col": 2,
                  "byteIndex": 2876
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "exportPath",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 103,
                  "col": 2,
                  "byteIndex": 2891
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "group",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 104,
                  "col": 2,
                  "byteIndex": 2912
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "PreviewGroup",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PreviewGroup"
                  }
                },
                "typeParams": []
              },
              {
                "name": "itemType",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 105,
                  "col": 2,
                  "byteIndex": 2934
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "input",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "input"
                      }
                    },
                    {
                      "repr": "formatter",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "formatter"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 106,
                  "col": 2,
                  "byteIndex": 2968
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "Preview",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 109,
        "col": 0,
        "byteIndex": 2986
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "module",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 110,
                  "col": 2,
                  "byteIndex": 3012
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "PreviewModule",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "PreviewModule"
                  }
                },
                "typeParams": []
              },
              {
                "name": "source",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 111,
                  "col": 2,
                  "byteIndex": 3036
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OperationSource",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OperationSource"
                      }
                    },
                    {
                      "repr": "ModelSource",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ModelSource"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "Mapping",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 114,
        "col": 0,
        "byteIndex": 3077
      },
      "declarationKind": "export",
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "module",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 115,
                  "col": 2,
                  "byteIndex": 3103
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "MappingModule",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "MappingModule"
                  }
                },
                "typeParams": []
              },
              {
                "name": "source",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                  "line": 116,
                  "col": 2,
                  "byteIndex": 3127
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "OperationSource",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "OperationSource"
                      }
                    },
                    {
                      "repr": "ModelSource",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "ModelSource"
                      }
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "operationSource",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 125,
        "col": 13,
        "byteIndex": 3371
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating operation source objects.\n\nValidates operation source structures including type, generator ID,\noperation path, and HTTP method information."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.ObjectSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "type",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                        "line": 127,
                        "col": 4,
                        "byteIndex": 3412
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "v.LiteralSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "operation",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "operation"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ],
                          "typeName": "v.LiteralSchema"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "generatorId",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                        "line": 128,
                        "col": 4,
                        "byteIndex": 3471
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "v.StringSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ],
                          "typeName": "v.StringSchema"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "operationPath",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                        "line": 129,
                        "col": 4,
                        "byteIndex": 3523
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "v.StringSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ],
                          "typeName": "v.StringSchema"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "operationMethod",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                        "line": 130,
                        "col": 4,
                        "byteIndex": 3577
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "v.UnionSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "tuple",
                              "tuple": [
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "get",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "get"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                },
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "post",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "post"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                },
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "put",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "put"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                },
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "patch",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "patch"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                },
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "delete",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "delete"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                },
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "head",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "head"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                },
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "options",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "options"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                },
                                {
                                  "repr": "v.LiteralSchema",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": [
                                      {
                                        "repr": "trace",
                                        "kind": "literal",
                                        "literal": {
                                          "kind": "string",
                                          "string": "trace"
                                        }
                                      },
                                      {
                                        "repr": "undefined",
                                        "kind": "keyword",
                                        "keyword": "undefined"
                                      }
                                    ],
                                    "typeName": "v.LiteralSchema"
                                  }
                                }
                              ]
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ],
                          "typeName": "v.UnionSchema"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ],
            "typeName": "v.ObjectSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "modelSource",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 158,
        "col": 13,
        "byteIndex": 4345
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating model source objects.\n\nValidates model source structures including type, generator ID,\nand reference name information."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.ObjectSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "typeLiteral",
                "typeLiteral": {
                  "constructors": [],
                  "methods": [],
                  "properties": [
                    {
                      "name": "type",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                        "line": 160,
                        "col": 4,
                        "byteIndex": 4382
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "v.LiteralSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "model",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "model"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ],
                          "typeName": "v.LiteralSchema"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "generatorId",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                        "line": 161,
                        "col": 4,
                        "byteIndex": 4437
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "v.StringSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ],
                          "typeName": "v.StringSchema"
                        }
                      },
                      "typeParams": []
                    },
                    {
                      "name": "refName",
                      "location": {
                        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
                        "line": 162,
                        "col": 4,
                        "byteIndex": 4489
                      },
                      "params": [],
                      "readonly": true,
                      "computed": false,
                      "optional": false,
                      "tsType": {
                        "repr": "v.StringSchema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ],
                          "typeName": "v.StringSchema"
                        }
                      },
                      "typeParams": []
                    }
                  ],
                  "callSignatures": [],
                  "indexSignatures": []
                }
              },
              {
                "repr": "undefined",
                "kind": "keyword",
                "keyword": "undefined"
              }
            ],
            "typeName": "v.ObjectSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "previewGroup",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 176,
        "col": 13,
        "byteIndex": 4785
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating preview group values.\n\nValidates preview group categories for UI organization."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "PreviewGroup",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PreviewGroup"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "previewModule",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 183,
        "col": 13,
        "byteIndex": 5036
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating preview module objects.\n\nValidates preview module structures including group, title, and description."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "PreviewModule",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "PreviewModule"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "mappingModule",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 194,
        "col": 13,
        "byteIndex": 5320
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating mapping module objects.\n\nValidates mapping module structures for file relationship tracking."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "MappingModule",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "MappingModule"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "preview",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 210,
        "col": 13,
        "byteIndex": 5828
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating preview objects.\n\nValidates complete preview structures including module and source information."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "Preview",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Preview"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "mapping",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Preview.ts",
        "line": 220,
        "col": 13,
        "byteIndex": 6078
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating mapping objects.\n\nValidates complete mapping structures including module and source information."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "Mapping",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Mapping"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "RefName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/RefName.ts",
        "line": 135,
        "col": 0,
        "byteIndex": 4536
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Branded type representing a reference name for OpenAPI schemas.\n\n`RefName` is a branded string type that ensures type safety when working\nwith schema reference names throughout the SKMTC system. It prevents\naccidental mixing of regular strings with schema reference identifiers.\n\nReference names typically correspond to keys in the OpenAPI `components.schemas`\nsection and are used to create cross-references between different parts\nof the schema definition.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nimport { RefName } from '@skmtc/core';\n\n// RefName is extracted from OpenAPI schema references\nconst userRefName: RefName = 'User' as RefName;\nconst productRefName: RefName = 'Product' as RefName;\n\n// Used in schema references\nconst userRef = new OasRef({\n  refName: userRefName, // Type-safe reference name\n  ref: '#/components/schemas/User'\n});\n```\n"
          },
          {
            "kind": "example",
            "doc": "In generator contexts\n```typescript\nclass ModelGenerator extends ModelBase {\n  constructor(args: { refName: RefName; ... }) {\n    super(args);\n    // this.refName is guaranteed to be a valid schema reference\n  }\n\n  toDefinition(): Definition {\n    // RefName ensures we're working with valid schema identifiers\n    const schemaName = this.refName; // Type: RefName\n    return new Definition({\n      identifier: Identifier.createType(schemaName),\n      // ...\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Type safety benefits\n```typescript\nfunction processSchema(refName: RefName) {\n  // RefName brand ensures this is a valid schema reference\n  console.log(`Processing schema: ${refName}`);\n}\n\nconst validRef: RefName = 'User' as RefName;\nconst regularString = 'just a string';\n\nprocessSchema(validRef);     // ✅ Works - RefName type\nprocessSchema(regularString); // ❌ TypeScript error - string is not RefName\n```\n"
          },
          {
            "kind": "see",
            "doc": "{@link Brand} for the underlying branding mechanism"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Brand",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "RefName",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "RefName"
                }
              }
            ],
            "typeName": "Brand"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ResultType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Results.ts",
        "line": 107,
        "col": 0,
        "byteIndex": 3167
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type representing the possible outcomes of SKMTC processing operations.\n\nUsed throughout the SKMTC pipeline to track and categorize the results\nof parsing, generation, and rendering operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "success",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "success"
              }
            },
            {
              "repr": "warning",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "warning"
              }
            },
            {
              "repr": "error",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "error"
              }
            },
            {
              "repr": "skipped",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "skipped"
              }
            },
            {
              "repr": "notSupported",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "notSupported"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "WarningError",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Results.ts",
        "line": 115,
        "col": 0,
        "byteIndex": 3462
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type representing result types that indicate issues or problems.\n\nUsed for filtering and handling results that require attention,\nexcluding successful, skipped, or unsupported operations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "warning",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "warning"
              }
            },
            {
              "repr": "error",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "error"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "resultType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Results.ts",
        "line": 123,
        "col": 13,
        "byteIndex": 3715
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating ResultType values.\n\nUsed for runtime validation of result type values throughout\nthe SKMTC pipeline to ensure type safety and data integrity."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ResultType",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ResultType"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ResultsItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Results.ts",
        "line": 138,
        "col": 0,
        "byteIndex": 4132
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Interface representing a hierarchical results structure.\n\nAllows for nested result tracking where each key can contain\na result type, another results item (for nesting), or an array\nof results items for collections."
      },
      "kind": "interface",
      "interfaceDef": {
        "extends": [],
        "constructors": [],
        "methods": [],
        "properties": [],
        "callSignatures": [],
        "indexSignatures": [
          {
            "jsDoc": {
              "doc": "Dynamic key-value pairs for hierarchical result tracking"
            },
            "readonly": false,
            "params": [
              {
                "kind": "identifier",
                "name": "key",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "ResultType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResultType"
                  }
                },
                {
                  "repr": "ResultsItem",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ResultsItem"
                  }
                },
                {
                  "repr": "Array",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "union",
                        "union": [
                          {
                            "repr": "ResultsItem",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "ResultsItem"
                            }
                          },
                          {
                            "repr": "null",
                            "kind": "keyword",
                            "keyword": "null"
                          }
                        ]
                      }
                    ],
                    "typeName": "Array"
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Results.ts",
              "line": 140,
              "col": 2,
              "byteIndex": 4231
            }
          }
        ],
        "typeParams": []
      }
    },
    {
      "name": "resultsItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Results.ts",
        "line": 149,
        "col": 13,
        "byteIndex": 4505
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating ResultsItem structures.\n\nUses lazy evaluation to handle recursive result item validation,\nsupporting nested hierarchical result structures."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ResultsItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ResultsItem"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "modulePackage",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 59,
        "col": 13,
        "byteIndex": 1710
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for {@link ModulePackage}."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ModulePackage",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ModulePackage"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ModulePackage",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 84,
        "col": 0,
        "byteIndex": 2321
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for a module package in the generation output.\n\nModule packages allow organizing generated code into separate npm packages\nor modules with custom root paths and naming conventions.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst packages: ModulePackage[] = [\n  {\n    rootPath: './packages/api-client',\n    moduleName: '@myorg/api-client'\n  },\n  {\n    rootPath: './packages/types',\n    moduleName: '@myorg/api-types'\n  }\n];\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "rootPath",
                "jsDoc": {
                  "doc": "The root file system path for this package"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 86,
                  "col": 2,
                  "byteIndex": 2405
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "moduleName",
                "jsDoc": {
                  "doc": "Optional module name for package.json or imports"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 88,
                  "col": 2,
                  "byteIndex": 2482
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "skipPaths",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 96,
        "col": 13,
        "byteIndex": 2661
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating skip paths configuration.\n\nValidates path-to-methods mappings for skipping specific operations."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "SkipPaths",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SkipPaths"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "skipOperations",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 103,
        "col": 13,
        "byteIndex": 2913
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating skip operations configuration.\n\nValidates generator-to-skip-paths mappings for skipping operations by generator."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "SkipOperations",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SkipOperations"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "skipModels",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 110,
        "col": 13,
        "byteIndex": 3158
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating skip models configuration.\n\nValidates generator-to-model-names mappings for skipping specific models."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "SkipModels",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SkipModels"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "clientSettings",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 120,
        "col": 13,
        "byteIndex": 3544
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating client settings configuration.\n\nValidates the complete client settings structure including base paths,\npackages, skip configurations, and enrichments."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "ClientSettings",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "ClientSettings"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "SkipPaths",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 141,
        "col": 0,
        "byteIndex": 4103
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for skipping specific HTTP methods on API paths.\n\nMaps path patterns to arrays of HTTP methods that should be excluded\nfrom generation.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst skipPaths: SkipPaths = {\n  '/admin/**': ['get', 'post'],\n  '/debug': ['*']  // Skip all methods\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "Method",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Method"
                  }
                }
              }
            ],
            "typeName": "Record"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "SkipModels",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 156,
        "col": 0,
        "byteIndex": 4505
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for skipping model generation by generator type.\n\nMaps generator keys to arrays of model names that should be excluded.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst skipModels: SkipModels = {\n  'typescript-models': ['InternalModel', 'DebugInfo'],\n  'validation': ['TempModel*']  // Supports glob patterns\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeName": "Record"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "SkipOperations",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 174,
        "col": 0,
        "byteIndex": 4927
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for skipping operation generation by generator type.\n\nMaps generator keys to {@link SkipPaths} configurations for excluding\nspecific operations from generation.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst skipOperations: SkipOperations = {\n  'api-client': {\n    '/internal/**': ['*'],\n    '/admin': ['delete']\n  }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "Record",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              {
                "repr": "SkipPaths",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SkipPaths"
                }
              }
            ],
            "typeName": "Record"
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "Skip",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 182,
        "col": 0,
        "byteIndex": 5176
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing different skip configurations.\n\nCan be either operation-specific skipping, model-specific skipping,\nor a simple string pattern for broad exclusions."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "SkipOperations",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "SkipOperations"
              }
            },
            {
              "repr": "SkipModels",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "SkipModels"
              }
            },
            {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ClientSettings",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 235,
        "col": 0,
        "byteIndex": 6439
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Main configuration object for SKMTC client settings.\n\nControls various aspects of code generation including output paths,\npackage organization, enrichments, and selective skipping of content.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic configuration\n```typescript\nconst settings: ClientSettings = {\n  basePath: './src/generated',\n  skip: [\n    'InternalModel',  // Skip specific model\n    {\n      'api-client': {\n        '/admin/**': ['*']  // Skip all admin operations\n      }\n    }\n  ]\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Advanced configuration with packages\n```typescript\nconst settings: ClientSettings = {\n  basePath: './generated',\n  packages: [\n    {\n      rootPath: './packages/client',\n      moduleName: '@company/api-client'\n    },\n    {\n      rootPath: './packages/types',\n      moduleName: '@company/api-types'\n    }\n  ],\n  enrichments: {\n    models: customModelEnrichments,\n    operations: customOperationEnrichments\n  },\n  skip: [\n    {\n      'models': ['Internal*', 'Debug*'],\n      'operations': {\n        '/health': ['get'],\n        '/metrics/**': ['*']\n      }\n    }\n  ]\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "basePath",
                "jsDoc": {
                  "doc": "Base output path for generated files"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 237,
                  "col": 2,
                  "byteIndex": 6518
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "packages",
                "jsDoc": {
                  "doc": "Array of module package configurations"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 239,
                  "col": 2,
                  "byteIndex": 6586
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "ModulePackage",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "ModulePackage"
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "enrichments",
                "jsDoc": {
                  "doc": "Custom enrichments for extending generation"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 241,
                  "col": 2,
                  "byteIndex": 6668
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorEnrichments",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorEnrichments"
                  }
                },
                "typeParams": []
              },
              {
                "name": "skip",
                "jsDoc": {
                  "doc": "Array of skip configurations to exclude content"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 243,
                  "col": 2,
                  "byteIndex": 6762
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "Skip",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Skip"
                    }
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "SkmtcClientConfig",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 252,
        "col": 0,
        "byteIndex": 6981
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Configuration for SKMTC client with optional project identification.\n\nExtends client settings with an optional project key for multi-project\nenvironments or organizational contexts."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "projectKey",
                "jsDoc": {
                  "doc": "Optional project identifier for organizational contexts"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 254,
                  "col": 2,
                  "byteIndex": 7082
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "settings",
                "jsDoc": {
                  "doc": "Client settings for customizing generation behavior"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
                  "line": 256,
                  "col": 2,
                  "byteIndex": 7165
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ClientSettings",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ClientSettings"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "skmtcClientConfig",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/Settings.ts",
        "line": 265,
        "col": 13,
        "byteIndex": 7382
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Valibot schema for validating SKMTC client configuration.\n\nValidates the complete client configuration including project key\nand client settings structure."
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "v.GenericSchema",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "SkmtcClientConfig",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "SkmtcClientConfig"
                }
              }
            ],
            "typeName": "v.GenericSchema"
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "TypeSystemValue",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 66,
        "col": 0,
        "byteIndex": 2191
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing all possible type system values in the SKMTC code generation system.\n\nThe `TypeSystemValue` represents the normalized intermediate representation used by SKMTC\nto convert OpenAPI schemas into target language types. This type system abstracts away\nOpenAPI-specific details and provides a consistent interface for generating code in\ndifferent target languages and frameworks.\n\n## Type Categories\n\n- **Primitive Types**: `string`, `number`, `integer`, `boolean`, `null`\n- **Complex Types**: `array`, `object`, `union`\n- **Special Types**: `void`, `never`, `unknown`, `custom`\n- **Reference Types**: `ref` for schema references\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Discriminated union usage\n```typescript\nimport { TypeSystemValue } from '@skmtc/core';\n\nfunction processType(type: TypeSystemValue): string {\n  switch (type.type) {\n    case 'string':\n      return `string${type.modifiers.optional ? '?' : ''}`;\n    case 'array':\n      return `${processType(type.items)}[]`;\n    case 'object':\n      return 'object';\n    case 'ref':\n      return type.name;\n    default:\n      return type.type;\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "In generator contexts\n```typescript\nclass TypeScriptGenerator {\n  generateType(typeValue: TypeSystemValue): string {\n    if (typeValue.type === 'union') {\n      return typeValue.members\n        .map(member => this.generateType(member))\n        .join(' | ');\n    }\n\n    if (typeValue.type === 'array') {\n      return `${this.generateType(typeValue.items)}[]`;\n    }\n\n    // Handle other types...\n    return typeValue.type;\n  }\n}\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "TypeSystemArray",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemArray"
              }
            },
            {
              "repr": "TypeSystemObject",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemObject"
              }
            },
            {
              "repr": "TypeSystemUnion",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemUnion"
              }
            },
            {
              "repr": "TypeSystemString",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemString"
              }
            },
            {
              "repr": "TypeSystemNumber",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemNumber"
              }
            },
            {
              "repr": "TypeSystemInteger",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemInteger"
              }
            },
            {
              "repr": "TypeSystemBoolean",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemBoolean"
              }
            },
            {
              "repr": "TypeSystemUnknown",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemUnknown"
              }
            },
            {
              "repr": "TypeSystemVoid",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemVoid"
              }
            },
            {
              "repr": "TypeSystemNever",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemNever"
              }
            },
            {
              "repr": "TypeSystemRef",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemRef"
              }
            },
            {
              "repr": "TypeSystemNull",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemNull"
              }
            },
            {
              "repr": "TypeSystemCustom",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "TypeSystemCustom"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemRef",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 98,
        "col": 0,
        "byteIndex": 2965
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of a reference to another schema.\n\n`TypeSystemRef` represents references to other schemas, typically used for\ncomplex types that are defined elsewhere in the schema and referenced\nthrough `$ref` in OpenAPI specifications.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst userRef: TypeSystemRef = {\n  type: 'ref',\n  name: 'User',\n  modifiers: { optional: false, nullable: false },\n  generatorKey: 'model|User'\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the reference type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 100,
                  "col": 2,
                  "byteIndex": 3043
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "ref",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "ref"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "jsDoc": {
                  "doc": "The name of the referenced schema"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 102,
                  "col": 2,
                  "byteIndex": 3100
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 104,
                  "col": 2,
                  "byteIndex": 3166
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 106,
                  "col": 2,
                  "byteIndex": 3243
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemCustom",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 125,
        "col": 0,
        "byteIndex": 3748
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation for custom, generator-specific types.\n\n`TypeSystemCustom` allows generators to inject custom type representations\nthat don't fit into standard OpenAPI types. The value is a `Stringable`\nthat will be rendered directly in the generated code.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst customType: TypeSystemCustom = {\n  type: 'custom',\n  value: 'React.ReactNode',\n  generatorKey: 'react-component|Button'\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the custom type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 127,
                  "col": 2,
                  "byteIndex": 3826
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "custom",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "custom"
                  }
                },
                "typeParams": []
              },
              {
                "name": "value",
                "jsDoc": {
                  "doc": "The custom type value to be rendered"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 129,
                  "col": 2,
                  "byteIndex": 3889
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Stringable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Stringable"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 131,
                  "col": 2,
                  "byteIndex": 3963
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemArray",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 146,
        "col": 0,
        "byteIndex": 4290
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of array types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst stringArray: TypeSystemArray = {\n  type: 'array',\n  items: { type: 'string', modifiers: { optional: false, nullable: false } },\n  modifiers: { optional: false, nullable: false }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the array type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 148,
                  "col": 2,
                  "byteIndex": 4366
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "array",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "array"
                  }
                },
                "typeParams": []
              },
              {
                "name": "items",
                "jsDoc": {
                  "doc": "The type of items in the array"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 150,
                  "col": 2,
                  "byteIndex": 4422
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "TypeSystemValue",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "TypeSystemValue"
                  }
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 152,
                  "col": 2,
                  "byteIndex": 4498
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 154,
                  "col": 2,
                  "byteIndex": 4575
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemNumber",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 168,
        "col": 0,
        "byteIndex": 4837
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of floating-point number types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst priceType: TypeSystemNumber = {\n  type: 'number',\n  modifiers: { optional: false, nullable: false }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the number type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 170,
                  "col": 2,
                  "byteIndex": 4915
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "number"
                  }
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 172,
                  "col": 2,
                  "byteIndex": 4983
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 174,
                  "col": 2,
                  "byteIndex": 5060
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemVoid",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 187,
        "col": 0,
        "byteIndex": 5257
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of void types (no value).\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst voidType: TypeSystemVoid = {\n  type: 'void'\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the void type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 189,
                  "col": 2,
                  "byteIndex": 5331
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "void",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "void"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 191,
                  "col": 2,
                  "byteIndex": 5400
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemNever",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 204,
        "col": 0,
        "byteIndex": 5610
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of never types (impossible values).\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst neverType: TypeSystemNever = {\n  type: 'never'\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the never type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 206,
                  "col": 2,
                  "byteIndex": 5686
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "never",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "never"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 208,
                  "col": 2,
                  "byteIndex": 5756
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemInteger",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 222,
        "col": 0,
        "byteIndex": 6013
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of integer number types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst countType: TypeSystemInteger = {\n  type: 'integer',\n  modifiers: { optional: false, nullable: false }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the integer type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 224,
                  "col": 2,
                  "byteIndex": 6093
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "integer",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "integer"
                  }
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 226,
                  "col": 2,
                  "byteIndex": 6162
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 228,
                  "col": 2,
                  "byteIndex": 6239
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemBoolean",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 242,
        "col": 0,
        "byteIndex": 6488
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of boolean types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst flagType: TypeSystemBoolean = {\n  type: 'boolean',\n  modifiers: { optional: false, nullable: false }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the boolean type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 244,
                  "col": 2,
                  "byteIndex": 6568
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "boolean"
                  }
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 246,
                  "col": 2,
                  "byteIndex": 6637
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 248,
                  "col": 2,
                  "byteIndex": 6714
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemUnknown",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 261,
        "col": 0,
        "byteIndex": 6912
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of unknown types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst unknownType: TypeSystemUnknown = {\n  type: 'unknown'\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the unknown type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 263,
                  "col": 2,
                  "byteIndex": 6992
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "unknown",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "unknown"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 265,
                  "col": 2,
                  "byteIndex": 7064
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemNull",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 278,
        "col": 0,
        "byteIndex": 7250
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of null types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst nullType: TypeSystemNull = {\n  type: 'null'\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the null type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 280,
                  "col": 2,
                  "byteIndex": 7324
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "null",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "null"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 282,
                  "col": 2,
                  "byteIndex": 7393
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemRecord",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 295,
        "col": 0,
        "byteIndex": 7668
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of record types (key-value mappings).\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst recordType: TypeSystemRecord = {\n  value: { type: 'string', modifiers: { optional: false, nullable: false } }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "value",
                "jsDoc": {
                  "doc": "The type of values in the record, or 'true' for any value"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 297,
                  "col": 2,
                  "byteIndex": 7770
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "TypeSystemValue",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TypeSystemValue"
                      }
                    },
                    {
                      "repr": "true",
                      "kind": "literal",
                      "literal": {
                        "kind": "string",
                        "string": "true"
                      }
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 299,
                  "col": 2,
                  "byteIndex": 7858
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemObjectProperties",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 315,
        "col": 0,
        "byteIndex": 8236
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of object properties.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst objectProps: TypeSystemObjectProperties = {\n  properties: {\n    name: { type: 'string', modifiers: { optional: false, nullable: false } },\n    age: { type: 'integer', modifiers: { optional: true, nullable: false } }\n  }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "properties",
                "jsDoc": {
                  "doc": "Map of property names to their types"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 317,
                  "col": 2,
                  "byteIndex": 8327
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "TypeSystemValue",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TypeSystemValue"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 319,
                  "col": 2,
                  "byteIndex": 8427
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemString",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 342,
        "col": 0,
        "byteIndex": 8918
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of string types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst emailString: TypeSystemString = {\n  type: 'string',\n  format: 'email',\n  enums: undefined,\n  modifiers: { optional: false, nullable: false }\n};\n\nconst statusEnum: TypeSystemString = {\n  type: 'string',\n  format: undefined,\n  enums: ['active', 'inactive', 'pending'],\n  modifiers: { optional: false, nullable: false }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the string type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 344,
                  "col": 2,
                  "byteIndex": 8996
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "string"
                  }
                },
                "typeParams": []
              },
              {
                "name": "format",
                "jsDoc": {
                  "doc": "String format specification (email, uuid, date-time, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 346,
                  "col": 2,
                  "byteIndex": 9081
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "enums",
                "jsDoc": {
                  "doc": "Array of allowed enum values"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 348,
                  "col": 2,
                  "byteIndex": 9148
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      }
                    },
                    {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "string",
                              "kind": "keyword",
                              "keyword": "string"
                            },
                            {
                              "repr": "null",
                              "kind": "keyword",
                              "keyword": "null"
                            }
                          ]
                        }
                      }
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 350,
                  "col": 2,
                  "byteIndex": 9249
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 352,
                  "col": 2,
                  "byteIndex": 9326
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemUnion",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 378,
        "col": 0,
        "byteIndex": 9989
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of union types.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nconst stringOrNumber: TypeSystemUnion = {\n  type: 'union',\n  members: [\n    { type: 'string', modifiers: { optional: false, nullable: false } },\n    { type: 'number', modifiers: { optional: false, nullable: false } }\n  ],\n  discriminator: undefined,\n  modifiers: { optional: false, nullable: false }\n};\n\nconst discriminatedUnion: TypeSystemUnion = {\n  type: 'union',\n  members: [userType, adminType, guestType],\n  discriminator: 'type',\n  modifiers: { optional: false, nullable: false }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the union type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 380,
                  "col": 2,
                  "byteIndex": 10065
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "union",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "union"
                  }
                },
                "typeParams": []
              },
              {
                "name": "members",
                "jsDoc": {
                  "doc": "Array of types that are part of the union"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 382,
                  "col": 2,
                  "byteIndex": 10132
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "TypeSystemValue",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TypeSystemValue"
                    }
                  }
                },
                "typeParams": []
              },
              {
                "name": "discriminator",
                "jsDoc": {
                  "doc": "Optional discriminator property name for tagged unions"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 384,
                  "col": 2,
                  "byteIndex": 10225
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 386,
                  "col": 2,
                  "byteIndex": 10312
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 388,
                  "col": 2,
                  "byteIndex": 10389
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "TypeSystemObject",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 425,
        "col": 0,
        "byteIndex": 11455
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type system representation of object types.\n\nObjects can have either fixed properties (objectProperties) or\ndynamic key-value pairs (recordProperties), or both.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Fixed properties object\n```typescript\nconst userObject: TypeSystemObject = {\n  type: 'object',\n  recordProperties: null,\n  objectProperties: {\n    properties: {\n      id: { type: 'string', modifiers: { optional: false, nullable: false } },\n      name: { type: 'string', modifiers: { optional: false, nullable: false } },\n      email: { type: 'string', modifiers: { optional: true, nullable: false } }\n    }\n  },\n  modifiers: { optional: false, nullable: false }\n};\n```\n"
          },
          {
            "kind": "example",
            "doc": "Record-like object\n```typescript\nconst configObject: TypeSystemObject = {\n  type: 'object',\n  recordProperties: {\n    value: { type: 'string', modifiers: { optional: false, nullable: false } }\n  },\n  objectProperties: null,\n  modifiers: { optional: false, nullable: false }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "jsDoc": {
                  "doc": "Discriminator for the object type"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 427,
                  "col": 2,
                  "byteIndex": 11533
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "object",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "object"
                  }
                },
                "typeParams": []
              },
              {
                "name": "recordProperties",
                "jsDoc": {
                  "doc": "Dynamic key-value properties (Record<string, T>)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 429,
                  "col": 2,
                  "byteIndex": 11608
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "TypeSystemRecord",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TypeSystemRecord"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "objectProperties",
                "jsDoc": {
                  "doc": "Fixed object properties with known keys"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 431,
                  "col": 2,
                  "byteIndex": 11701
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "TypeSystemObjectProperties",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "TypeSystemObjectProperties"
                      }
                    },
                    {
                      "repr": "null",
                      "kind": "keyword",
                      "keyword": "null"
                    }
                  ]
                },
                "typeParams": []
              },
              {
                "name": "modifiers",
                "jsDoc": {
                  "doc": "Type modifiers (optional, nullable, etc.)"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 433,
                  "col": 2,
                  "byteIndex": 11806
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                },
                "typeParams": []
              },
              {
                "name": "generatorKey",
                "jsDoc": {
                  "doc": "Optional generator-specific key for tracking"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 435,
                  "col": 2,
                  "byteIndex": 11883
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "GeneratorKey",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GeneratorKey"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "SchemaToTypeSystemMap",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 451,
        "col": 0,
        "byteIndex": 12410
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Mapping of schema types to their type system representations.\n\nThis type maps OpenAPI schema types to their corresponding type system\nvalue types, enabling type-safe transformations during code generation.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\n// Used internally by the type system transformation process\ntype StringOutput = SchemaToTypeSystemMap['string']['output']; // TypeSystemString\ntype RefSource = SchemaToTypeSystemMap['ref']['source']; // OasRef<'schema'>\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "ref",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 452,
                  "col": 2,
                  "byteIndex": 12450
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 453,
                          "col": 4,
                          "byteIndex": 12461
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasRef",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "schema",
                                "kind": "literal",
                                "literal": {
                                  "kind": "string",
                                  "string": "schema"
                                }
                              }
                            ],
                            "typeName": "OasRef"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 454,
                          "col": 4,
                          "byteIndex": 12490
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemRef",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemRef"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "array",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 456,
                  "col": 2,
                  "byteIndex": 12518
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 457,
                          "col": 4,
                          "byteIndex": 12531
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 458,
                          "col": 4,
                          "byteIndex": 12553
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemArray",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemArray"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "number",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 460,
                  "col": 2,
                  "byteIndex": 12583
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 461,
                          "col": 4,
                          "byteIndex": 12597
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 462,
                          "col": 4,
                          "byteIndex": 12619
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemNumber",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemNumber"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "void",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 464,
                  "col": 2,
                  "byteIndex": 12650
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 465,
                          "col": 4,
                          "byteIndex": 12662
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasVoid",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasVoid"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 466,
                          "col": 4,
                          "byteIndex": 12682
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemVoid",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemVoid"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "integer",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 468,
                  "col": 2,
                  "byteIndex": 12711
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 469,
                          "col": 4,
                          "byteIndex": 12726
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 470,
                          "col": 4,
                          "byteIndex": 12748
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemInteger",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemInteger"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "boolean",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 472,
                  "col": 2,
                  "byteIndex": 12780
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 473,
                          "col": 4,
                          "byteIndex": 12795
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 474,
                          "col": 4,
                          "byteIndex": 12817
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemBoolean",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemBoolean"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "unknown",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 476,
                  "col": 2,
                  "byteIndex": 12849
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 477,
                          "col": 4,
                          "byteIndex": 12864
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 478,
                          "col": 4,
                          "byteIndex": 12886
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemUnknown",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemUnknown"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "null",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 480,
                  "col": 2,
                  "byteIndex": 12918
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 481,
                          "col": 4,
                          "byteIndex": 12930
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 482,
                          "col": 4,
                          "byteIndex": 12952
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemNull",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemNull"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "object",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 484,
                  "col": 2,
                  "byteIndex": 12981
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 485,
                          "col": 4,
                          "byteIndex": 12995
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 486,
                          "col": 4,
                          "byteIndex": 13017
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemObject",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemObject"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "string",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 488,
                  "col": 2,
                  "byteIndex": 13048
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 489,
                          "col": 4,
                          "byteIndex": 13062
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 490,
                          "col": 4,
                          "byteIndex": 13084
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemString",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemString"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "union",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 492,
                  "col": 2,
                  "byteIndex": 13115
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 493,
                          "col": 4,
                          "byteIndex": 13128
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "OasSchema",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "OasSchema"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 494,
                          "col": 4,
                          "byteIndex": 13150
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemUnion",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemUnion"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              },
              {
                "name": "custom",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 496,
                  "col": 2,
                  "byteIndex": 13180
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "typeLiteral",
                  "typeLiteral": {
                    "constructors": [],
                    "methods": [],
                    "properties": [
                      {
                        "name": "source",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 497,
                          "col": 4,
                          "byteIndex": 13194
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "CustomValue",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "CustomValue"
                          }
                        },
                        "typeParams": []
                      },
                      {
                        "name": "output",
                        "location": {
                          "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                          "line": 498,
                          "col": 4,
                          "byteIndex": 13218
                        },
                        "params": [],
                        "computed": false,
                        "optional": false,
                        "tsType": {
                          "repr": "TypeSystemCustom",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "TypeSystemCustom"
                          }
                        },
                        "typeParams": []
                      }
                    ],
                    "callSignatures": [],
                    "indexSignatures": []
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "SchemaType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 513,
        "col": 0,
        "byteIndex": 13540
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union of all possible schema types that can be transformed.\n",
        "tags": [
          {
            "kind": "example",
            "doc": "```typescript\nfunction transformSchema(schema: SchemaType): TypeSystemValue {\n  // Transform any schema type to its type system representation\n  return toTypeSystemValue(schema);\n}\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "OasSchema",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasSchema"
              }
            },
            {
              "repr": "OasRef",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "schema",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "schema"
                    }
                  }
                ],
                "typeName": "OasRef"
              }
            },
            {
              "repr": "OasVoid",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "OasVoid"
              }
            },
            {
              "repr": "CustomValue",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "CustomValue"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "SchemaToRef",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 525,
        "col": 0,
        "byteIndex": 13895
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Extracts only reference types from a schema type.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Schema",
            "doc": "- The schema type to filter"
          },
          {
            "kind": "example",
            "doc": "```typescript\ntype RefOnly = SchemaToRef<OasRef<'schema'>>; // OasRef<'schema'>\ntype NeverForSchema = SchemaToRef<OasSchema>; // never\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "conditional",
          "conditionalType": {
            "checkType": {
              "repr": "Schema",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Schema"
              }
            },
            "extendsType": {
              "repr": "OasRef",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "schema",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "schema"
                    }
                  }
                ],
                "typeName": "OasRef"
              }
            },
            "trueType": {
              "repr": "Schema",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Schema"
              }
            },
            "falseType": {
              "repr": "never",
              "kind": "keyword",
              "keyword": "never"
            }
          }
        },
        "typeParams": [
          {
            "name": "Schema",
            "constraint": {
              "repr": "SchemaType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "SchemaType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "SchemaToNonRef",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 538,
        "col": 0,
        "byteIndex": 14279
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Extracts only non-reference types from a schema type.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Schema",
            "doc": "- The schema type to filter"
          },
          {
            "kind": "example",
            "doc": "```typescript\ntype SchemaOnly = SchemaToNonRef<OasSchema>; // OasSchema\ntype NeverForRef = SchemaToNonRef<OasRef<'schema'>>; // never\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "conditional",
          "conditionalType": {
            "checkType": {
              "repr": "Schema",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Schema"
              }
            },
            "extendsType": {
              "repr": "OasRef",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "schema",
                    "kind": "literal",
                    "literal": {
                      "kind": "string",
                      "string": "schema"
                    }
                  }
                ],
                "typeName": "OasRef"
              }
            },
            "trueType": {
              "repr": "never",
              "kind": "keyword",
              "keyword": "never"
            },
            "falseType": {
              "repr": "Schema",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Schema"
              }
            }
          }
        },
        "typeParams": [
          {
            "name": "Schema",
            "constraint": {
              "repr": "SchemaType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "SchemaType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "TypeSystemOutput",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 551,
        "col": 0,
        "byteIndex": 14664
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Gets the output type for a given schema type key.\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- The schema type key"
          },
          {
            "kind": "example",
            "doc": "```typescript\ntype StringOutput = TypeSystemOutput<'string'>; // TypeSystemString\ntype ArrayOutput = TypeSystemOutput<'array'>; // TypeSystemArray\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "indexedAccess",
          "indexedAccess": {
            "readonly": false,
            "objType": {
              "repr": "",
              "kind": "indexedAccess",
              "indexedAccess": {
                "readonly": false,
                "objType": {
                  "repr": "SchemaToTypeSystemMap",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SchemaToTypeSystemMap"
                  }
                },
                "indexType": {
                  "repr": "T",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "T"
                  }
                }
              }
            },
            "indexType": {
              "repr": "output",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "output"
              }
            }
          }
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "",
              "kind": "typeOperator",
              "typeOperator": {
                "operator": "keyof",
                "tsType": {
                  "repr": "SchemaToTypeSystemMap",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SchemaToTypeSystemMap"
                  }
                }
              }
            }
          }
        ]
      }
    },
    {
      "name": "TypeSystemArgs",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 572,
        "col": 0,
        "byteIndex": 15315
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Arguments for type system transformation functions.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Schema",
            "doc": "- The specific schema type being transformed"
          },
          {
            "kind": "example",
            "doc": "```typescript\nfunction transformStringSchema(args: TypeSystemArgs<OasSchema>): TypeSystemString {\n  const { context, schema, required } = args;\n  // Transform string schema to type system representation\n  return {\n    type: 'string',\n    format: schema.format,\n    enums: schema.enums,\n    modifiers: { optional: !required, nullable: schema.nullable }\n  };\n}\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "context",
                "jsDoc": {
                  "doc": "The generation context containing utilities and state"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 574,
                  "col": 2,
                  "byteIndex": 15438
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "GenerateContext",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "GenerateContext"
                  }
                },
                "typeParams": []
              },
              {
                "name": "destinationPath",
                "jsDoc": {
                  "doc": "The destination path for the generated artifact"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 576,
                  "col": 2,
                  "byteIndex": 15522
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "schema",
                "jsDoc": {
                  "doc": "The schema to transform"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 578,
                  "col": 2,
                  "byteIndex": 15581
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Schema",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Schema"
                  }
                },
                "typeParams": []
              },
              {
                "name": "rootRef",
                "jsDoc": {
                  "doc": "Optional root reference name for schema references"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 580,
                  "col": 2,
                  "byteIndex": 15658
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "RefName",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "RefName"
                  }
                },
                "typeParams": []
              },
              {
                "name": "required",
                "jsDoc": {
                  "doc": "Whether the schema field is required"
                },
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
                  "line": 582,
                  "col": 2,
                  "byteIndex": 15724
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "union",
                  "union": [
                    {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    },
                    {
                      "repr": "undefined",
                      "kind": "keyword",
                      "keyword": "undefined"
                    }
                  ]
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": [
          {
            "name": "Schema",
            "constraint": {
              "repr": "SchemaType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "SchemaType"
              }
            }
          }
        ]
      }
    },
    {
      "name": "SchemaToValueFn",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/types/TypeSystem.ts",
        "line": 607,
        "col": 0,
        "byteIndex": 16368
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Function type for transforming schemas to type system values.\n",
        "tags": [
          {
            "kind": "template",
            "name": "Schema",
            "doc": "- The schema type being transformed"
          },
          {
            "kind": "param",
            "name": "args",
            "doc": "- Transformation arguments"
          },
          {
            "kind": "return",
            "doc": "The corresponding type system value\n"
          },
          {
            "kind": "example",
            "doc": "```typescript\nconst transformSchema: SchemaToValueFn = (args) => {\n  switch (args.schema.type) {\n    case 'string':\n      return transformStringSchema(args);\n    case 'object':\n      return transformObjectSchema(args);\n    // ... other cases\n    default:\n      throw new Error(`Unknown schema type: ${args.schema.type}`);\n  }\n};\n```"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "TypeSystemOutput",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "indexedAccess",
                    "indexedAccess": {
                      "readonly": false,
                      "objType": {
                        "repr": "Schema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Schema"
                        }
                      },
                      "indexType": {
                        "repr": "type",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "type"
                        }
                      }
                    }
                  }
                ],
                "typeName": "TypeSystemOutput"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "args",
                "optional": false,
                "tsType": {
                  "repr": "TypeSystemArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Schema",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Schema"
                        }
                      }
                    ],
                    "typeName": "TypeSystemArgs"
                  }
                }
              }
            ],
            "typeParams": [
              {
                "name": "Schema",
                "constraint": {
                  "repr": "SchemaType",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "SchemaType"
                  }
                }
              }
            ]
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ParameterProperties",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
        "line": 31,
        "col": 0,
        "byteIndex": 1263
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Union type representing the different parameter configurations."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "VoidParameter",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "VoidParameter"
              }
            },
            {
              "repr": "DestructuredParameter",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "DestructuredParameter"
              }
            },
            {
              "repr": "RegularParameter",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "RegularParameter"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "VoidParameter",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
        "line": 36,
        "col": 0,
        "byteIndex": 1411
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a void parameter (no parameters)."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 37,
                  "col": 2,
                  "byteIndex": 1443
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "void",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "void"
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "DestructuredParameter",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
        "line": 43,
        "col": 0,
        "byteIndex": 1514
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a destructured object parameter."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 44,
                  "col": 2,
                  "byteIndex": 1554
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "destructured",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "destructured"
                  }
                },
                "typeParams": []
              },
              {
                "name": "typeDefinition",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 45,
                  "col": 2,
                  "byteIndex": 1577
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Definition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TypeSystemObject",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TypeSystemObject"
                        }
                      }
                    ],
                    "typeName": "Definition"
                  }
                },
                "typeParams": []
              },
              {
                "name": "required",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 46,
                  "col": 2,
                  "byteIndex": 1624
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "true",
                  "kind": "literal",
                  "literal": {
                    "kind": "boolean",
                    "boolean": true
                  }
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "RegularParameter",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
        "line": 52,
        "col": 0,
        "byteIndex": 1691
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Represents a regular named parameter."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "type",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 53,
                  "col": 2,
                  "byteIndex": 1726
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "regular",
                  "kind": "literal",
                  "literal": {
                    "kind": "string",
                    "string": "regular"
                  }
                },
                "typeParams": []
              },
              {
                "name": "name",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 54,
                  "col": 2,
                  "byteIndex": 1744
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                },
                "typeParams": []
              },
              {
                "name": "typeDefinition",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 55,
                  "col": 2,
                  "byteIndex": 1759
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "Definition",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "TypeSystemValue",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "TypeSystemValue"
                        }
                      }
                    ],
                    "typeName": "Definition"
                  }
                },
                "typeParams": []
              },
              {
                "name": "required",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
                  "line": 56,
                  "col": 2,
                  "byteIndex": 1805
                },
                "params": [],
                "computed": false,
                "optional": false,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "FunctionParameter",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
        "line": 206,
        "col": 0,
        "byteIndex": 6429
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Generates TypeScript function parameters with advanced handling for different parameter patterns.\n\n`FunctionParameter` is a sophisticated utility for generating TypeScript function parameter\nsyntax that handles multiple parameter patterns including named parameters, destructured\nobject parameters, and void parameters. It provides intelligent type handling and can\ngenerate both the parameter declaration and the parameter usage patterns.\n\nThis class is essential for generating type-safe function signatures in API clients,\nutility functions, and other generated code where parameters need to be handled\nconsistently and safely.\n\n## Supported Parameter Patterns\n\n- **Named Parameters**: Traditional `paramName: Type` syntax\n- **Destructured Parameters**: `{ prop1, prop2 }: ObjectType` syntax  \n- **Void Parameters**: No parameters when dealing with void types\n- **Optional Parameters**: Automatic handling of optional parameter markers\n- **Empty Filtering**: Option to skip empty properties in destructured objects\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Named parameter generation\n```typescript\nimport { FunctionParameter, Definition, Identifier } from '@skmtc/core';\n\nconst userIdParam = new FunctionParameter({\n  name: 'userId',\n  typeDefinition: new Definition({\n    context: generateContext,\n    identifier: Identifier.createType('string'),\n    value: { type: 'string' }\n  }),\n  required: true\n});\n\nconsole.log(userIdParam.toString()); // 'userId: string'\nconsole.log(userIdParam.toInbound()); // 'userId'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Destructured parameter generation\n```typescript\nconst destructuredParam = new FunctionParameter({\n  typeDefinition: new Definition({\n    context: generateContext,\n    identifier: Identifier.createType('UserParams'),\n    value: {\n      type: 'object',\n      objectProperties: {\n        properties: {\n          name: { type: 'string' },\n          email: { type: 'string' },\n          age: { type: 'number' }\n        }\n      }\n    }\n  }),\n  destructure: true,\n  required: true\n});\n\nconsole.log(destructuredParam.toString());\n// '{ name, email, age }: UserParams'\n\nconsole.log(destructuredParam.toInbound());\n// '{ name, email, age }'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Optional parameter handling\n```typescript\nconst optionalParam = new FunctionParameter({\n  name: 'options',\n  typeDefinition: optionsTypeDefinition,\n  required: false\n});\n\nconsole.log(optionalParam.toString()); // 'options?: OptionsType'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Void parameter handling\n```typescript\nconst voidParam = new FunctionParameter({\n  typeDefinition: new Definition({\n    context: generateContext,\n    identifier: Identifier.createType('void'),\n    value: { type: 'void' }\n  })\n});\n\nconsole.log(voidParam.toString()); // ''\nconsole.log(voidParam.toInbound()); // ''\n```\n"
          },
          {
            "kind": "example",
            "doc": "Property checking\n```typescript\nconst objectParam = new FunctionParameter({\n  typeDefinition: userTypeDefinition,\n  destructure: true,\n  required: true\n});\n\nif (objectParam.hasProperty('email')) {\n  // Handle email property access\n  console.log('Parameter includes email property');\n}\n\nconst propertyList = objectParam.toPropertyList();\nconsole.log(propertyList.toString()); // 'name, email, age'\n```\n"
          },
          {
            "kind": "example",
            "doc": "API method generation with parameters\n```typescript\nclass ApiMethodGenerator {\n  generateMethod(\n    methodName: string,\n    pathParams?: FunctionParameter,\n    bodyParam?: FunctionParameter\n  ) {\n    const parameters = [pathParams, bodyParam]\n      .filter(p => p && p.toString())\n      .map(p => p!.toString())\n      .join(', ');\n\n    const pathInbound = pathParams?.toInbound() || '';\n    const bodyInbound = bodyParam?.toInbound() || '';\n\n    return `\nasync ${methodName}(${parameters}) {\n  const path = this.buildPath(${pathInbound});\n  return this.request('POST', path, ${bodyInbound});\n}`;\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Empty property filtering\n```typescript\nconst filteredParam = new FunctionParameter({\n  typeDefinition: sparseObjectDefinition,\n  destructure: true,\n  required: true,\n  skipEmpty: true // Skip properties with empty types\n});\n\n// Only non-empty properties will be included in destructuring\nconsole.log(filteredParam.toString());\n// '{ validProp1, validProp2 }: FilteredType' (empty props omitted)\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new FunctionParameter instance with the specified configuration.\n\nThe constructor analyzes the provided type definition and configuration options\nto determine the appropriate parameter pattern (void, regular, or destructured).\nIt handles the complex logic of parameter type determination and validation.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Configuration options for the function parameter\n"
                },
                {
                  "kind": "throws",
                  "type": "Error",
                  "doc": "When the parameter configuration is invalid\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst param = new FunctionParameter({\n  name: 'userData',\n  typeDefinition: userTypeDefinition,\n  required: true\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "args",
                "optional": false,
                "tsType": {
                  "repr": "FunctionParameterArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "FunctionParameterArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
              "line": 233,
              "col": 2,
              "byteIndex": 7368
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The internal parameter configuration determining how the parameter is generated"
            },
            "tsType": {
              "repr": "ParameterProperties",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ParameterProperties"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "properties",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
              "line": 208,
              "col": 2,
              "byteIndex": 6553
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to skip empty properties in destructured parameters"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": true,
            "isAbstract": false,
            "isStatic": false,
            "name": "skipEmpty",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
              "line": 211,
              "col": 2,
              "byteIndex": 6659
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Checks if the parameter has a specific property (for object-based parameters).\n\nThis method determines whether a given property name exists within the parameter's\ntype structure. It's useful for conditional code generation based on available\nproperties and only returns true for object-based parameters (regular object\nparameters or destructured parameters).\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "name",
                  "doc": "- The property name to check for"
                },
                {
                  "kind": "return",
                  "doc": "True if the property exists in the parameter's type structure\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst userParam = new FunctionParameter({\n  typeDefinition: userTypeDefinition, // has properties: name, email, age\n  destructure: true,\n  required: true\n});\n\nif (userParam.hasProperty('email')) {\n  console.log('Parameter includes email property');\n}\n\nif (userParam.hasProperty('nonexistent')) {\n  // This won't execute\n}\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "hasProperty",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "name",
                  "optional": false,
                  "tsType": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              ],
              "returnType": {
                "repr": "boolean",
                "kind": "keyword",
                "keyword": "boolean"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
              "line": 288,
              "col": 2,
              "byteIndex": 9217
            }
          },
          {
            "jsDoc": {
              "doc": "Generates a List of property names from the parameter.\n\nThis method extracts property names from object-based parameters and returns\nthem as a List instance. For regular parameters, it returns the parameter name,\nfor destructured parameters it returns all object properties, and for void\nparameters it returns an empty list.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "List containing the relevant property or parameter names\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst destructuredParam = new FunctionParameter({\n  typeDefinition: userTypeDefinition, // has properties: name, email, age\n  destructure: true,\n  required: true\n});\n\nconst propertyList = destructuredParam.toPropertyList();\nconsole.log(propertyList.toString()); // 'name, email, age'\n\nconst regularParam = new FunctionParameter({\n  name: 'userData',\n  typeDefinition: userTypeDefinition,\n  required: true\n});\n\nconst regularList = regularParam.toPropertyList();\nconsole.log(regularList.toString()); // 'userData'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toPropertyList",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "List",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "List"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
              "line": 332,
              "col": 2,
              "byteIndex": 10801
            }
          },
          {
            "jsDoc": {
              "doc": "Generates the inbound parameter syntax for function calls.\n\nThis method produces the syntax used when calling a function with this parameter.\nFor regular parameters, it returns the parameter name. For destructured parameters,\nit returns the destructured object syntax. For void parameters, it returns an\nempty string.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The inbound parameter syntax string\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst regularParam = new FunctionParameter({\n  name: 'userId',\n  typeDefinition: stringTypeDefinition,\n  required: true\n});\n\nconsole.log(regularParam.toInbound()); // 'userId'\n\nconst destructuredParam = new FunctionParameter({\n  typeDefinition: userTypeDefinition,\n  destructure: true,\n  required: true\n});\n\nconsole.log(destructuredParam.toInbound()); // '{ name, email, age }'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toInbound",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
              "line": 371,
              "col": 2,
              "byteIndex": 12093
            }
          },
          {
            "jsDoc": {
              "doc": "Generates the complete function parameter declaration syntax.\n\nThis method produces the full parameter declaration that appears in a function\nsignature, including the parameter name, type annotation, and optional markers.\nIt handles all parameter patterns supported by the class.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "The complete parameter declaration string\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst requiredParam = new FunctionParameter({\n  name: 'userId',\n  typeDefinition: stringTypeDefinition,\n  required: true\n});\n\nconsole.log(requiredParam.toString()); // 'userId: string'\n\nconst optionalParam = new FunctionParameter({\n  name: 'options',\n  typeDefinition: optionsTypeDefinition,\n  required: false\n});\n\nconsole.log(optionalParam.toString()); // 'options?: OptionsType'\n\nconst destructuredParam = new FunctionParameter({\n  typeDefinition: userTypeDefinition,\n  destructure: true,\n  required: true\n});\n\nconsole.log(destructuredParam.toString()); // '{ name, email, age }: UserType'\n```"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/FunctionParameter.ts",
              "line": 417,
              "col": 2,
              "byteIndex": 13569
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "handleKey",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/identifiers.ts",
        "line": 83,
        "col": 13,
        "byteIndex": 2703
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Safely formats a key for use in object literals, adding quotes if needed.\n\nThis function determines whether a property key needs to be quoted in JavaScript/TypeScript\nobject literals based on identifier naming rules. Valid identifiers are left unquoted,\nwhile invalid identifiers (containing spaces, special characters, starting with numbers, etc.)\nare wrapped in single quotes.\n",
        "tags": [
          {
            "kind": "param",
            "name": "key",
            "doc": "- The property key to format"
          },
          {
            "kind": "return",
            "doc": "The key as-is if it's a valid identifier, otherwise wrapped in quotes\n"
          },
          {
            "kind": "example",
            "doc": "Valid identifiers (no quotes needed)\n```typescript\nimport { handleKey } from '@skmtc/core';\n\nconsole.log(handleKey('name'));      // 'name'\nconsole.log(handleKey('userName'));  // 'userName'\nconsole.log(handleKey('_private'));  // '_private'\nconsole.log(handleKey('$special'));  // '$special'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Invalid identifiers (quotes added)\n```typescript\nconsole.log(handleKey('first-name'));  // \"'first-name'\"\nconsole.log(handleKey('2nd-place'));   // \"'2nd-place'\"\nconsole.log(handleKey('user name'));   // \"'user name'\"\nconsole.log(handleKey('api-key'));     // \"'api-key'\"\nconsole.log(handleKey('data.nested')); // \"'data.nested'\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in object generation\n```typescript\nclass ObjectGenerator {\n  generateObjectLiteral(properties: Record<string, string>) {\n    const props = Object.entries(properties)\n      .map(([key, value]) => `${handleKey(key)}: ${value}`)\n      .join(', ');\n\n    return `{ ${props} }`;\n  }\n}\n\nconst generator = new ObjectGenerator();\nconst result = generator.generateObjectLiteral({\n  'name': 'string',\n  'first-name': 'string',\n  'age': 'number'\n});\n\nconsole.log(result);\n// { name: string, 'first-name': string, age: number }\n```\n"
          },
          {
            "kind": "example",
            "doc": "TypeScript interface generation\n```typescript\nfunction generateInterface(name: string, properties: Record<string, string>) {\n  const props = Object.entries(properties)\n    .map(([key, type]) => `  ${handleKey(key)}: ${type};`)\n    .join('\\n');\n\n  return `interface ${name} {\\n${props}\\n}`;\n}\n\nconst userInterface = generateInterface('User', {\n  'id': 'string',\n  'first-name': 'string',\n  'last_name': 'string',\n  '2fa-enabled': 'boolean'\n});\n\nconsole.log(userInterface);\n// interface User {\n//   id: string;\n//   'first-name': string;\n//   last_name: string;\n//   '2fa-enabled': boolean;\n// }\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "key",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "handlePropertyName",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/identifiers.ts",
        "line": 167,
        "col": 13,
        "byteIndex": 5934
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Safely formats property access, using dot notation or bracket notation as appropriate.\n\nThis function generates the appropriate property access syntax for JavaScript/TypeScript\ncode. Valid identifiers use dot notation (`parent.property`), while invalid identifiers\nuse bracket notation (`parent['property']`).\n",
        "tags": [
          {
            "kind": "param",
            "name": "name",
            "doc": "- The property name to access"
          },
          {
            "kind": "param",
            "name": "parent",
            "doc": "- The parent object expression"
          },
          {
            "kind": "return",
            "doc": "Properly formatted property access expression\n"
          },
          {
            "kind": "example",
            "doc": "Valid identifiers (dot notation)\n```typescript\nimport { handlePropertyName } from '@skmtc/core';\n\nconsole.log(handlePropertyName('name', 'user'));      // 'user.name'\nconsole.log(handlePropertyName('firstName', 'user')); // 'user.firstName'\nconsole.log(handlePropertyName('_id', 'document'));   // 'document._id'\nconsole.log(handlePropertyName('$meta', 'data'));     // 'data.$meta'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Invalid identifiers (bracket notation)\n```typescript\nconsole.log(handlePropertyName('first-name', 'user'));  // \"user['first-name']\"\nconsole.log(handlePropertyName('2nd-place', 'result')); // \"result['2nd-place']\"\nconsole.log(handlePropertyName('user name', 'form'));   // \"form['user name']\"\nconsole.log(handlePropertyName('api-key', 'config'));   // \"config['api-key']\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Usage in accessor generation\n```typescript\nclass PropertyAccessor {\n  generateGetter(objectName: string, propertyPath: string[]) {\n    return propertyPath.reduce((acc, prop) =>\n      handlePropertyName(prop, acc), objectName\n    );\n  }\n}\n\nconst accessor = new PropertyAccessor();\nconst path1 = accessor.generateGetter('data', ['user', 'profile', 'firstName']);\nconst path2 = accessor.generateGetter('config', ['api-settings', 'retry-count']);\n\nconsole.log(path1); // 'data.user.profile.firstName'\nconsole.log(path2); // \"config['api-settings']['retry-count']\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex object navigation\n```typescript\nfunction generateObjectAccess(base: string, properties: string[]) {\n  let result = base;\n\n  for (const prop of properties) {\n    result = handlePropertyName(prop, result);\n  }\n\n  return result;\n}\n\nconst access1 = generateObjectAccess('response', ['data', 'user-info', 'name']);\nconst access2 = generateObjectAccess('settings', ['ui', 'theme', 'darkMode']);\n\nconsole.log(access1); // \"response.data['user-info'].name\"\nconsole.log(access2); // \"settings.ui.theme.darkMode\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Function generation\n```typescript\nfunction generatePropertyGetter(objName: string, propName: string) {\n  const access = handlePropertyName(propName, objName);\n  return `function get${propName.replace(/[^a-zA-Z0-9]/g, '')}() { return ${access}; }`;\n}\n\nconst getter1 = generatePropertyGetter('user', 'firstName');\nconst getter2 = generatePropertyGetter('config', 'api-key');\n\nconsole.log(getter1); // \"function getfirstName() { return user.firstName; }\"\nconsole.log(getter2); // \"function getapikey() { return config['api-key']; }\"\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "name",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "parent",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "keyValues",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/keyValues.ts",
        "line": 129,
        "col": 13,
        "byteIndex": 3874
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Converts a properties object into a formatted TypeScript object literal string.\n\nThis utility function takes a record of key-value pairs and generates a properly\nformatted TypeScript object literal. It automatically filters out empty values\nand handles proper spacing and comma placement. If all properties are empty,\nit returns the EMPTY constant instead of an empty object.\n\nThe function is particularly useful for generating TypeScript interface properties,\nobject type definitions, and literal object expressions in code generation scenarios.\n",
        "tags": [
          {
            "kind": "param",
            "name": "properties",
            "doc": "- Record of property names to their stringable values"
          },
          {
            "kind": "return",
            "doc": "Formatted object literal string or EMPTY if no valid properties\n"
          },
          {
            "kind": "example",
            "doc": "Basic object generation\n```typescript\nimport { keyValues } from '@skmtc/core';\n\nconst props = {\n  name: { toString: () => 'string' },\n  age: { toString: () => 'number' },\n  email: { toString: () => 'string' }\n};\n\nconst result = keyValues(props);\nconsole.log(result);\n// {name: string,\n// age: number,\n// email: string}\n```\n"
          },
          {
            "kind": "example",
            "doc": "With empty values filtered\n```typescript\nconst propsWithEmpty = {\n  name: { toString: () => 'string' },\n  description: { toString: () => '' }, // Empty, will be filtered\n  age: { toString: () => 'number' },\n  notes: { toString: () => 'EMPTY' }   // EMPTY constant, will be filtered\n};\n\nconst result = keyValues(propsWithEmpty);\nconsole.log(result);\n// {name: string,\n// age: number}\n```\n"
          },
          {
            "kind": "example",
            "doc": "All empty properties\n```typescript\nconst emptyProps = {\n  description: { toString: () => '' },\n  notes: { toString: () => 'EMPTY' }\n};\n\nconst result = keyValues(emptyProps);\nconsole.log(result === EMPTY); // true\n```\n"
          },
          {
            "kind": "example",
            "doc": "TypeScript interface generation\n```typescript\nclass InterfaceGenerator {\n  generateInterface(name: string, properties: Record<string, Stringable>) {\n    const propsString = keyValues(properties);\n\n    if (propsString === EMPTY) {\n      return `interface ${name} {}`;\n    }\n\n    return `interface ${name} ${propsString}`;\n  }\n}\n\nconst generator = new InterfaceGenerator();\nconst userInterface = generator.generateInterface('User', {\n  id: { toString: () => 'string' },\n  name: { toString: () => 'string' },\n  age: { toString: () => 'number' }\n});\n\nconsole.log(userInterface);\n// interface User {id: string,\n// name: string,\n// age: number}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Object literal generation\n```typescript\nfunction generateObjectLiteral(values: Record<string, string>) {\n  const stringableValues = Object.fromEntries(\n    Object.entries(values).map(([k, v]) => [k, { toString: () => `'${v}'` }])\n  );\n\n  const result = keyValues(stringableValues);\n  return result === EMPTY ? '{}' : result;\n}\n\nconst config = generateObjectLiteral({\n  apiUrl: 'https://api.example.com',\n  timeout: '5000'\n});\n\nconsole.log(config);\n// {apiUrl: 'https://api.example.com',\n// timeout: '5000'}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Conditional property inclusion\n```typescript\nclass ConditionalGenerator {\n  generateObjectType(fields: Array<{name: string, type: string, optional?: boolean}>) {\n    const properties: Record<string, Stringable> = {};\n\n    fields.forEach(field => {\n      if (field.type) { // Only include fields with types\n        const optionalMarker = field.optional ? '?' : '';\n        properties[field.name] = {\n          toString: () => `${optionalMarker}: ${field.type}`\n        };\n      }\n    });\n\n    return keyValues(properties);\n  }\n}\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "properties",
                "optional": false,
                "tsType": {
                  "repr": "Record",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "string",
                        "kind": "keyword",
                        "keyword": "string"
                      },
                      {
                        "repr": "Stringable",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Stringable"
                        }
                      }
                    ],
                    "typeName": "Record"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "ListObject",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 5,
        "col": 0,
        "byteIndex": 168
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type alias for object-style lists with curly braces: `{item1, item2}`"
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "List",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "V",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "V"
                  }
                }
              },
              {
                "repr": ", ",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ", "
                }
              },
              {
                "repr": "{}",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "{}"
                }
              }
            ],
            "typeName": "List"
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "ListLines",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 8,
        "col": 0,
        "byteIndex": 298
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type alias for line-separated lists without bookends"
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "List",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "V",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "V"
                  }
                }
              },
              {
                "repr": "\n",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "\n"
                }
              },
              {
                "repr": "none",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "none"
                }
              }
            ],
            "typeName": "List"
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "ListArray",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 11,
        "col": 0,
        "byteIndex": 448
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type alias for array-style lists with square brackets: `[item1, item2]`"
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "List",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "V",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "V"
                  }
                }
              },
              {
                "repr": ", ",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ", "
                }
              },
              {
                "repr": "[]",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "[]"
                }
              }
            ],
            "typeName": "List"
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "ListParams",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 14,
        "col": 0,
        "byteIndex": 598
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type alias for parameter-style lists with parentheses: `(param1, param2)`"
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "List",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "array",
                "array": {
                  "repr": "V",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "V"
                  }
                }
              },
              {
                "repr": ", ",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ", "
                }
              },
              {
                "repr": "()",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "()"
                }
              }
            ],
            "typeName": "List"
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "SkipEmptyOption",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 17,
        "col": 0,
        "byteIndex": 719
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Options for controlling empty list behavior"
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "typeLiteral",
          "typeLiteral": {
            "constructors": [],
            "methods": [],
            "properties": [
              {
                "name": "skipEmpty",
                "location": {
                  "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
                  "line": 17,
                  "col": 32,
                  "byteIndex": 751
                },
                "params": [],
                "computed": false,
                "optional": true,
                "tsType": {
                  "repr": "boolean",
                  "kind": "keyword",
                  "keyword": "boolean"
                },
                "typeParams": []
              }
            ],
            "callSignatures": [],
            "indexSignatures": []
          }
        },
        "typeParams": []
      }
    },
    {
      "name": "ListKeyValue",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 28,
        "col": 0,
        "byteIndex": 1083
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type alias for creating key-value pair lists.\n\nCreates a List specialized for key-value pairs with colon separator\nand no bookends (e.g., \"key1: value1, key2: value2\").\n",
        "tags": [
          {
            "kind": "template",
            "name": "Key",
            "doc": "- Type of the keys (must be stringable)"
          },
          {
            "kind": "template",
            "name": "Value",
            "doc": "- Type of the values (must be stringable)"
          }
        ]
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "List",
          "kind": "typeRef",
          "typeRef": {
            "typeParams": [
              {
                "repr": "",
                "kind": "tuple",
                "tuple": [
                  {
                    "repr": "Key",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Key"
                    }
                  },
                  {
                    "repr": "Value",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Value"
                    }
                  }
                ]
              },
              {
                "repr": ": ",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": ": "
                }
              },
              {
                "repr": "none",
                "kind": "literal",
                "literal": {
                  "kind": "string",
                  "string": "none"
                }
              }
            ],
            "typeName": "List"
          }
        },
        "typeParams": [
          {
            "name": "Key",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          },
          {
            "name": "Value",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "BookendsType",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 37,
        "col": 0,
        "byteIndex": 1271
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type representing the different bookend styles for lists."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "union",
          "union": [
            {
              "repr": "[]",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "[]"
              }
            },
            {
              "repr": "{}",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "{}"
              }
            },
            {
              "repr": "()",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "()"
              }
            },
            {
              "repr": "none",
              "kind": "literal",
              "literal": {
                "kind": "string",
                "string": "none"
              }
            }
          ]
        },
        "typeParams": []
      }
    },
    {
      "name": "ExtractArrayItem",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 48,
        "col": 0,
        "byteIndex": 1568
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Utility type to extract the item type from an array type."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "conditional",
          "conditionalType": {
            "checkType": {
              "repr": "ArrayOf",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "ArrayOf"
              }
            },
            "extendsType": {
              "repr": "Array",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "",
                    "kind": "infer",
                    "infer": {
                      "typeParam": {
                        "name": "Item"
                      }
                    }
                  }
                ],
                "typeName": "Array"
              }
            },
            "trueType": {
              "repr": "Item",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Item"
              }
            },
            "falseType": {
              "repr": "never",
              "kind": "keyword",
              "keyword": "never"
            }
          }
        },
        "typeParams": [
          {
            "name": "ArrayOf"
          }
        ]
      }
    },
    {
      "name": "List",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 140,
        "col": 0,
        "byteIndex": 4929
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "A powerful utility class for building formatted lists of stringable items.\n\nThe `List` class is a core component of the SKMTC DSL system, providing type-safe\nconstruction of formatted lists with customizable separators and bookends. It's\nextensively used throughout the codebase for generating code constructs like\nfunction parameters, object properties, array literals, and more.\n\n## Type Safety\n\nThe class uses TypeScript's generic system to provide compile-time guarantees\nabout the list structure, separator, and bookend styles. This enables rich\ntype inference and helps prevent formatting errors.\n\n## Common Patterns\n\n- **Objects**: `List.toObject()` creates `{key: value, ...}` structures\n- **Arrays**: `List.toArray()` creates `[item, item, ...]` structures\n- **Parameters**: `List.toParams()` creates `(param, param, ...)` structures\n- **Lines**: `List.toLines()` creates newline-separated content\n",
        "tags": [
          {
            "kind": "template",
            "name": "Values",
            "doc": "- Array of stringable values"
          },
          {
            "kind": "template",
            "name": "Separator",
            "doc": "- String used to separate items"
          },
          {
            "kind": "template",
            "name": "Bookends",
            "doc": "- Style of bookends ('[]', '{}', '()', 'none')\n"
          },
          {
            "kind": "example",
            "doc": "Basic usage\n```typescript\nimport { List } from '@skmtc/core';\n\n// Create a comma-separated list\nconst items = new List(['apple', 'banana', 'cherry']);\nconsole.log(items.toString()); // \"apple, banana, cherry\"\n\n// Create an array-style list\nconst array = new List(['a', 'b', 'c'], { bookends: '[]' });\nconsole.log(array.toString()); // \"[a, b, c]\"\n\n// Create an object-style list\nconst obj = new List(['x: 1', 'y: 2'], { bookends: '{}' });\nconsole.log(obj.toString()); // \"{x: 1, y: 2}\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using type aliases\n```typescript\n// Type-safe array construction\nconst params: ListParams<string> = List.toParams(['id', 'name', 'email']);\nconsole.log(params.toString()); // \"(id, name, email)\"\n\n// Object properties with filtering\nconst props = List.toObject(['title', undefined, 'author'], { skipEmpty: true });\nconsole.log(props.toString()); // \"{title, author}\"\n\n// Line-separated content\nconst lines = List.toLines(['import React from \"react\"', 'import { useState } from \"react\"']);\nconsole.log(lines.toString());\n// import React from \"react\"\n// import { useState } from \"react\"\n```\n"
          },
          {
            "kind": "example",
            "doc": "Advanced usage with builders\n```typescript\n// Function signature generation\nconst signature = List.toParams([\n  'id: string',\n  'options?: RequestOptions',\n  'callback?: (result: T) => void'\n]);\n\n// Interface properties\nconst interfaceProps = List.toObject([\n  'readonly id: string',\n  'name: string',\n  'createdAt: Date',\n  'updatedAt?: Date'\n]);\n\nconsole.log(`interface User ${interfaceProps}`);\n// interface User {readonly id: string, name: string, createdAt: Date, updatedAt?: Date}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new List instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "values",
                  "doc": "- Array of values (undefined values are automatically filtered out)"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Configuration options"
                },
                {
                  "kind": "param",
                  "name": "options.separator",
                  "doc": "- String to use between items (default: ', ')"
                },
                {
                  "kind": "param",
                  "name": "options.bookends",
                  "doc": "- Style of bookends to wrap the list (default: 'none')"
                },
                {
                  "kind": "param",
                  "name": "options.skipEmpty",
                  "doc": "- Whether to return empty string for empty lists (default: false)\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\n// Basic list with default comma separator\nconst basic = new List(['a', 'b', 'c']);\n\n// Custom separator and bookends\nconst custom = new List(['x', 'y', 'z'], {\n  separator: ' | ',\n  bookends: '[]',\n  skipEmpty: true\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "values",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "",
                    "kind": "parenthesized",
                    "parenthesized": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "ExtractArrayItem",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "Values",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Values"
                                }
                              }
                            ],
                            "typeName": "ExtractArrayItem"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                }
              },
              {
                "kind": "assign",
                "left": {
                  "kind": "object",
                  "props": [
                    {
                      "kind": "assign",
                      "key": "separator",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "bookends",
                      "value": null
                    },
                    {
                      "kind": "assign",
                      "key": "skipEmpty",
                      "value": null
                    }
                  ],
                  "optional": false,
                  "tsType": {
                    "repr": "ConstructorOptions",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "Separator",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Separator"
                          }
                        },
                        {
                          "repr": "Bookends",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Bookends"
                          }
                        }
                      ],
                      "typeName": "ConstructorOptions"
                    }
                  }
                },
                "right": "[UNSUPPORTED]",
                "tsType": null
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 179,
              "col": 2,
              "byteIndex": 6138
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The array of values in this list"
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "ExtractArrayItem",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "Values",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Values"
                      }
                    }
                  ],
                  "typeName": "ExtractArrayItem"
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "values",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 146,
              "col": 2,
              "byteIndex": 5126
            }
          },
          {
            "jsDoc": {
              "doc": "The separator string used between items"
            },
            "tsType": {
              "repr": "Separator",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Separator"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "separator",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 149,
              "col": 2,
              "byteIndex": 5213
            }
          },
          {
            "jsDoc": {
              "doc": "The bookend style for wrapping the list"
            },
            "tsType": {
              "repr": "Bookends",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Bookends"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "bookends",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 152,
              "col": 2,
              "byteIndex": 5286
            }
          },
          {
            "jsDoc": {
              "doc": "Whether to skip rendering when the list is empty"
            },
            "tsType": {
              "repr": "boolean",
              "kind": "keyword",
              "keyword": "boolean"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "skipEmpty",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 155,
              "col": 2,
              "byteIndex": 5366
            }
          },
          {
            "jsDoc": {
              "doc": "Create an empty List that will render as an empty string ''",
              "tags": [
                {
                  "kind": "return",
                  "doc": "List"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "List",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "never",
                        "kind": "keyword",
                        "keyword": "never"
                      },
                      {
                        "repr": ", ",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": ", "
                        }
                      },
                      {
                        "repr": "none",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "none"
                        }
                      }
                    ],
                    "typeName": "List"
                  }
                },
                "params": [],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toEmpty",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 220,
              "col": 2,
              "byteIndex": 7371
            }
          },
          {
            "jsDoc": {
              "doc": "Create a List with a single value that will render as `value`",
              "tags": [
                {
                  "kind": "param",
                  "name": "value"
                },
                {
                  "kind": "return",
                  "doc": "List"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "List",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "Stringable",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Stringable"
                            }
                          }
                        ]
                      },
                      {
                        "repr": ", ",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": ", "
                        }
                      },
                      {
                        "repr": "none",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "none"
                        }
                      }
                    ],
                    "typeName": "List"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": false,
                    "tsType": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toSingle",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 229,
              "col": 2,
              "byteIndex": 7592
            }
          },
          {
            "jsDoc": {
              "doc": "If condition is true, return a List with a single value that will render as `value`.\nOtherwise, return an empty List that will render as an empty string ''.\n\nUseful for conditional rendering. For example, rendering a function arg object when\nit has at least one property.",
              "tags": [
                {
                  "kind": "param",
                  "name": "value"
                },
                {
                  "kind": "param",
                  "name": "condition"
                },
                {
                  "kind": "return",
                  "doc": "List"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "ToConditionalReturn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "List",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": [
                            {
                              "repr": "",
                              "kind": "tuple",
                              "tuple": [
                                {
                                  "repr": "Value",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Value"
                                  }
                                }
                              ]
                            },
                            {
                              "repr": ", ",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": ", "
                              }
                            },
                            {
                              "repr": "none",
                              "kind": "literal",
                              "literal": {
                                "kind": "string",
                                "string": "none"
                              }
                            }
                          ],
                          "typeName": "List"
                        }
                      },
                      {
                        "repr": "Condition",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Condition"
                        }
                      }
                    ],
                    "typeName": "ToConditionalReturn"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": false,
                    "tsType": {
                      "repr": "Value",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Value"
                      }
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "condition",
                    "optional": false,
                    "tsType": {
                      "repr": "Condition",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Condition"
                      }
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Value",
                    "constraint": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  },
                  {
                    "name": "Condition",
                    "constraint": {
                      "repr": "boolean",
                      "kind": "keyword",
                      "keyword": "boolean"
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toConditional",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 243,
              "col": 2,
              "byteIndex": 8094
            }
          },
          {
            "jsDoc": {
              "doc": "Create a record with Stringable values. KeyValue pairs will be joined with `: ` as separator\nand the resulting List will be wrapped with `{}`",
              "tags": [
                {
                  "kind": "param",
                  "name": "record"
                },
                {
                  "kind": "return",
                  "doc": "`record` with `Stringable` values"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "List",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Stringable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Stringable"
                          }
                        }
                      },
                      {
                        "repr": ", ",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": ", "
                        }
                      },
                      {
                        "repr": "{}",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "{}"
                        }
                      }
                    ],
                    "typeName": "List"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "record",
                    "optional": false,
                    "tsType": {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "Stringable",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Stringable"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "Stringable",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Stringable"
                                  }
                                }
                              },
                              {
                                "repr": "List",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "List"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toRecord",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 258,
              "col": 2,
              "byteIndex": 8682
            }
          },
          {
            "jsDoc": {
              "doc": "Create a record with `undefined` or empty array or List values filtered out.",
              "tags": [
                {
                  "kind": "param",
                  "name": "record"
                },
                {
                  "kind": "return",
                  "doc": "`record` with `undefined` values filtered out"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "List",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "array",
                        "array": {
                          "repr": "Stringable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Stringable"
                          }
                        }
                      },
                      {
                        "repr": ", ",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": ", "
                        }
                      },
                      {
                        "repr": "{}",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "{}"
                        }
                      }
                    ],
                    "typeName": "List"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "record",
                    "optional": false,
                    "tsType": {
                      "repr": "Record",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "",
                            "kind": "union",
                            "union": [
                              {
                                "repr": "undefined",
                                "kind": "keyword",
                                "keyword": "undefined"
                              },
                              {
                                "repr": "Stringable",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Stringable"
                                }
                              },
                              {
                                "repr": "",
                                "kind": "array",
                                "array": {
                                  "repr": "Stringable",
                                  "kind": "typeRef",
                                  "typeRef": {
                                    "typeParams": null,
                                    "typeName": "Stringable"
                                  }
                                }
                              },
                              {
                                "repr": "List",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "List"
                                }
                              }
                            ]
                          }
                        ],
                        "typeName": "Record"
                      }
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toFilteredRecord",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 273,
              "col": 2,
              "byteIndex": 9134
            }
          },
          {
            "jsDoc": {
              "doc": "Join `key` and `value` using `: ` as separator",
              "tags": [
                {
                  "kind": "param",
                  "name": "key"
                },
                {
                  "kind": "param",
                  "name": "value"
                },
                {
                  "kind": "return",
                  "doc": "`key` and `value` joined with `: ` as separator"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "List",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "Value",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Value"
                            }
                          }
                        ]
                      },
                      {
                        "repr": ": ",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": ": "
                        }
                      },
                      {
                        "repr": "none",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "none"
                        }
                      }
                    ],
                    "typeName": "List"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "key",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": false,
                    "tsType": {
                      "repr": "Value",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Value"
                      }
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Value",
                    "constraint": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Stringable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Stringable"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Stringable",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Stringable"
                            }
                          }
                        },
                        {
                          "repr": "List",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "List"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toKeyValue",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 289,
              "col": 2,
              "byteIndex": 9601
            }
          },
          {
            "jsDoc": {
              "doc": "Join `key` and `value` using `.` as separator",
              "tags": [
                {
                  "kind": "param",
                  "name": "key"
                },
                {
                  "kind": "param",
                  "name": "value"
                },
                {
                  "kind": "return",
                  "doc": "`key` and `value` joined with `.` as separator"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "List",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "",
                        "kind": "tuple",
                        "tuple": [
                          {
                            "repr": "string",
                            "kind": "keyword",
                            "keyword": "string"
                          },
                          {
                            "repr": "Value",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Value"
                            }
                          }
                        ]
                      },
                      {
                        "repr": ".",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "."
                        }
                      },
                      {
                        "repr": "none",
                        "kind": "literal",
                        "literal": {
                          "kind": "string",
                          "string": "none"
                        }
                      }
                    ],
                    "typeName": "List"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "key",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": false,
                    "tsType": {
                      "repr": "Value",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Value"
                      }
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Value",
                    "constraint": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toObjectKey",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 302,
              "col": 2,
              "byteIndex": 9971
            }
          },
          {
            "jsDoc": {
              "doc": "Join `values` using `, ` as separator and wrap in `{` and `}`",
              "tags": [
                {
                  "kind": "param",
                  "name": "values"
                },
                {
                  "kind": "return",
                  "doc": "`values` joined with `, ` as separator and wrapped in `{` and `}`"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "ListObject",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      }
                    ],
                    "typeName": "ListObject"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "V",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "V"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    }
                  },
                  {
                    "kind": "assign",
                    "left": {
                      "kind": "object",
                      "props": [
                        {
                          "kind": "assign",
                          "key": "skipEmpty",
                          "value": null
                        }
                      ],
                      "optional": false,
                      "tsType": {
                        "repr": "SkipEmptyOption",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "SkipEmptyOption"
                        }
                      }
                    },
                    "right": "[UNSUPPORTED]",
                    "tsType": null
                  }
                ],
                "typeParams": [
                  {
                    "name": "V",
                    "constraint": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toObject",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 316,
              "col": 2,
              "byteIndex": 10378
            }
          },
          {
            "jsDoc": {
              "doc": "Join `values` using `, ` as separator and wrap in `[` and `]`",
              "tags": [
                {
                  "kind": "param",
                  "name": "values"
                },
                {
                  "kind": "return",
                  "doc": "`values` joined with `, ` as separator and wrapped in `{` and `}`"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "ListArray",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      }
                    ],
                    "typeName": "ListArray"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "V",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "V"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "V",
                    "constraint": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toArray",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 328,
              "col": 2,
              "byteIndex": 10759
            }
          },
          {
            "jsDoc": {
              "doc": "Join `values` using `, ` as separator and wrap in `(` and `)`",
              "tags": [
                {
                  "kind": "param",
                  "name": "values"
                },
                {
                  "kind": "return",
                  "doc": "`values` joined with `, ` as separator and wrapped in `(` and `)`"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "ListParams",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      }
                    ],
                    "typeName": "ListParams"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "V",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "V"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "V",
                    "constraint": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toParams",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 337,
              "col": 2,
              "byteIndex": 11078
            }
          },
          {
            "jsDoc": {
              "doc": "Join `values` using `\\n` as separator without a wrapper",
              "tags": [
                {
                  "kind": "param",
                  "name": "values"
                },
                {
                  "kind": "return",
                  "doc": "`values` joined with `\\n` as separator without a wrapper"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "ListLines",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "V",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "V"
                        }
                      }
                    ],
                    "typeName": "ListLines"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "values",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "array",
                      "array": {
                        "repr": "",
                        "kind": "parenthesized",
                        "parenthesized": {
                          "repr": "",
                          "kind": "union",
                          "union": [
                            {
                              "repr": "V",
                              "kind": "typeRef",
                              "typeRef": {
                                "typeParams": null,
                                "typeName": "V"
                              }
                            },
                            {
                              "repr": "undefined",
                              "kind": "keyword",
                              "keyword": "undefined"
                            }
                          ]
                        }
                      }
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "V",
                    "constraint": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toLines",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 346,
              "col": 2,
              "byteIndex": 11384
            }
          },
          {
            "jsDoc": {
              "doc": "Create a KeyList using the keys of @param record",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@afdafg"
                },
                {
                  "kind": "param",
                  "name": "record"
                },
                {
                  "kind": "return",
                  "doc": "KeyList"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "KeyList",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "KeyList"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "record",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Record",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "Stringable",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "Stringable"
                                }
                              }
                            ],
                            "typeName": "Record"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "fromKeys",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 356,
              "col": 2,
              "byteIndex": 11646
            }
          },
          {
            "jsDoc": {
              "doc": "Create a EntryList using the entries of @param record",
              "tags": [
                {
                  "kind": "unsupported",
                  "value": "@afdafg"
                },
                {
                  "kind": "param",
                  "name": "record"
                },
                {
                  "kind": "return",
                  "doc": "EntryList"
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "EntryList",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "EntryList"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "record",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Record",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": [
                              {
                                "repr": "string",
                                "kind": "keyword",
                                "keyword": "string"
                              },
                              {
                                "repr": "T",
                                "kind": "typeRef",
                                "typeRef": {
                                  "typeParams": null,
                                  "typeName": "T"
                                }
                              }
                            ],
                            "typeName": "Record"
                          }
                        },
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        }
                      ]
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "T",
                    "constraint": {
                      "repr": "Stringable",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Stringable"
                      }
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "fromEntries",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 366,
              "col": 2,
              "byteIndex": 11911
            }
          },
          {
            "jsDoc": {
              "doc": "Create a keyValue pair if `value` is not undefined and is not an empty array or List.\nReturn `undefined` otherwise.\n\nUseful for filtering out `undefined values from a record.",
              "tags": [
                {
                  "kind": "param",
                  "name": "key"
                },
                {
                  "kind": "param",
                  "name": "value"
                },
                {
                  "kind": "return",
                  "doc": "`key` and `value` joined with `: ` as separator if `value` is not undefined and is not an empty array or List. `undefined` otherwise."
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "ToFilteredKeyValueReturn",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "Value",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "Value"
                        }
                      }
                    ],
                    "typeName": "ToFilteredKeyValueReturn"
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "key",
                    "optional": false,
                    "tsType": {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  },
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": false,
                    "tsType": {
                      "repr": "Value",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "Value"
                      }
                    }
                  }
                ],
                "typeParams": [
                  {
                    "name": "Value",
                    "constraint": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        },
                        {
                          "repr": "Stringable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Stringable"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Stringable",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Stringable"
                            }
                          }
                        },
                        {
                          "repr": "List",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "List"
                          }
                        }
                      ]
                    }
                  }
                ]
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "toFilteredKeyValue",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 381,
              "col": 2,
              "byteIndex": 12471
            }
          },
          {
            "jsDoc": {
              "doc": "Check if `value` is not undefined and is not an empty array or List.",
              "tags": [
                {
                  "kind": "param",
                  "name": "value"
                },
                {
                  "kind": "return",
                  "doc": "`true` if `value` is not undefined and is not an empty array or List. `false` otherwise."
                }
              ]
            },
            "tsType": {
              "repr": "",
              "kind": "fnOrConstructor",
              "fnOrConstructor": {
                "constructor": false,
                "tsType": {
                  "repr": "value is \u001b[0m\u001b[38;5;12mStringable\u001b[0m | \u001b[0m\u001b[38;5;12mStringable\u001b[0m[] | \u001b[0m\u001b[38;5;12mList\u001b[0m",
                  "kind": "typePredicate",
                  "typePredicate": {
                    "asserts": false,
                    "param": {
                      "type": "identifier",
                      "name": "value"
                    },
                    "type": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "Stringable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Stringable"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Stringable",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Stringable"
                            }
                          }
                        },
                        {
                          "repr": "List",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "List"
                          }
                        }
                      ]
                    }
                  }
                },
                "params": [
                  {
                    "kind": "identifier",
                    "name": "value",
                    "optional": false,
                    "tsType": {
                      "repr": "",
                      "kind": "union",
                      "union": [
                        {
                          "repr": "undefined",
                          "kind": "keyword",
                          "keyword": "undefined"
                        },
                        {
                          "repr": "Stringable",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "Stringable"
                          }
                        },
                        {
                          "repr": "",
                          "kind": "array",
                          "array": {
                            "repr": "Stringable",
                            "kind": "typeRef",
                            "typeRef": {
                              "typeParams": null,
                              "typeName": "Stringable"
                            }
                          }
                        },
                        {
                          "repr": "List",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "List"
                          }
                        }
                      ]
                    }
                  }
                ],
                "typeParams": []
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": true,
            "name": "hasValue",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 395,
              "col": 2,
              "byteIndex": 12981
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Converts the list to its string representation.\n\nJoins all values with the configured separator and wraps with bookends.\nReturns empty string if skipEmpty is enabled and list is empty.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Formatted string representation of the list"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 198,
              "col": 2,
              "byteIndex": 6792
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "Values",
            "constraint": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "Stringable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Stringable"
                }
              }
            },
            "default": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "Stringable",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": null,
                  "typeName": "Stringable"
                }
              }
            }
          },
          {
            "name": "Separator",
            "constraint": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "default": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            }
          },
          {
            "name": "Bookends",
            "constraint": {
              "repr": "BookendsType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "BookendsType"
              }
            },
            "default": {
              "repr": "BookendsType",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "BookendsType"
              }
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "KeyMapFn",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 417,
        "col": 0,
        "byteIndex": 13407
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Mapping function type for transforming keys into values."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "V",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "V"
              }
            },
            "params": [
              {
                "kind": "identifier",
                "name": "key",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "index",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "typeParams": []
          }
        },
        "typeParams": [
          {
            "name": "V",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "KeyList",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 425,
        "col": 0,
        "byteIndex": 13660
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Utility class for working with arrays of string keys.\n\nProvides methods for transforming key arrays into objects and lists\nwith custom mapping functions."
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new KeyList instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "keys",
                  "doc": "- Array of string keys to work with"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "keys",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "string",
                    "kind": "keyword",
                    "keyword": "string"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 434,
              "col": 2,
              "byteIndex": 13840
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Array of string keys"
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "keys",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 427,
              "col": 2,
              "byteIndex": 13715
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Transforms keys into an object using a mapping function.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "mapFn",
                  "doc": "- Function to transform each key into a value"
                },
                {
                  "kind": "param",
                  "name": "options",
                  "doc": "- Options for handling empty values"
                },
                {
                  "kind": "return",
                  "doc": "Object with keys mapped to transformed values"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toObject",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "mapFn",
                  "optional": false,
                  "tsType": {
                    "repr": "KeyMapFn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "KeyMapFn"
                    }
                  }
                },
                {
                  "kind": "assign",
                  "left": {
                    "kind": "object",
                    "props": [
                      {
                        "kind": "assign",
                        "key": "skipEmpty",
                        "value": null
                      }
                    ],
                    "optional": false,
                    "tsType": {
                      "repr": "SkipEmptyOption",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "SkipEmptyOption"
                      }
                    }
                  },
                  "right": "[UNSUPPORTED]",
                  "tsType": null
                }
              ],
              "returnType": {
                "repr": "ListObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "ListObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "Stringable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Stringable"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 445,
              "col": 2,
              "byteIndex": 14157
            }
          },
          {
            "jsDoc": {
              "doc": "Creates a plain object with keys as both keys and values.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Object where each key maps to itself"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toObjectPlain",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "ListObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "ListObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 460,
              "col": 2,
              "byteIndex": 14520
            }
          },
          {
            "jsDoc": {
              "doc": "Transforms keys into a List using a mapping function.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "mapFn",
                  "doc": "- Function to transform each key into a value"
                },
                {
                  "kind": "return",
                  "doc": "List containing the transformed values"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toLines",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "mapFn",
                  "optional": false,
                  "tsType": {
                    "repr": "KeyMapFn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "KeyMapFn"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "ListLines",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "ListLines"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "Stringable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Stringable"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 470,
              "col": 2,
              "byteIndex": 14794
            }
          },
          {
            "jsDoc": {
              "doc": "Creates a List with keys as the values.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "List containing the original keys"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toLinesPlain",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "ListLines",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "string",
                      "kind": "keyword",
                      "keyword": "string"
                    }
                  ],
                  "typeName": "ListLines"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 479,
              "col": 2,
              "byteIndex": 15051
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "Entry",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 487,
        "col": 0,
        "byteIndex": 15182
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Type representing a key-value pair entry."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "tuple",
          "tuple": [
            {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            {
              "repr": "T",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "T"
              }
            }
          ]
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "EntryMapFn",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 492,
        "col": 0,
        "byteIndex": 15308
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Mapping function type for transforming entries."
      },
      "kind": "typeAlias",
      "typeAliasDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "",
              "kind": "union",
              "union": [
                {
                  "repr": "V",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "V"
                  }
                },
                {
                  "repr": "undefined",
                  "kind": "keyword",
                  "keyword": "undefined"
                }
              ]
            },
            "params": [
              {
                "kind": "identifier",
                "name": "entry",
                "optional": false,
                "tsType": {
                  "repr": "Entry",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": [
                      {
                        "repr": "T",
                        "kind": "typeRef",
                        "typeRef": {
                          "typeParams": null,
                          "typeName": "T"
                        }
                      }
                    ],
                    "typeName": "Entry"
                  }
                }
              },
              {
                "kind": "identifier",
                "name": "index",
                "optional": false,
                "tsType": {
                  "repr": "number",
                  "kind": "keyword",
                  "keyword": "number"
                }
              }
            ],
            "typeParams": []
          }
        },
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          },
          {
            "name": "V",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ]
      }
    },
    {
      "name": "EntryList",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
        "line": 505,
        "col": 0,
        "byteIndex": 15665
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Utility class for working with arrays of key-value pair entries.\n\nProvides methods for transforming entry arrays into objects and lists\nwith custom mapping functions.\n",
        "tags": [
          {
            "kind": "template",
            "name": "T",
            "doc": "- Type of the entry values"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new EntryList instance.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "entries",
                  "doc": "- Array of key-value pair entries to work with"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "identifier",
                "name": "entries",
                "optional": false,
                "tsType": {
                  "repr": "",
                  "kind": "array",
                  "array": {
                    "repr": "Entry",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        }
                      ],
                      "typeName": "Entry"
                    }
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 514,
              "col": 2,
              "byteIndex": 15901
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Array of key-value pair entries"
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "Entry",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "T",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "T"
                      }
                    }
                  ],
                  "typeName": "Entry"
                }
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "entries",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 507,
              "col": 2,
              "byteIndex": 15755
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Transforms entries into an object using a mapping function.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "mapFn",
                  "doc": "- Function to transform each entry into a value"
                },
                {
                  "kind": "return",
                  "doc": "Object with transformed values"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toObject",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "mapFn",
                  "optional": false,
                  "tsType": {
                    "repr": "EntryMapFn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "EntryMapFn"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "ListObject",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "ListObject"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "Stringable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Stringable"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 524,
              "col": 2,
              "byteIndex": 16163
            }
          },
          {
            "jsDoc": {
              "doc": "Transforms entries into a List using a mapping function.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "mapFn",
                  "doc": "- Function to transform each entry into a value"
                },
                {
                  "kind": "return",
                  "doc": "List containing the transformed values"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toLines",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "mapFn",
                  "optional": false,
                  "tsType": {
                    "repr": "EntryMapFn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "EntryMapFn"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "ListLines",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "ListLines"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "Stringable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Stringable"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 534,
              "col": 2,
              "byteIndex": 16523
            }
          },
          {
            "jsDoc": {
              "doc": "Transforms entries into an array using a mapping function.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "mapFn",
                  "doc": "- Function to transform each entry into a value"
                },
                {
                  "kind": "return",
                  "doc": "Array containing the transformed values"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "toArray",
            "kind": "method",
            "functionDef": {
              "params": [
                {
                  "kind": "identifier",
                  "name": "mapFn",
                  "optional": false,
                  "tsType": {
                    "repr": "EntryMapFn",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": [
                        {
                          "repr": "T",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "T"
                          }
                        },
                        {
                          "repr": "V",
                          "kind": "typeRef",
                          "typeRef": {
                            "typeParams": null,
                            "typeName": "V"
                          }
                        }
                      ],
                      "typeName": "EntryMapFn"
                    }
                  }
                }
              ],
              "returnType": {
                "repr": "ListArray",
                "kind": "typeRef",
                "typeRef": {
                  "typeParams": [
                    {
                      "repr": "V",
                      "kind": "typeRef",
                      "typeRef": {
                        "typeParams": null,
                        "typeName": "V"
                      }
                    }
                  ],
                  "typeName": "ListArray"
                }
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": [
                {
                  "name": "V",
                  "constraint": {
                    "repr": "Stringable",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "Stringable"
                    }
                  }
                }
              ]
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/List.ts",
              "line": 544,
              "col": 2,
              "byteIndex": 16879
            }
          }
        ],
        "extends": null,
        "implements": [],
        "typeParams": [
          {
            "name": "T",
            "constraint": {
              "repr": "Stringable",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "Stringable"
              }
            }
          }
        ],
        "superTypeParams": []
      }
    },
    {
      "name": "PathParams",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/PathParams.ts",
        "line": 181,
        "col": 0,
        "byteIndex": 5877
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Manages path parameter type definitions and function parameters for API endpoints.\n\n`PathParams` is a utility class that combines type generation, function parameter\nhandling, and path templating for OpenAPI path parameters. It creates TypeScript\ntype definitions for path parameters and generates the corresponding function\nparameters that can be used in API client methods.\n\nThis class is essential for generating type-safe API clients where path parameters\nare properly typed and validated at compile time. It handles both destructured\nparameters (when no argument name is provided) and named parameters.\n\n## Key Features\n\n- **Type Definition Generation**: Creates TypeScript types for path parameters\n- **Function Parameter Integration**: Generates properly typed function parameters\n- **Path Template Processing**: Converts OpenAPI paths to template literals\n- **Destructuring Support**: Handles both named and destructured parameter patterns\n- **Context Integration**: Fully integrated with the SKMTC generation pipeline\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic path parameters with destructuring\n```typescript\nimport { PathParams } from '@skmtc/core';\n\nconst pathParams = new PathParams({\n  context: generateContext,\n  typeName: 'GetUserParams',\n  typeValue: {\n    type: 'object',\n    objectProperties: {\n      properties: {\n        id: { type: 'string' },\n        format: { type: 'string' }\n      }\n    }\n  },\n  pathTemplate: '/users/{id}'\n});\n\nconsole.log(pathParams.path); // '/users/${id}'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Named parameter usage\n```typescript\nconst namedPathParams = new PathParams({\n  context: generateContext,\n  argName: 'params',\n  typeName: 'UserPathParams',\n  typeValue: {\n    type: 'object',\n    objectProperties: {\n      properties: {\n        userId: { type: 'string' },\n        projectId: { type: 'string' }\n      }\n    }\n  },\n  pathTemplate: '/users/{userId}/projects/{projectId}'\n});\n\nconsole.log(pathParams.path); // '/users/${params.userId}/projects/${params.projectId}'\n```\n"
          },
          {
            "kind": "example",
            "doc": "API client method generation\n```typescript\nclass ApiMethodGenerator {\n  generateGetMethod(operationPath: string, parameters: any) {\n    const pathParams = new PathParams({\n      context: this.context,\n      argName: 'pathParams',\n      typeName: 'PathParameters',\n      typeValue: parameters,\n      pathTemplate: operationPath\n    });\n\n    return `\nasync getData(${pathParams.parameter.toString()}) {\n  const url = \\`${pathParams.path}\\`;\n  return this.client.get(url);\n}`;\n  }\n}\n\n// Generates:\n// async getData(pathParams: PathParameters) {\n//   const url = `/users/${pathParams.userId}/projects/${pathParams.projectId}`;\n//   return this.client.get(url);\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "With destructured parameters\n```typescript\nconst destructuredParams = new PathParams({\n  context: generateContext,\n  // No argName provided, so uses destructuring\n  typeName: 'OrderParams',\n  typeValue: {\n    type: 'object',\n    objectProperties: {\n      properties: {\n        orderId: { type: 'string' },\n        customerId: { type: 'string' }\n      }\n    }\n  },\n  pathTemplate: '/customers/{customerId}/orders/{orderId}'\n});\n\n// Function parameter will be: { orderId, customerId }: OrderParams\n// Path template will be: '/customers/${customerId}/orders/${orderId}'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex nested path parameters\n```typescript\nconst complexPathParams = new PathParams({\n  context: generateContext,\n  argName: 'pathData',\n  typeName: 'ComplexPathParams',\n  typeValue: {\n    type: 'object',\n    objectProperties: {\n      properties: {\n        orgId: { type: 'string' },\n        projectId: { type: 'string' },\n        issueId: { type: 'number' },\n        commentId: { type: 'string' }\n      }\n    }\n  },\n  pathTemplate: '/orgs/{orgId}/projects/{projectId}/issues/{issueId}/comments/{commentId}'\n});\n\n// Generates path: '/orgs/${pathData.orgId}/projects/${pathData.projectId}/issues/${pathData.issueId}/comments/${pathData.commentId}'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with operation generation\n```typescript\nclass OperationGenerator {\n  generateOperation(operation: OasOperation) {\n    const pathParameters = this.extractPathParameters(operation);\n\n    if (pathParameters.length > 0) {\n      const pathParams = new PathParams({\n        context: this.context,\n        typeName: `${operation.operationId}PathParams`,\n        typeValue: this.buildParametersType(pathParameters),\n        pathTemplate: operation.path\n      });\n\n      return this.generateMethodWithPathParams(operation, pathParams);\n    }\n\n    return this.generateSimpleMethod(operation);\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new PathParams instance with type definitions and path processing.\n\nThe constructor sets up the complete parameter handling pipeline:\n1. Creates a TypeScript type definition for the parameters\n2. Generates a function parameter (either named or destructured)\n3. Processes the path template for runtime interpolation\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Configuration for path parameter generation\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst pathParams = new PathParams({\n  context: generateContext,\n  argName: 'params',\n  typeName: 'UserPathParams',\n  typeValue: {\n    type: 'object',\n    objectProperties: {\n      properties: {\n        id: { type: 'string' },\n        format: { type: 'string' }\n      }\n    }\n  },\n  pathTemplate: '/users/{id}/profile'\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "argName",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "typeName",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "typeValue",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "pathTemplate",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "ConstructorArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "ConstructorArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/PathParams.ts",
              "line": 223,
              "col": 2,
              "byteIndex": 7186
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "The generation context used for type registration and imports"
            },
            "tsType": {
              "repr": "GenerateContext",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "GenerateContext"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "context",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/PathParams.ts",
              "line": 183,
              "col": 2,
              "byteIndex": 5976
            }
          },
          {
            "jsDoc": {
              "doc": "The TypeScript type definition for the path parameters"
            },
            "tsType": {
              "repr": "Definition",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": [
                  {
                    "repr": "TypeSystemObject",
                    "kind": "typeRef",
                    "typeRef": {
                      "typeParams": null,
                      "typeName": "TypeSystemObject"
                    }
                  }
                ],
                "typeName": "Definition"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "typeDefinition",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/PathParams.ts",
              "line": 186,
              "col": 2,
              "byteIndex": 6070
            }
          },
          {
            "jsDoc": {
              "doc": "The function parameter representation for method signatures"
            },
            "tsType": {
              "repr": "FunctionParameter",
              "kind": "typeRef",
              "typeRef": {
                "typeParams": null,
                "typeName": "FunctionParameter"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "parameter",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/PathParams.ts",
              "line": 189,
              "col": 2,
              "byteIndex": 6189
            }
          },
          {
            "jsDoc": {
              "doc": "The processed path template with parameter substitutions"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "path",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/PathParams.ts",
              "line": 192,
              "col": 2,
              "byteIndex": 6289
            }
          }
        ],
        "indexSignatures": [],
        "methods": [],
        "extends": null,
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "ReactRouterPathParams",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/ReactRouterPathParams.ts",
        "line": 171,
        "col": 0,
        "byteIndex": 5605
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Generates React Router path parameter handling code for OpenAPI operations.\n\n`ReactRouterPathParams` is a specialized content generator that creates the necessary\nReact code for extracting and validating path parameters from React Router's `useParams`\nhook. It automatically generates parameter extraction, assertion logic, and prop passing\ncode based on OpenAPI operation path parameters.\n\nThis class is essential for generating type-safe React components that need to access\nURL path parameters, ensuring runtime validation and proper TypeScript typing. It\nintegrates with React Router's `useParams` hook and adds runtime assertions using\nthe `tiny-invariant` library.\n\n## Key Features\n\n- **Automatic Parameter Extraction**: Generates `useParams()` destructuring code\n- **Runtime Assertions**: Creates invariant checks for required parameters\n- **Prop Passing**: Generates prop spreading syntax for component integration\n- **Import Management**: Automatically registers required imports\n- **Type Safety**: Ensures parameters are properly validated at runtime\n",
        "tags": [
          {
            "kind": "example",
            "doc": "Basic usage with single path parameter\n```typescript\nimport { ReactRouterPathParams } from '@skmtc/core';\n\nconst operation = new OasOperation({\n  path: '/users/{id}',\n  method: 'get',\n  // ... other operation properties\n});\n\nconst pathParams = new ReactRouterPathParams({\n  context: generateContext,\n  generatorKey: 'react-router-params',\n  operation,\n  destinationPath: './UserDetail.tsx'\n});\n\nconsole.log(pathParams.getParams);\n// 'const { id } = useParams()'\n\nconsole.log(pathParams.assertParams);\n// 'invariant(id, 'Expected id to be defined')'\n\nconsole.log(pathParams.passProps);\n// 'id={id}'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Multiple path parameters\n```typescript\nconst complexOperation = new OasOperation({\n  path: '/organizations/{orgId}/projects/{projectId}/issues/{issueId}',\n  method: 'get',\n  // ... other properties\n});\n\nconst multiParams = new ReactRouterPathParams({\n  context: generateContext,\n  generatorKey: 'react-router-params',\n  operation: complexOperation,\n  destinationPath: './IssueDetail.tsx'\n});\n\nconsole.log(multiParams.getParams);\n// 'const { orgId, projectId, issueId } = useParams()'\n\nconsole.log(multiParams.assertParams);\n// 'invariant(orgId, 'Expected orgId to be defined')\n// invariant(projectId, 'Expected projectId to be defined')\n// invariant(issueId, 'Expected issueId to be defined')'\n\nconsole.log(multiParams.passProps);\n// 'orgId={orgId} projectId={projectId} issueId={issueId}'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Generated React component integration\n```typescript\n// Generated component might look like:\nimport { useParams } from 'react-router-dom';\nimport invariant from 'tiny-invariant';\n\nfunction UserDetail() {\n  const { id } = useParams();\n  invariant(id, 'Expected id to be defined');\n\n  return <UserDetailView id={id} />;\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "No path parameters (empty generation)\n```typescript\nconst simpleOperation = new OasOperation({\n  path: '/users',\n  method: 'get',\n  // ... other properties\n});\n\nconst emptyParams = new ReactRouterPathParams({\n  context: generateContext,\n  generatorKey: 'react-router-params',\n  operation: simpleOperation,\n  destinationPath: './UserList.tsx'\n});\n\nconsole.log(emptyParams.getParams);    // ''\nconsole.log(emptyParams.assertParams); // ''\nconsole.log(emptyParams.passProps);    // ''\n// No imports registered for this case\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration in component generation\n```typescript\nclass ReactComponentGenerator {\n  generateDetailComponent(operation: OasOperation) {\n    const pathParams = new ReactRouterPathParams({\n      context: this.context,\n      generatorKey: 'react-component',\n      operation,\n      destinationPath: this.getDestinationPath(operation)\n    });\n\n    if (pathParams.names.length === 0) {\n      // Generate simple component without parameters\n      return this.generateSimpleComponent(operation);\n    }\n\n    return `\nfunction ${operation.operationId}() {\n  ${pathParams.getParams}\n  ${pathParams.assertParams}\n\n  return (\n    <DetailView ${pathParams.passProps} />\n  );\n}`;\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Custom parameter validation\n```typescript\nclass CustomReactRouterParams extends ReactRouterPathParams {\n  generateCustomAssertions(paramName: string): string {\n    return `\ninvariant(${paramName}, 'Expected ${paramName} to be defined');\ninvariant(typeof ${paramName} === 'string', '${paramName} must be a string');\ninvariant(${paramName}.length > 0, '${paramName} cannot be empty');`;\n  }\n}\n```"
          }
        ]
      },
      "kind": "class",
      "classDef": {
        "isAbstract": false,
        "constructors": [
          {
            "jsDoc": {
              "doc": "Creates a new ReactRouterPathParams instance with generated parameter handling code.\n\nThe constructor analyzes the OpenAPI operation to extract path parameters and\ngenerates the necessary React code for parameter extraction, validation, and\nprop passing. It automatically registers required imports when parameters are present.\n",
              "tags": [
                {
                  "kind": "param",
                  "name": "args",
                  "doc": "- Configuration for React Router parameter generation\n"
                },
                {
                  "kind": "example",
                  "doc": "```typescript\nconst pathParams = new ReactRouterPathParams({\n  context: generateContext,\n  generatorKey: 'react-params',\n  operation: userDetailOperation, // has path '/users/{id}'\n  destinationPath: './UserDetail.tsx'\n});\n```"
                }
              ]
            },
            "accessibility": null,
            "hasBody": true,
            "name": "constructor",
            "params": [
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "context",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "operation",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "generatorKey",
                    "value": null
                  },
                  {
                    "kind": "assign",
                    "key": "destinationPath",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "CreateArgs",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "CreateArgs"
                  }
                }
              }
            ],
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/ReactRouterPathParams.ts",
              "line": 203,
              "col": 2,
              "byteIndex": 6751
            }
          }
        ],
        "properties": [
          {
            "jsDoc": {
              "doc": "Generated code for extracting parameters from useParams()"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "getParams",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/ReactRouterPathParams.ts",
              "line": 173,
              "col": 2,
              "byteIndex": 5731
            }
          },
          {
            "jsDoc": {
              "doc": "Generated code for runtime parameter assertions"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "assertParams",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/ReactRouterPathParams.ts",
              "line": 176,
              "col": 2,
              "byteIndex": 5814
            }
          },
          {
            "jsDoc": {
              "doc": "Generated code for passing parameters as component props"
            },
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "passProps",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/ReactRouterPathParams.ts",
              "line": 179,
              "col": 2,
              "byteIndex": 5909
            }
          },
          {
            "jsDoc": {
              "doc": "Array of parameter names extracted from the operation path"
            },
            "tsType": {
              "repr": "",
              "kind": "array",
              "array": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              }
            },
            "readonly": false,
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "name": "names",
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/ReactRouterPathParams.ts",
              "line": 182,
              "col": 2,
              "byteIndex": 6003
            }
          }
        ],
        "indexSignatures": [],
        "methods": [
          {
            "jsDoc": {
              "doc": "Returns an empty string as this class provides code through its properties.\n\nThe ReactRouterPathParams class doesn't generate output through toString(),\ninstead providing generated code through the `getParams`, `assertParams`,\nand `passProps` properties which can be used directly in template generation.\n",
              "tags": [
                {
                  "kind": "return",
                  "doc": "Empty string"
                }
              ]
            },
            "accessibility": null,
            "optional": false,
            "isAbstract": false,
            "isStatic": false,
            "isOverride": true,
            "name": "toString",
            "kind": "method",
            "functionDef": {
              "params": [],
              "returnType": {
                "repr": "string",
                "kind": "keyword",
                "keyword": "string"
              },
              "hasBody": true,
              "isAsync": false,
              "isGenerator": false,
              "typeParams": []
            },
            "location": {
              "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/ReactRouterPathParams.ts",
              "line": 236,
              "col": 2,
              "byteIndex": 7845
            }
          }
        ],
        "extends": "ContentBase",
        "implements": [],
        "typeParams": [],
        "superTypeParams": []
      }
    },
    {
      "name": "toPathTemplate",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/toPathTemplate.ts",
        "line": 115,
        "col": 13,
        "byteIndex": 3900
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Converts OpenAPI path parameters into JavaScript template literal syntax.\n\nThis utility function transforms OpenAPI path syntax (using curly braces) into\nJavaScript template literal syntax (using ${} expressions). It's essential for\ngenerating URL builders, API client methods, and other dynamic path construction\ncode where OpenAPI path parameters need to be interpolated at runtime.\n\nThe function supports both simple parameter substitution and qualified parameter\naccess (when parameters come from an object property).\n",
        "tags": [
          {
            "kind": "param",
            "name": "path",
            "doc": "- OpenAPI path string with {parameter} syntax"
          },
          {
            "kind": "param",
            "name": "queryArg",
            "doc": "- Optional object name to qualify parameter access"
          },
          {
            "kind": "return",
            "doc": "Template literal string with ${} parameter syntax\n"
          },
          {
            "kind": "example",
            "doc": "Basic path parameter conversion\n```typescript\nimport { toPathTemplate } from '@skmtc/core';\n\nconst template = toPathTemplate('/users/{id}/posts/{postId}');\nconsole.log(template); // '/users/${id}/posts/${postId}'\n\n// Usage in generated code:\n// const url = `/users/${id}/posts/${postId}`;\n```\n"
          },
          {
            "kind": "example",
            "doc": "With query argument qualification\n```typescript\nconst template = toPathTemplate('/users/{id}/posts/{postId}', 'params');\nconsole.log(template); // '/users/${params.id}/posts/${params.postId}'\n\n// Usage in generated code:\n// function buildUrl(params: {id: string, postId: string}) {\n//   return `/users/${params.id}/posts/${params.postId}`;\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "API client method generation\n```typescript\nclass ApiClientGenerator {\n  generateMethod(path: string, method: string) {\n    const template = toPathTemplate(path, 'args');\n\n    return `\nasync ${method}(args: PathParams) {\n  const url = \\`${template}\\`;\n  return this.request('${method.toUpperCase()}', url);\n}`;\n  }\n}\n\nconst generator = new ApiClientGenerator();\nconst method = generator.generateMethod('/users/{userId}/profile', 'getProfile');\n\nconsole.log(method);\n// async getProfile(args: PathParams) {\n//   const url = `/users/${args.userId}/profile`;\n//   return this.request('GET', url);\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "URL builder generation\n```typescript\nfunction generateUrlBuilder(endpoints: Array<{name: string, path: string}>) {\n  const builders = endpoints.map(endpoint => {\n    const template = toPathTemplate(endpoint.path);\n\n    return `${endpoint.name}: (${extractParams(endpoint.path)}) => \\`${template}\\``;\n  });\n\n  return `export const urls = {\\n  ${builders.join(',\\n  ')}\\n};`;\n}\n\nconst urlBuilder = generateUrlBuilder([\n  { name: 'user', path: '/users/{id}' },\n  { name: 'userPosts', path: '/users/{id}/posts/{postId}' }\n]);\n\n// Generates:\n// export const urls = {\n//   user: (id) => `/users/${id}`,\n//   userPosts: (id, postId) => `/users/${id}/posts/${postId}`\n// };\n```\n"
          },
          {
            "kind": "example",
            "doc": "React Router integration\n```typescript\nfunction generateRouteComponent(path: string, componentName: string) {\n  const template = toPathTemplate(path, 'params');\n\n  return `\nfunction ${componentName}() {\n  const params = useParams();\n  const apiUrl = \\`/api${template}\\`;\n\n  // Use apiUrl for data fetching\n  return <div>Content for {apiUrl}</div>;\n}`;\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex nested parameters\n```typescript\nconst complexPath = '/organizations/{orgId}/projects/{projectId}/issues/{issueId}/comments/{commentId}';\n\nconst simple = toPathTemplate(complexPath);\nconsole.log(simple);\n// '/organizations/${orgId}/projects/${projectId}/issues/${issueId}/comments/${commentId}'\n\nconst qualified = toPathTemplate(complexPath, 'pathParams');\nconsole.log(qualified);\n// '/organizations/${pathParams.orgId}/projects/${pathParams.projectId}/issues/${pathParams.issueId}/comments/${pathParams.commentId}'\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              },
              {
                "kind": "identifier",
                "name": "queryArg",
                "optional": true,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "toPathParams",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/toPathParams.ts",
        "line": 180,
        "col": 13,
        "byteIndex": 5212
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Converts OpenAPI path parameters to React Router path parameter syntax.\n\nThis utility function transforms OpenAPI path syntax (using curly braces) into\nReact Router path parameter syntax (using colon prefix). It's essential for\ngenerating React Router route definitions and other routing configurations\nthat need to match URL parameters.\n\nThe function performs a simple but crucial transformation that enables\nOpenAPI-defined paths to be used directly in React Router route definitions,\nmaintaining the same parameter names while adapting the syntax.\n",
        "tags": [
          {
            "kind": "param",
            "name": "path",
            "doc": "- OpenAPI path string with {parameter} syntax"
          },
          {
            "kind": "return",
            "doc": "React Router path string with :parameter syntax\n"
          },
          {
            "kind": "example",
            "doc": "Basic path parameter conversion\n```typescript\nimport { toPathParams } from '@skmtc/core';\n\nconst routePath = toPathParams('/users/{id}/posts/{postId}');\nconsole.log(routePath); // '/users/:id/posts/:postId'\n```\n"
          },
          {
            "kind": "example",
            "doc": "React Router route generation\n```typescript\nimport { Routes, Route } from 'react-router-dom';\n\nconst apiPaths = [\n  '/users/{id}',\n  '/users/{id}/posts/{postId}',\n  '/organizations/{orgId}/members/{userId}'\n];\n\nconst routePaths = apiPaths.map(toPathParams);\n// [\n//   '/users/:id',\n//   '/users/:id/posts/:postId',\n//   '/organizations/:orgId/members/:userId'\n// ]\n\nfunction App() {\n  return (\n    <Routes>\n      {routePaths.map(path => (\n        <Route key={path} path={path} element={<DetailView />} />\n      ))}\n    </Routes>\n  );\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Express.js route generation\n```typescript\nimport express from 'express';\n\nclass RouteGenerator {\n  generateExpressRoutes(openApiPaths: string[]) {\n    const router = express.Router();\n\n    openApiPaths.forEach(path => {\n      const expressPath = toPathParams(path);\n\n      router.get(expressPath, (req, res) => {\n        // Handler logic using req.params\n        res.json({ path: expressPath, params: req.params });\n      });\n    });\n\n    return router;\n  }\n}\n\nconst generator = new RouteGenerator();\nconst router = generator.generateExpressRoutes([\n  '/api/users/{userId}',\n  '/api/users/{userId}/orders/{orderId}'\n]);\n// Generates routes for:\n// '/api/users/:userId'\n// '/api/users/:userId/orders/:orderId'\n```\n"
          },
          {
            "kind": "example",
            "doc": "Route configuration generation\n```typescript\ninterface RouteConfig {\n  path: string;\n  component: string;\n  exact?: boolean;\n}\n\nfunction generateRouteConfigs(apiEndpoints: Array<{path: string, component: string}>): RouteConfig[] {\n  return apiEndpoints.map(endpoint => ({\n    path: toPathParams(endpoint.path),\n    component: endpoint.component,\n    exact: true\n  }));\n}\n\nconst routeConfigs = generateRouteConfigs([\n  { path: '/users/{id}', component: 'UserDetail' },\n  { path: '/users/{id}/settings', component: 'UserSettings' },\n  { path: '/projects/{projectId}/tasks/{taskId}', component: 'TaskDetail' }\n]);\n\nconsole.log(routeConfigs);\n// [\n//   { path: '/users/:id', component: 'UserDetail', exact: true },\n//   { path: '/users/:id/settings', component: 'UserSettings', exact: true },\n//   { path: '/projects/:projectId/tasks/:taskId', component: 'TaskDetail', exact: true }\n// ]\n```\n"
          },
          {
            "kind": "example",
            "doc": "Next.js dynamic route generation\n```typescript\nclass NextJsRouteGenerator {\n  generateFileStructure(openApiPaths: string[]) {\n    return openApiPaths.map(path => {\n      // Convert to Next.js file-based routing syntax\n      const routerPath = toPathParams(path);\n      const fileName = routerPath\n        .replace(/:/g, '[') // :id becomes [id\n        .replace(/\\/\\[([^\\]]+)/g, '/[$1]') // [id becomes [id]\n        .replace(/^\\//,'') // Remove leading slash\n        + '.tsx';\n\n      return {\n        originalPath: path,\n        routerPath,\n        fileName\n      };\n    });\n  }\n}\n\nconst generator = new NextJsRouteGenerator();\nconst structure = generator.generateFileStructure([\n  '/users/{id}',\n  '/posts/{slug}/comments/{commentId}'\n]);\n\nconsole.log(structure);\n// [\n//   {\n//     originalPath: '/users/{id}',\n//     routerPath: '/users/:id',\n//     fileName: 'users/[id].tsx'\n//   },\n//   {\n//     originalPath: '/posts/{slug}/comments/{commentId}',\n//     routerPath: '/posts/:slug/comments/:commentId',\n//     fileName: 'posts/[slug]/comments/[commentId].tsx'\n//   }\n// ]\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with path matching\n```typescript\nimport { matchPath } from 'react-router-dom';\n\nclass PathMatcher {\n  createMatcher(openApiPath: string) {\n    const routerPath = toPathParams(openApiPath);\n\n    return (pathname: string) => {\n      return matchPath(\n        { path: routerPath, exact: true },\n        pathname\n      );\n    };\n  }\n}\n\nconst matcher = new PathMatcher();\nconst userMatcher = matcher.createMatcher('/users/{id}');\n\nconst match = userMatcher('/users/123');\nconsole.log(match?.params); // { id: '123' }\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "path",
                "optional": false,
                "tsType": {
                  "repr": "string",
                  "kind": "keyword",
                  "keyword": "string"
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    },
    {
      "name": "withDescription",
      "isDefault": false,
      "location": {
        "filename": "file:///Users/dmitrigrabov/workspace/skmtc-root/skmtc/deno/core/typescript/withDescription.ts",
        "line": 123,
        "col": 13,
        "byteIndex": 3802
      },
      "declarationKind": "export",
      "jsDoc": {
        "doc": "Wraps a value with a JSDoc comment if a description is provided.\n\nThis utility function is used throughout the SKMTC code generation system to\nadd JSDoc documentation comments to generated TypeScript code. If a description\nis provided, it formats it as a single-line JSDoc comment above the value.\nIf no description is provided, the value is returned unchanged.\n",
        "tags": [
          {
            "kind": "param",
            "name": "value",
            "doc": "- The code value to potentially wrap with documentation"
          },
          {
            "kind": "param",
            "name": "modifiers",
            "doc": "- Modifiers object containing optional description"
          },
          {
            "kind": "param",
            "name": "modifiers.description",
            "doc": "- Optional description text for the JSDoc comment"
          },
          {
            "kind": "return",
            "doc": "The value with JSDoc comment prepended if description exists, otherwise just the value\n"
          },
          {
            "kind": "example",
            "doc": "With description\n```typescript\nimport { withDescription } from '@skmtc/core';\n\nconst result = withDescription(\n  'export const API_URL = \"https://api.example.com\";',\n  { description: 'Base URL for all API requests' }\n);\n\nconsole.log(result);\n// /** Base URL for all API requests *\\/\n// export const API_URL = \"https://api.example.com\";\n```\n"
          },
          {
            "kind": "example",
            "doc": "Without description\n```typescript\nconst result = withDescription(\n  'export const API_URL = \"https://api.example.com\";',\n  { description: undefined }\n);\n\nconsole.log(result);\n// export const API_URL = \"https://api.example.com\";\n```\n"
          },
          {
            "kind": "example",
            "doc": "Using with Definition class\n```typescript\nclass ModelGenerator {\n  generateInterface(name: string, description?: string) {\n    const interfaceCode = `interface ${name} {\n  id: string;\n  name: string;\n}`;\n\n    return withDescription(interfaceCode, { description });\n  }\n}\n\nconst generator = new ModelGenerator();\nconst documented = generator.generateInterface('User', 'Represents a user in the system');\n\nconsole.log(documented);\n// /** Represents a user in the system *\\/\n// interface User {\n//   id: string;\n//   name: string;\n// }\n```\n"
          },
          {
            "kind": "example",
            "doc": "Integration with generated definitions\n```typescript\nimport { Definition, Identifier, withDescription } from '@skmtc/core';\n\nclass DocumentedGenerator {\n  createDefinition(name: string, value: string, docs?: string) {\n    return new Definition({\n      context: this.context,\n      identifier: Identifier.createVariable(name),\n      description: docs, // This gets processed by withDescription internally\n      value: {\n        generatorKey: 'documented',\n        content: value\n      }\n    });\n  }\n}\n```\n"
          },
          {
            "kind": "example",
            "doc": "Complex documentation\n```typescript\nconst complexDoc = withDescription(\n  `export type Status = 'active' | 'inactive' | 'pending';`,\n  {\n    description: 'User account status - active users can access all features'\n  }\n);\n\nconsole.log(complexDoc);\n// /** User account status - active users can access all features *\\/\n// export type Status = 'active' | 'inactive' | 'pending';\n```\n"
          },
          {
            "kind": "example",
            "doc": "Conditional documentation\n```typescript\nfunction generateWithOptionalDocs(\n  code: string,\n  includeDescription: boolean\n) {\n  return withDescription(code, {\n    description: includeDescription\n      ? 'This is an auto-generated definition'\n      : undefined\n  });\n}\n\nconst withDocs = generateWithOptionalDocs('export const VALUE = 42;', true);\nconst withoutDocs = generateWithOptionalDocs('export const VALUE = 42;', false);\n\nconsole.log(withDocs);\n// /** This is an auto-generated definition *\\/\n// export const VALUE = 42;\n\nconsole.log(withoutDocs);\n// export const VALUE = 42;\n```"
          }
        ]
      },
      "kind": "variable",
      "variableDef": {
        "tsType": {
          "repr": "",
          "kind": "fnOrConstructor",
          "fnOrConstructor": {
            "constructor": false,
            "tsType": {
              "repr": "string",
              "kind": "keyword",
              "keyword": "string"
            },
            "params": [
              {
                "kind": "identifier",
                "name": "value",
                "optional": false,
                "tsType": {
                  "repr": "Stringable",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Stringable"
                  }
                }
              },
              {
                "kind": "object",
                "props": [
                  {
                    "kind": "assign",
                    "key": "description",
                    "value": null
                  }
                ],
                "optional": false,
                "tsType": {
                  "repr": "Modifiers",
                  "kind": "typeRef",
                  "typeRef": {
                    "typeParams": null,
                    "typeName": "Modifiers"
                  }
                }
              }
            ],
            "typeParams": []
          }
        },
        "kind": "const"
      }
    }
  ]
}
